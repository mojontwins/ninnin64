;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_2x2_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_unrle_vram
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.import		_bankswitch
	.export		_behs
	.export		_mypal_game_bg0
	.export		_mypal_game_bg1
	.export		_mypal_game_bg2
	.export		_mypal_game_bg3
	.export		_mypal_game_bg4
	.export		_mypal_game_bg5
	.export		_mypal_game_bg6
	.export		_mypal_game_bg7
	.export		_mypal_game_bg8
	.export		_mypal_game_bg9
	.export		_mypal_game_fg0
	.export		_mypal_game_fg1
	.export		_mypal_game_fg2
	.export		_mypal_game_fg3
	.export		_mypal_game_fg4
	.export		_mypal_game_fg5
	.export		_tileset_pals
	.export		_spriteset_pals
	.export		_map_00_scr_offsets
	.export		_map_01_scr_offsets
	.export		_map_01_locks
	.export		_map_02_scr_offsets
	.export		_map_02_locks
	.export		_map_03_scr_offsets
	.export		_map_03_locks
	.export		_map_04_scr_offsets
	.export		_map_05_scr_offsets
	.export		_map_06_scr_offsets
	.export		_map_06_locks
	.export		_map_07_scr_offsets
	.export		_map_07_locks
	.export		_map_08_scr_offsets
	.export		_map_09_scr_offsets
	.export		_map_0a_scr_offsets
	.export		_map_0b_scr_offsets
	.export		_enems_0_01
	.export		_enems_0_02
	.export		_enems_0_03
	.export		_enems_0_05
	.export		_enems_0_06
	.export		_enems_0_07
	.export		_enems_0_08
	.export		_enems_0_09
	.export		_enems_0_0d
	.export		_enems_0_0e
	.export		_enems_0_0f
	.export		_enems_0
	.export		_hotspots_0
	.export		_enems_1_00
	.export		_enems_1_01
	.export		_enems_1_02
	.export		_enems_1_03
	.export		_enems_1_04
	.export		_enems_1_0a
	.export		_enems_1_0b
	.export		_enems_1_0c
	.export		_enems_1_0d
	.export		_enems_1_0f
	.export		_enems_1_10
	.export		_enems_1_11
	.export		_enems_1_13
	.export		_enems_1
	.export		_hotspots_1
	.export		_enems_2_02
	.export		_enems_2_03
	.export		_enems_2_08
	.export		_enems_2_09
	.export		_enems_2_0a
	.export		_enems_2_0b
	.export		_enems_2_0c
	.export		_enems_2_0d
	.export		_enems_2_0e
	.export		_enems_2_0f
	.export		_enems_2_12
	.export		_enems_2_14
	.export		_enems_2_15
	.export		_enems_2
	.export		_hotspots_2
	.export		_enems_3_00
	.export		_enems_3_02
	.export		_enems_3_03
	.export		_enems_3_04
	.export		_enems_3_05
	.export		_enems_3_06
	.export		_enems_3_07
	.export		_enems_3_08
	.export		_enems_3_0a
	.export		_enems_3_0b
	.export		_enems_3_0c
	.export		_enems_3_0d
	.export		_enems_3_0e
	.export		_enems_3_0f
	.export		_enems_3
	.export		_hotspots_3
	.export		_enems_4_00
	.export		_enems_4_01
	.export		_enems_4_02
	.export		_enems_4_03
	.export		_enems_4_04
	.export		_enems_4_05
	.export		_enems_4_06
	.export		_enems_4_07
	.export		_enems_4_08
	.export		_enems_4_09
	.export		_enems_4_0a
	.export		_enems_4_0b
	.export		_enems_4
	.export		_hotspots_4
	.export		_enems_5_00
	.export		_enems_5_01
	.export		_enems_5_02
	.export		_enems_5_03
	.export		_enems_5_04
	.export		_enems_5_05
	.export		_enems_5_06
	.export		_enems_5_07
	.export		_enems_5_08
	.export		_enems_5_09
	.export		_enems_5_0a
	.export		_enems_5_0b
	.export		_enems_5
	.export		_hotspots_5
	.export		_enems_6_00
	.export		_enems_6_01
	.export		_enems_6_04
	.export		_enems_6_05
	.export		_enems_6_06
	.export		_enems_6_07
	.export		_enems_6_08
	.export		_enems_6_0a
	.export		_enems_6_0b
	.export		_enems_6_0c
	.export		_enems_6_0d
	.export		_enems_6_0e
	.export		_enems_6_0f
	.export		_enems_6
	.export		_hotspots_6
	.export		_enems_7_01
	.export		_enems_7_03
	.export		_enems_7_05
	.export		_enems_7_08
	.export		_enems_7_09
	.export		_enems_7_0b
	.export		_enems_7_0d
	.export		_enems_7_0e
	.export		_enems_7_0f
	.export		_enems_7_10
	.export		_enems_7_12
	.export		_enems_7_13
	.export		_enems_7_14
	.export		_enems_7_15
	.export		_enems_7_16
	.export		_enems_7_17
	.export		_enems_7
	.export		_hotspots_7
	.export		_enems_8_00
	.export		_enems_8_01
	.export		_enems_8_02
	.export		_enems_8_03
	.export		_enems_8_04
	.export		_enems_8_05
	.export		_enems_8_06
	.export		_enems_8_07
	.export		_enems_8_08
	.export		_enems_8_0a
	.export		_enems_8_0b
	.export		_enems_8_0c
	.export		_enems_8_0d
	.export		_enems_8_0e
	.export		_enems_8_0f
	.export		_enems_8_10
	.export		_enems_8_11
	.export		_enems_8_12
	.export		_enems_8_13
	.export		_enems_8
	.export		_hotspots_8
	.export		_enems_9_00
	.export		_enems_9_02
	.export		_enems_9_03
	.export		_enems_9_04
	.export		_enems_9_05
	.export		_enems_9_06
	.export		_enems_9_07
	.export		_enems_9_08
	.export		_enems_9_09
	.export		_enems_9
	.export		_hotspots_9
	.export		_enems_A_02
	.export		_enems_A_04
	.export		_enems_A_06
	.export		_enems_A_08
	.export		_enems_A_0a
	.export		_enems_A_0b
	.export		_enems_A_0d
	.export		_enems_A_0e
	.export		_enems_A_0f
	.export		_enems_A_10
	.export		_enems_A
	.export		_hotspots_A
	.export		_enems_B_00
	.export		_enems_B_01
	.export		_enems_B_06
	.export		_enems_B_0c
	.export		_enems_B_0d
	.export		_enems_B_0e
	.export		_enems_B_0f
	.export		_enems_B_10
	.export		_enems_B_11
	.export		_enems_B_12
	.export		_enems_B_13
	.export		_enems_B_14
	.export		_enems_B_15
	.export		_enems_B_16
	.export		_enems_B_17
	.export		_enems_B
	.export		_hotspots_B
	.export		_rlets_0
	.export		_rlets_1
	.export		_tsmap0
	.export		_tsmap1
	.export		_tsmap2
	.export		_tsmap3
	.export		_tsmap4
	.export		_tsmap5
	.export		_tsmap6
	.export		_tsmap7
	.export		_tsmap8
	.export		_enems_ssmap0
	.export		_enems_ssmap1
	.export		_enems_ssmap2
	.export		_enems_ssmap3
	.export		_enems_ssmap4
	.export		_enems_ssmap5
	.export		_l_map_chr_rom_bank
	.export		_l_map
	.export		_l_map_size
	.export		_l_map_w
	.export		_l_locks
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_pal_bg
	.export		_l_pal_spr
	.export		_l_bolts_max
	.export		_l_tsmap
	.export		_l_enems_ssmap
	.export		_l_alt_bg
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_pfacing
	.export		_l_ppu_mask
	.export		_l_music
	.export		_hud_rle
	.export		_i
	.export		_gpit
	.export		_gpjt
	.export		_gpaux
	.export		_pad
	.export		_pad_this_frame
	.export		_half_life
	.export		_game_over
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_level
	.export		_gp_gen
	.export		_gp_map
	.export		_ul
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdct
	.export		_rdi
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rdn
	.export		_rlem
	.export		_rleb
	.export		_rler
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_t1
	.export		_t2
	.export		_at1
	.export		_at2
	.export		__en_x
	.export		__en_y
	.export		__en_mx
	.export		__en_my
	.export		__en_touched
	.export		__en_cttouched
	.export		__en_t
	.export		__en_s
	.export		__en_ct
	.export		__en_maxct
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_status
	.export		_en_t
	.export		_en_s
	.export		_en_life
	.export		_en_ct
	.export		_en_fr
	.export		_en_sprid
	.export		_en_collx
	.export		_en_colly
	.export		_touched
	.export		_en_touched
	.export		_en_cttouched
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_pobjs
	.export		_plife
	.export		_pkeys
	.export		_pkilled
	.export		_pneedsreset
	.export		_pammo
	.export		_pfiring
	.export		_pgtmx
	.export		_pgtmy
	.export		_player_ax
	.export		_player_rx
	.export		_player_vx_max
	.export		_prx
	.export		_pry
	.export		_hitv
	.export		_hith
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_enems_offset
	.export		_c_player_offset
	.export		_ts_offs
	.export		_c_alt_bg
	.export		_c_map
	.export		_c_map_chr_rom_bank
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_map_w
	.export		_c_tsmap
	.export		_c_enems_ssmap
	.export		__x
	.export		__y
	.export		__t
	.export		__n
	.export		__x1
	.export		__y1
	.export		__x2
	.export		__y2
	.export		__s
	.export		_f_zone_ac
	.export		_fzx1
	.export		_fzx2
	.export		_fzy1
	.export		_fzy2
	.export		_firezoned
	.export		_hitter_on
	.export		_hitter_x
	.export		_hitter_y
	.export		_hitter_frame
	.export		_hitter_hit_x
	.export		_hitter_hit_y
	.export		__coco_x
	.export		__coco_y
	.export		_coco_it
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_attr_table
	.export		_kids_mode
	.export		_c_ppu_mask
	.export		_ppu_mask_xor_bits_fiddle
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_fade_delay
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_scrpixoffset
	.export		_lkyx
	.export		_lknp
	.export		_lkact
	.export		_yx
	.export		_win_game
	.export		_flags
	.export		_script_something_done
	.export		_c_baddies_count
	.export		_en_maxct
	.export		_en_cur_d
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_psafe
	.export		_pscreenissafe
	.export		_c_bolts_max
	.export		_paused
	.export		_coco_slots_i
	.export		_coco_slots
	.export		_coco_x
	.export		_coco_y
	.export		_coco_mx
	.export		_coco_my
	.export		_pstate
	.export		_pctstate
	.export		_phit
	.export		_pslippery
	.export		_pquicksanded
	.export		_opcoins
	.export		_pcoins
	.export		_screen_clear_list
	.export		_ray_tiles
	.export		_face_tiles
	.export		_face_count
	.export		_face_cleared
	.export		_f0
	.export		_f1
	.export		_f2
	.export		_deco_flags
	.export		_alm0
	.export		_alm1
	.export		_level_names
	.export		_lava_top
	.export		_lava_body
	.export		_lava_delay
	.export		_jitter
	.export		_lava_ticker
	.export		_lava_height
	.export		_lava_cur_height
	.export		_lava_on_screen
	.export		_lava_height_pixels
	.export		_shl5
	.export		_fade_out
	.export		_fade_in
	.export		_bitmasks
	.export		_do_attr_table
	.export		_calc_tile
	.export		_calc_gp_addr
	.export		_draw_tile
	.export		_ul_put2c_hrd
	.export		_ul_put_t_inc
	.export		_update_list_tile
	.export		_p_t
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_un_rle_paint
	.export		_un_rle_screen2
	.export		_pad_read
	.export		_attr
	.export		_qtile
	.export		_map_set
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_cm_two_points
	.export		_close_update_cycle
	.export		_attr_list_mod
	.export		_clear_tile_rdn
	.export		_lava_launch
	.export		_lava_draw_off
	.export		_lava_draw_buff
	.export		_lava_calc
	.export		_bits
	.export		_entering_game
	.export		_entering_level
	.export		_flick_screen
	.export		_exiting_screen
	.export		_entering_screen
	.export		_press_fire_at_screen
	.export		_custom_hud
	.export		_on_tile_break
	.export		_on_tile_get
	.export		_on_obj_got
	.export		_on_enem_killed
	.export		_bolts_load
	.export		_bolt_clear
	.export		_breakable_do_anim
	.export		_break_wall
	.export		_hotspots_load
	.export		_hotspots_create
	.export		_hitter_offs
	.export		_hitter_do
	.export		__mx
	.export		__my
	.export		_cocos_init
	.export		_cocos_add
	.export		_cocos_do
	.export		_player_frames
	.export		__pgtmx
	.export		_player_set_safe
	.export		_player_init
	.export		_player_kill
	.export		_process_tile
	.export		_player_move
	.export		_enems_arrays_restore
	.export		_enems_load
	.export		_enem_hit
	.export		_enems_move
	.export		_cls
	.export		_bat_in
	.export		_bat_out
	.export		_title
	.export		_fixed_screen
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_behs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$18
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$29
	.byte	$02
	.byte	$48
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$80
_mypal_game_bg0:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$0B
	.byte	$19
	.byte	$1D
	.byte	$06
	.byte	$26
	.byte	$36
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$38
_mypal_game_bg1:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$29
	.byte	$1D
	.byte	$06
	.byte	$26
	.byte	$36
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$38
_mypal_game_bg2:
	.byte	$1D
	.byte	$03
	.byte	$00
	.byte	$33
	.byte	$1D
	.byte	$02
	.byte	$12
	.byte	$32
	.byte	$1D
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$38
_mypal_game_bg3:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$21
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$04
	.byte	$16
	.byte	$3D
	.byte	$1D
	.byte	$05
	.byte	$18
	.byte	$37
_mypal_game_bg4:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$2A
	.byte	$1D
	.byte	$2D
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$1D
	.byte	$0B
	.byte	$18
	.byte	$38
_mypal_game_bg5:
	.byte	$1D
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$1D
	.byte	$0C
	.byte	$02
	.byte	$12
	.byte	$1D
	.byte	$05
	.byte	$15
	.byte	$24
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$32
_mypal_game_bg6:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$05
	.byte	$25
	.byte	$37
	.byte	$1D
	.byte	$18
	.byte	$28
	.byte	$38
_mypal_game_bg7:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2A
	.byte	$1D
	.byte	$07
	.byte	$0B
	.byte	$19
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$35
	.byte	$1D
	.byte	$0A
	.byte	$18
	.byte	$36
_mypal_game_bg8:
	.byte	$1D
	.byte	$04
	.byte	$23
	.byte	$35
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$36
	.byte	$1D
	.byte	$05
	.byte	$16
	.byte	$26
	.byte	$1D
	.byte	$07
	.byte	$17
	.byte	$35
_mypal_game_bg9:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$31
	.byte	$1D
	.byte	$03
	.byte	$18
	.byte	$38
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$31
	.byte	$1D
	.byte	$13
	.byte	$10
	.byte	$30
_mypal_game_fg0:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$17
	.byte	$27
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$14
	.byte	$24
_mypal_game_fg1:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$16
	.byte	$28
	.byte	$1D
	.byte	$0D
	.byte	$2A
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$00
_mypal_game_fg2:
	.byte	$1D
	.byte	$0D
	.byte	$34
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$25
	.byte	$35
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$15
	.byte	$25
_mypal_game_fg3:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$18
	.byte	$28
	.byte	$1D
	.byte	$0D
	.byte	$2A
	.byte	$33
	.byte	$1D
	.byte	$0C
	.byte	$1B
	.byte	$29
_mypal_game_fg4:
	.byte	$1D
	.byte	$0D
	.byte	$22
	.byte	$32
	.byte	$1D
	.byte	$0D
	.byte	$0C
	.byte	$1C
	.byte	$1D
	.byte	$0D
	.byte	$02
	.byte	$22
	.byte	$1D
	.byte	$0D
	.byte	$15
	.byte	$25
_mypal_game_fg5:
	.byte	$1D
	.byte	$0D
	.byte	$34
	.byte	$31
	.byte	$1D
	.byte	$0D
	.byte	$16
	.byte	$35
	.byte	$1D
	.byte	$0D
	.byte	$13
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$13
	.byte	$32
_tileset_pals:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
_spriteset_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_map_00_scr_offsets:
	.word	$0000
	.word	$002F
	.word	$005B
	.word	$009C
	.word	$00CF
	.word	$00EE
	.word	$0113
	.word	$012E
	.word	$0149
	.word	$017B
	.word	$0000
	.word	$0000
	.word	$019A
	.word	$01CD
	.word	$01EB
	.word	$0208
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_map_01_scr_offsets:
	.word	$0236
	.word	$0263
	.word	$0299
	.word	$02C3
	.word	$02EA
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$031A
	.word	$034B
	.word	$035F
	.word	$0394
	.word	$03A8
	.word	$03C5
	.word	$03E4
	.word	$03F7
	.word	$042D
	.word	$034B
	.word	$0450
	.word	$0471
	.word	$049B
	.word	$0000
	.word	$0000
	.word	$0000
_map_01_locks:
	.byte	$0F
	.byte	$78
	.byte	$0F
	.byte	$94
_map_02_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$04C8
	.word	$04F3
	.word	$050F
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0537
	.word	$0579
	.word	$0599
	.word	$05C9
	.word	$05ED
	.word	$060C
	.word	$0627
	.word	$0641
	.word	$0682
	.word	$069B
	.word	$06B6
	.word	$0000
	.word	$06DA
	.word	$0719
	.word	$0000
	.word	$0000
_map_02_locks:
	.byte	$0C
	.byte	$7F
	.byte	$0D
	.byte	$7F
_map_03_scr_offsets:
	.word	$0739
	.word	$0769
	.word	$0787
	.word	$07C2
	.word	$07D1
	.word	$07F8
	.word	$0828
	.word	$085D
	.word	$0739
	.word	$088B
	.word	$0787
	.word	$08B1
	.word	$08EA
	.word	$0943
	.word	$0984
	.word	$09BC
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_map_03_locks:
	.byte	$0B
	.byte	$52
	.byte	$0B
	.byte	$76
_map_04_scr_offsets:
	.word	$09E1
	.word	$0A13
	.word	$0A39
	.word	$0A5D
	.word	$0A8B
	.word	$0AA9
	.word	$0ACB
	.word	$0AE7
	.word	$0B13
	.word	$0B4C
	.word	$0B6E
	.word	$0B94
_map_05_scr_offsets:
	.word	$0BB7
	.word	$0BE7
	.word	$0C01
	.word	$0C24
	.word	$0C5E
	.word	$0C91
	.word	$0CD5
	.word	$0D07
	.word	$0D32
	.word	$0D58
	.word	$0D87
	.word	$0DC5
_map_06_scr_offsets:
	.word	$0DE9
	.word	$0E0E
	.word	$0000
	.word	$0000
	.word	$0E46
	.word	$0E6C
	.word	$0E94
	.word	$0EBD
	.word	$0EE6
	.word	$0F1E
	.word	$0F59
	.word	$0F70
	.word	$0F8F
	.word	$0FC0
	.word	$0FD4
	.word	$0FFD
_map_06_locks:
	.byte	$04
	.byte	$93
	.byte	$08
	.byte	$56
	.byte	$0B
	.byte	$58
_map_07_scr_offsets:
	.word	$0000
	.word	$102F
	.word	$0000
	.word	$102F
	.word	$0000
	.word	$106D
	.word	$109B
	.word	$10BF
	.word	$10F5
	.word	$1125
	.word	$0000
	.word	$114D
	.word	$0000
	.word	$1186
	.word	$11A8
	.word	$11D9
	.word	$1212
	.word	$123B
	.word	$1263
	.word	$12A4
	.word	$12DC
	.word	$130C
	.word	$133B
	.word	$1373
_map_07_locks:
	.byte	$09
	.byte	$A0
	.byte	$0E
	.byte	$AE
	.byte	$0F
	.byte	$A1
	.byte	$10
	.byte	$5F
_map_08_scr_offsets:
	.word	$139D
	.word	$13BF
	.word	$13DA
	.word	$13F5
	.word	$1412
	.word	$1434
	.word	$1458
	.word	$147B
	.word	$1497
	.word	$14B8
	.word	$14D0
	.word	$14F6
	.word	$1517
	.word	$1535
	.word	$154E
	.word	$1565
	.word	$1587
	.word	$15A2
	.word	$15C5
	.word	$15EE
_map_09_scr_offsets:
	.word	$1622
	.word	$1654
	.word	$166D
	.word	$168D
	.word	$16B9
	.word	$16D0
	.word	$16EB
	.word	$168D
	.word	$1707
	.word	$1729
_map_0a_scr_offsets:
	.word	$174A
	.word	$0000
	.word	$1783
	.word	$0000
	.word	$17BC
	.word	$0000
	.word	$17EF
	.word	$1821
	.word	$1859
	.word	$0000
	.word	$1880
	.word	$189E
	.word	$0000
	.word	$18CC
	.word	$18FA
	.word	$1919
	.word	$193A
	.word	$196E
	.word	$19A0
	.word	$19BA
_map_0b_scr_offsets:
	.word	$19F0
	.word	$1A20
	.word	$1A56
	.word	$1A56
	.word	$1A56
	.word	$1A56
	.word	$1A62
	.word	$1A9B
	.word	$1ABF
	.word	$1ADB
	.word	$1AEC
	.word	$1A56
	.word	$1AFA
	.word	$1B20
	.word	$1B3D
	.word	$1B5B
	.word	$1B5B
	.word	$1B95
	.word	$1BD1
	.word	$1C00
	.word	$1C23
	.word	$1C48
	.word	$1C6C
	.word	$1C8B
_enems_0_01:
	.byte	$01
	.byte	$97
	.byte	$99
	.byte	$01
	.byte	$00
_enems_0_02:
	.byte	$02
	.byte	$9D
	.byte	$93
	.byte	$02
	.byte	$03
	.byte	$66
	.byte	$8A
	.byte	$01
	.byte	$00
_enems_0_03:
	.byte	$01
	.byte	$95
	.byte	$98
	.byte	$01
	.byte	$00
_enems_0_05:
	.byte	$03
	.byte	$6C
	.byte	$69
	.byte	$01
	.byte	$00
_enems_0_06:
	.byte	$03
	.byte	$55
	.byte	$97
	.byte	$02
	.byte	$00
_enems_0_07:
	.byte	$03
	.byte	$49
	.byte	$AA
	.byte	$02
	.byte	$00
_enems_0_08:
	.byte	$02
	.byte	$9D
	.byte	$9A
	.byte	$01
	.byte	$00
_enems_0_09:
	.byte	$01
	.byte	$92
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_0_0d:
	.byte	$04
	.byte	$5C
	.byte	$58
	.byte	$01
	.byte	$03
	.byte	$14
	.byte	$54
	.byte	$01
	.byte	$00
_enems_0_0e:
	.byte	$04
	.byte	$8D
	.byte	$87
	.byte	$01
	.byte	$00
_enems_0_0f:
	.byte	$01
	.byte	$9D
	.byte	$98
	.byte	$02
	.byte	$03
	.byte	$41
	.byte	$71
	.byte	$02
	.byte	$00
_enems_0:
	.word	$0000
	.addr	_enems_0_01
	.addr	_enems_0_02
	.addr	_enems_0_03
	.word	$0000
	.addr	_enems_0_05
	.addr	_enems_0_06
	.addr	_enems_0_07
	.addr	_enems_0_08
	.addr	_enems_0_09
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_0_0d
	.addr	_enems_0_0e
	.addr	_enems_0_0f
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$56
	.byte	$01
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_1_00:
	.byte	$02
	.byte	$A8
	.byte	$AA
	.byte	$01
	.byte	$00
_enems_1_01:
	.byte	$03
	.byte	$4B
	.byte	$6B
	.byte	$01
	.byte	$00
_enems_1_02:
	.byte	$02
	.byte	$9C
	.byte	$97
	.byte	$02
	.byte	$00
_enems_1_03:
	.byte	$02
	.byte	$7D
	.byte	$76
	.byte	$02
	.byte	$01
	.byte	$34
	.byte	$39
	.byte	$01
	.byte	$02
	.byte	$AB
	.byte	$A4
	.byte	$01
_enems_1_04:
	.byte	$02
	.byte	$46
	.byte	$4B
	.byte	$01
	.byte	$01
	.byte	$A7
	.byte	$A2
	.byte	$01
	.byte	$00
_enems_1_0a:
	.byte	$03
	.byte	$13
	.byte	$75
	.byte	$02
	.byte	$03
	.byte	$2C
	.byte	$6B
	.byte	$01
	.byte	$00
_enems_1_0b:
	.byte	$02
	.byte	$94
	.byte	$9B
	.byte	$02
	.byte	$00
_enems_1_0c:
	.byte	$03
	.byte	$3B
	.byte	$6B
	.byte	$01
	.byte	$01
	.byte	$9A
	.byte	$93
	.byte	$01
	.byte	$00
_enems_1_0d:
	.byte	$02
	.byte	$64
	.byte	$6C
	.byte	$02
	.byte	$00
_enems_1_0f:
	.byte	$03
	.byte	$5A
	.byte	$9B
	.byte	$02
	.byte	$01
	.byte	$3B
	.byte	$34
	.byte	$02
	.byte	$00
_enems_1_10:
	.byte	$02
	.byte	$97
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_1_11:
	.byte	$03
	.byte	$75
	.byte	$A8
	.byte	$02
	.byte	$00
_enems_1_13:
	.byte	$03
	.byte	$56
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_1:
	.addr	_enems_1_00
	.addr	_enems_1_01
	.addr	_enems_1_02
	.addr	_enems_1_03
	.addr	_enems_1_04
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_1_0a
	.addr	_enems_1_0b
	.addr	_enems_1_0c
	.addr	_enems_1_0d
	.word	$0000
	.addr	_enems_1_0f
	.addr	_enems_1_10
	.addr	_enems_1_11
	.word	$0000
	.addr	_enems_1_13
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$2E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_2_02:
	.byte	$03
	.byte	$46
	.byte	$69
	.byte	$02
	.byte	$00
_enems_2_03:
	.byte	$04
	.byte	$8C
	.byte	$85
	.byte	$02
	.byte	$00
_enems_2_08:
	.byte	$03
	.byte	$56
	.byte	$6A
	.byte	$02
	.byte	$00
_enems_2_09:
	.byte	$02
	.byte	$99
	.byte	$94
	.byte	$01
	.byte	$00
_enems_2_0a:
	.byte	$01
	.byte	$8A
	.byte	$88
	.byte	$01
	.byte	$03
	.byte	$28
	.byte	$3C
	.byte	$01
	.byte	$00
_enems_2_0b:
	.byte	$04
	.byte	$AB
	.byte	$A4
	.byte	$01
	.byte	$00
_enems_2_0c:
	.byte	$04
	.byte	$17
	.byte	$A7
	.byte	$02
	.byte	$00
_enems_2_0d:
	.byte	$04
	.byte	$A3
	.byte	$A9
	.byte	$02
	.byte	$00
_enems_2_0e:
	.byte	$04
	.byte	$9D
	.byte	$91
	.byte	$02
	.byte	$00
_enems_2_0f:
	.byte	$03
	.byte	$3D
	.byte	$AD
	.byte	$02
	.byte	$01
	.byte	$AB
	.byte	$A4
	.byte	$02
	.byte	$03
	.byte	$43
	.byte	$73
	.byte	$02
_enems_2_12:
	.byte	$04
	.byte	$95
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_2_14:
	.byte	$02
	.byte	$32
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$6E
	.byte	$68
	.byte	$01
	.byte	$00
_enems_2_15:
	.byte	$04
	.byte	$4E
	.byte	$8E
	.byte	$02
	.byte	$02
	.byte	$34
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$A7
	.byte	$A1
	.byte	$02
_enems_2:
	.word	$0000
	.word	$0000
	.addr	_enems_2_02
	.addr	_enems_2_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_2_08
	.addr	_enems_2_09
	.addr	_enems_2_0a
	.addr	_enems_2_0b
	.addr	_enems_2_0c
	.addr	_enems_2_0d
	.addr	_enems_2_0e
	.addr	_enems_2_0f
	.word	$0000
	.word	$0000
	.addr	_enems_2_12
	.word	$0000
	.addr	_enems_2_14
	.addr	_enems_2_15
	.word	$0000
	.word	$0000
_hotspots_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$52
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$2D
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_3_00:
	.byte	$11
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$00
_enems_3_02:
	.byte	$03
	.byte	$56
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_3_03:
	.byte	$13
	.byte	$33
	.byte	$97
	.byte	$01
	.byte	$00
_enems_3_04:
	.byte	$02
	.byte	$9A
	.byte	$94
	.byte	$02
	.byte	$00
_enems_3_05:
	.byte	$01
	.byte	$6A
	.byte	$61
	.byte	$02
	.byte	$01
	.byte	$94
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_3_06:
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$01
	.byte	$00
_enems_3_07:
	.byte	$03
	.byte	$95
	.byte	$9A
	.byte	$02
	.byte	$00
_enems_3_08:
	.byte	$12
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$00
_enems_3_0a:
	.byte	$13
	.byte	$18
	.byte	$98
	.byte	$01
	.byte	$00
_enems_3_0b:
	.byte	$13
	.byte	$1B
	.byte	$9B
	.byte	$01
	.byte	$00
_enems_3_0c:
	.byte	$03
	.byte	$27
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$94
	.byte	$25
	.byte	$01
	.byte	$00
_enems_3_0d:
	.byte	$02
	.byte	$68
	.byte	$64
	.byte	$02
	.byte	$01
	.byte	$92
	.byte	$9B
	.byte	$02
	.byte	$00
_enems_3_0e:
	.byte	$03
	.byte	$46
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_3_0f:
	.byte	$13
	.byte	$1E
	.byte	$7E
	.byte	$01
	.byte	$00
_enems_3:
	.addr	_enems_3_00
	.word	$0000
	.addr	_enems_3_02
	.addr	_enems_3_03
	.addr	_enems_3_04
	.addr	_enems_3_05
	.addr	_enems_3_06
	.addr	_enems_3_07
	.addr	_enems_3_08
	.word	$0000
	.addr	_enems_3_0a
	.addr	_enems_3_0b
	.addr	_enems_3_0c
	.addr	_enems_3_0d
	.addr	_enems_3_0e
	.addr	_enems_3_0f
_hotspots_3:
	.byte	$02
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$9C
	.byte	$00
	.byte	$00
_enems_4_00:
	.byte	$03
	.byte	$65
	.byte	$97
	.byte	$01
	.byte	$00
_enems_4_01:
	.byte	$03
	.byte	$55
	.byte	$95
	.byte	$02
	.byte	$03
	.byte	$99
	.byte	$59
	.byte	$02
	.byte	$00
_enems_4_02:
	.byte	$27
	.byte	$0F
	.byte	$0E
	.byte	$01
	.byte	$00
_enems_4_03:
	.byte	$27
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$00
_enems_4_04:
	.byte	$03
	.byte	$36
	.byte	$35
	.byte	$01
	.byte	$00
_enems_4_05:
	.byte	$03
	.byte	$14
	.byte	$75
	.byte	$01
	.byte	$00
_enems_4_06:
	.byte	$02
	.byte	$38
	.byte	$33
	.byte	$01
	.byte	$00
_enems_4_07:
	.byte	$03
	.byte	$46
	.byte	$49
	.byte	$01
	.byte	$00
_enems_4_08:
	.byte	$02
	.byte	$4E
	.byte	$4C
	.byte	$01
	.byte	$01
	.byte	$26
	.byte	$28
	.byte	$01
	.byte	$00
_enems_4_09:
	.byte	$01
	.byte	$38
	.byte	$36
	.byte	$01
	.byte	$00
_enems_4_0a:
	.byte	$02
	.byte	$87
	.byte	$89
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$58
	.byte	$02
	.byte	$00
_enems_4_0b:
	.byte	$27
	.byte	$0E
	.byte	$1E
	.byte	$01
	.byte	$00
_enems_4:
	.addr	_enems_4_00
	.addr	_enems_4_01
	.addr	_enems_4_02
	.addr	_enems_4_03
	.addr	_enems_4_04
	.addr	_enems_4_05
	.addr	_enems_4_06
	.addr	_enems_4_07
	.addr	_enems_4_08
	.addr	_enems_4_09
	.addr	_enems_4_0a
	.addr	_enems_4_0b
_hotspots_4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$01
	.byte	$6C
_enems_5_00:
	.byte	$03
	.byte	$8D
	.byte	$5D
	.byte	$01
	.byte	$00
_enems_5_01:
	.byte	$01
	.byte	$65
	.byte	$61
	.byte	$01
	.byte	$02
	.byte	$9B
	.byte	$9E
	.byte	$01
	.byte	$00
_enems_5_02:
	.byte	$04
	.byte	$A3
	.byte	$AD
	.byte	$01
	.byte	$02
	.byte	$4C
	.byte	$4B
	.byte	$01
	.byte	$00
_enems_5_03:
	.byte	$04
	.byte	$92
	.byte	$32
	.byte	$01
	.byte	$02
	.byte	$94
	.byte	$97
	.byte	$01
	.byte	$00
_enems_5_04:
	.byte	$04
	.byte	$AD
	.byte	$A2
	.byte	$02
	.byte	$53
	.byte	$07
	.byte	$17
	.byte	$80
	.byte	$00
_enems_5_05:
	.byte	$52
	.byte	$4D
	.byte	$7D
	.byte	$80
	.byte	$01
	.byte	$53
	.byte	$56
	.byte	$02
	.byte	$00
_enems_5_06:
	.byte	$12
	.byte	$34
	.byte	$35
	.byte	$00
	.byte	$00
_enems_5_07:
	.byte	$04
	.byte	$56
	.byte	$59
	.byte	$01
	.byte	$00
_enems_5_08:
	.byte	$04
	.byte	$A4
	.byte	$64
	.byte	$01
	.byte	$03
	.byte	$16
	.byte	$46
	.byte	$02
	.byte	$00
_enems_5_09:
	.byte	$04
	.byte	$A2
	.byte	$AD
	.byte	$01
	.byte	$00
_enems_5_0a:
	.byte	$04
	.byte	$A2
	.byte	$AD
	.byte	$01
	.byte	$00
_enems_5_0b:
	.byte	$51
	.byte	$15
	.byte	$65
	.byte	$70
	.byte	$00
_enems_5:
	.addr	_enems_5_00
	.addr	_enems_5_01
	.addr	_enems_5_02
	.addr	_enems_5_03
	.addr	_enems_5_04
	.addr	_enems_5_05
	.addr	_enems_5_06
	.addr	_enems_5_07
	.addr	_enems_5_08
	.addr	_enems_5_09
	.addr	_enems_5_0a
	.addr	_enems_5_0b
_hotspots_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$97
	.byte	$01
	.byte	$5C
_enems_6_00:
	.byte	$53
	.byte	$15
	.byte	$25
	.byte	$00
	.byte	$00
_enems_6_01:
	.byte	$01
	.byte	$36
	.byte	$39
	.byte	$01
	.byte	$00
_enems_6_04:
	.byte	$02
	.byte	$14
	.byte	$2B
	.byte	$01
	.byte	$00
_enems_6_05:
	.byte	$41
	.byte	$7A
	.byte	$7B
	.byte	$60
	.byte	$00
_enems_6_06:
	.byte	$74
	.byte	$46
	.byte	$56
	.byte	$40
	.byte	$00
_enems_6_07:
	.byte	$01
	.byte	$8E
	.byte	$8C
	.byte	$01
	.byte	$02
	.byte	$81
	.byte	$83
	.byte	$01
	.byte	$00
_enems_6_08:
	.byte	$03
	.byte	$47
	.byte	$5D
	.byte	$02
	.byte	$00
_enems_6_0a:
	.byte	$11
	.byte	$51
	.byte	$52
	.byte	$00
	.byte	$11
	.byte	$6E
	.byte	$6D
	.byte	$00
	.byte	$11
	.byte	$71
	.byte	$72
	.byte	$00
_enems_6_0b:
	.byte	$01
	.byte	$54
	.byte	$57
	.byte	$01
	.byte	$02
	.byte	$59
	.byte	$5B
	.byte	$01
	.byte	$00
_enems_6_0c:
	.byte	$01
	.byte	$38
	.byte	$3E
	.byte	$02
	.byte	$02
	.byte	$6A
	.byte	$64
	.byte	$02
	.byte	$00
_enems_6_0d:
	.byte	$12
	.byte	$29
	.byte	$59
	.byte	$01
	.byte	$00
_enems_6_0e:
	.byte	$06
	.byte	$47
	.byte	$58
	.byte	$01
	.byte	$00
_enems_6_0f:
	.byte	$14
	.byte	$4A
	.byte	$44
	.byte	$60
	.byte	$00
_enems_6:
	.addr	_enems_6_00
	.addr	_enems_6_01
	.word	$0000
	.word	$0000
	.addr	_enems_6_04
	.addr	_enems_6_05
	.addr	_enems_6_06
	.addr	_enems_6_07
	.addr	_enems_6_08
	.word	$0000
	.addr	_enems_6_0a
	.addr	_enems_6_0b
	.addr	_enems_6_0c
	.addr	_enems_6_0d
	.addr	_enems_6_0e
	.addr	_enems_6_0f
_hotspots_6:
	.byte	$02
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$82
	.byte	$02
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$38
	.byte	$00
	.byte	$00
_enems_7_01:
	.byte	$06
	.byte	$1E
	.byte	$2E
	.byte	$00
	.byte	$06
	.byte	$11
	.byte	$21
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$25
	.byte	$00
_enems_7_03:
	.byte	$06
	.byte	$11
	.byte	$21
	.byte	$02
	.byte	$06
	.byte	$1E
	.byte	$2E
	.byte	$00
	.byte	$06
	.byte	$1A
	.byte	$2A
	.byte	$01
_enems_7_05:
	.byte	$04
	.byte	$96
	.byte	$9E
	.byte	$02
	.byte	$00
_enems_7_08:
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$01
	.byte	$00
_enems_7_09:
	.byte	$06
	.byte	$2D
	.byte	$2C
	.byte	$01
	.byte	$00
_enems_7_0b:
	.byte	$04
	.byte	$9E
	.byte	$92
	.byte	$01
	.byte	$00
_enems_7_0d:
	.byte	$04
	.byte	$B3
	.byte	$13
	.byte	$02
	.byte	$06
	.byte	$A1
	.byte	$A2
	.byte	$00
	.byte	$00
_enems_7_0e:
	.byte	$27
	.byte	$17
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$58
	.byte	$A8
	.byte	$01
	.byte	$00
_enems_7_0f:
	.byte	$06
	.byte	$23
	.byte	$24
	.byte	$03
	.byte	$06
	.byte	$3C
	.byte	$3B
	.byte	$03
	.byte	$04
	.byte	$4B
	.byte	$44
	.byte	$02
_enems_7_10:
	.byte	$06
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$00
_enems_7_12:
	.byte	$06
	.byte	$57
	.byte	$58
	.byte	$00
	.byte	$00
_enems_7_13:
	.byte	$09
	.byte	$0B
	.byte	$BB
	.byte	$08
	.byte	$00
_enems_7_14:
	.byte	$01
	.byte	$66
	.byte	$69
	.byte	$02
	.byte	$09
	.byte	$04
	.byte	$B4
	.byte	$08
	.byte	$00
_enems_7_15:
	.byte	$52
	.byte	$22
	.byte	$2C
	.byte	$32
	.byte	$00
_enems_7_16:
	.byte	$04
	.byte	$A2
	.byte	$AE
	.byte	$02
	.byte	$06
	.byte	$62
	.byte	$52
	.byte	$03
	.byte	$00
_enems_7_17:
	.byte	$04
	.byte	$A3
	.byte	$AD
	.byte	$02
	.byte	$00
_enems_7:
	.word	$0000
	.addr	_enems_7_01
	.word	$0000
	.addr	_enems_7_03
	.word	$0000
	.addr	_enems_7_05
	.word	$0000
	.word	$0000
	.addr	_enems_7_08
	.addr	_enems_7_09
	.word	$0000
	.addr	_enems_7_0b
	.word	$0000
	.addr	_enems_7_0d
	.addr	_enems_7_0e
	.addr	_enems_7_0f
	.addr	_enems_7_10
	.word	$0000
	.addr	_enems_7_12
	.addr	_enems_7_13
	.addr	_enems_7_14
	.addr	_enems_7_15
	.addr	_enems_7_16
	.addr	_enems_7_17
_hotspots_7:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$A2
	.byte	$03
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$4D
	.byte	$02
	.byte	$8D
_enems_8_00:
	.byte	$01
	.byte	$9B
	.byte	$94
	.byte	$02
	.byte	$00
_enems_8_01:
	.byte	$03
	.byte	$63
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_8_02:
	.byte	$03
	.byte	$84
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$66
	.byte	$02
	.byte	$00
_enems_8_03:
	.byte	$06
	.byte	$78
	.byte	$77
	.byte	$01
	.byte	$00
_enems_8_04:
	.byte	$57
	.byte	$18
	.byte	$28
	.byte	$41
	.byte	$00
_enems_8_05:
	.byte	$06
	.byte	$64
	.byte	$74
	.byte	$01
	.byte	$06
	.byte	$73
	.byte	$83
	.byte	$03
	.byte	$00
_enems_8_06:
	.byte	$03
	.byte	$24
	.byte	$75
	.byte	$02
	.byte	$03
	.byte	$29
	.byte	$78
	.byte	$02
	.byte	$00
_enems_8_07:
	.byte	$57
	.byte	$1D
	.byte	$2D
	.byte	$31
	.byte	$00
_enems_8_08:
	.byte	$57
	.byte	$1D
	.byte	$2D
	.byte	$31
	.byte	$04
	.byte	$82
	.byte	$86
	.byte	$01
	.byte	$00
_enems_8_0a:
	.byte	$03
	.byte	$29
	.byte	$99
	.byte	$04
	.byte	$06
	.byte	$73
	.byte	$74
	.byte	$01
	.byte	$00
_enems_8_0b:
	.byte	$06
	.byte	$32
	.byte	$33
	.byte	$01
	.byte	$00
_enems_8_0c:
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$03
	.byte	$04
	.byte	$9E
	.byte	$91
	.byte	$02
	.byte	$00
_enems_8_0d:
	.byte	$06
	.byte	$27
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$45
	.byte	$6B
	.byte	$02
	.byte	$00
_enems_8_0e:
	.byte	$02
	.byte	$64
	.byte	$61
	.byte	$02
	.byte	$00
_enems_8_0f:
	.byte	$06
	.byte	$67
	.byte	$77
	.byte	$03
	.byte	$04
	.byte	$8E
	.byte	$81
	.byte	$02
	.byte	$00
_enems_8_10:
	.byte	$06
	.byte	$23
	.byte	$33
	.byte	$01
	.byte	$06
	.byte	$73
	.byte	$83
	.byte	$01
	.byte	$00
_enems_8_11:
	.byte	$03
	.byte	$32
	.byte	$52
	.byte	$02
	.byte	$02
	.byte	$78
	.byte	$7A
	.byte	$02
	.byte	$00
_enems_8_12:
	.byte	$03
	.byte	$1A
	.byte	$7A
	.byte	$02
	.byte	$00
_enems_8_13:
	.byte	$06
	.byte	$17
	.byte	$27
	.byte	$01
	.byte	$06
	.byte	$43
	.byte	$53
	.byte	$03
	.byte	$00
_enems_8:
	.addr	_enems_8_00
	.addr	_enems_8_01
	.addr	_enems_8_02
	.addr	_enems_8_03
	.addr	_enems_8_04
	.addr	_enems_8_05
	.addr	_enems_8_06
	.addr	_enems_8_07
	.addr	_enems_8_08
	.word	$0000
	.addr	_enems_8_0a
	.addr	_enems_8_0b
	.addr	_enems_8_0c
	.addr	_enems_8_0d
	.addr	_enems_8_0e
	.addr	_enems_8_0f
	.addr	_enems_8_10
	.addr	_enems_8_11
	.addr	_enems_8_12
	.addr	_enems_8_13
_hotspots_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$76
	.byte	$03
	.byte	$9D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_9_00:
	.byte	$01
	.byte	$44
	.byte	$4A
	.byte	$02
	.byte	$00
_enems_9_02:
	.byte	$06
	.byte	$58
	.byte	$59
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$84
	.byte	$01
	.byte	$00
_enems_9_03:
	.byte	$04
	.byte	$AA
	.byte	$A4
	.byte	$02
	.byte	$00
_enems_9_04:
	.byte	$04
	.byte	$7B
	.byte	$79
	.byte	$02
	.byte	$04
	.byte	$41
	.byte	$47
	.byte	$02
	.byte	$04
	.byte	$48
	.byte	$78
	.byte	$01
_enems_9_05:
	.byte	$06
	.byte	$69
	.byte	$68
	.byte	$01
	.byte	$00
_enems_9_06:
	.byte	$02
	.byte	$23
	.byte	$25
	.byte	$01
	.byte	$00
_enems_9_07:
	.byte	$04
	.byte	$A3
	.byte	$AA
	.byte	$01
	.byte	$00
_enems_9_08:
	.byte	$06
	.byte	$36
	.byte	$37
	.byte	$01
	.byte	$00
_enems_9_09:
	.byte	$01
	.byte	$95
	.byte	$91
	.byte	$01
	.byte	$00
_enems_9:
	.addr	_enems_9_00
	.word	$0000
	.addr	_enems_9_02
	.addr	_enems_9_03
	.addr	_enems_9_04
	.addr	_enems_9_05
	.addr	_enems_9_06
	.addr	_enems_9_07
	.addr	_enems_9_08
	.addr	_enems_9_09
_hotspots_9:
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_A_02:
	.byte	$02
	.byte	$67
	.byte	$6B
	.byte	$02
	.byte	$00
_enems_A_04:
	.byte	$03
	.byte	$83
	.byte	$8B
	.byte	$02
	.byte	$00
_enems_A_06:
	.byte	$06
	.byte	$49
	.byte	$39
	.byte	$01
	.byte	$00
_enems_A_08:
	.byte	$01
	.byte	$74
	.byte	$73
	.byte	$01
	.byte	$00
_enems_A_0a:
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$34
	.byte	$33
	.byte	$01
	.byte	$00
_enems_A_0b:
	.byte	$06
	.byte	$2C
	.byte	$3C
	.byte	$03
	.byte	$00
_enems_A_0d:
	.byte	$02
	.byte	$97
	.byte	$93
	.byte	$02
	.byte	$00
_enems_A_0e:
	.byte	$06
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$06
	.byte	$1E
	.byte	$1D
	.byte	$00
	.byte	$00
_enems_A_0f:
	.byte	$04
	.byte	$47
	.byte	$97
	.byte	$01
	.byte	$00
_enems_A_10:
	.byte	$01
	.byte	$7B
	.byte	$79
	.byte	$01
	.byte	$00
_enems_A:
	.word	$0000
	.word	$0000
	.addr	_enems_A_02
	.word	$0000
	.addr	_enems_A_04
	.word	$0000
	.addr	_enems_A_06
	.word	$0000
	.addr	_enems_A_08
	.word	$0000
	.addr	_enems_A_0a
	.addr	_enems_A_0b
	.word	$0000
	.addr	_enems_A_0d
	.addr	_enems_A_0e
	.addr	_enems_A_0f
	.addr	_enems_A_10
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_A:
	.byte	$01
	.byte	$8A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$32
	.byte	$03
	.byte	$26
_enems_B_00:
	.byte	$06
	.byte	$33
	.byte	$23
	.byte	$00
	.byte	$06
	.byte	$2B
	.byte	$1B
	.byte	$01
	.byte	$00
_enems_B_01:
	.byte	$06
	.byte	$18
	.byte	$08
	.byte	$01
	.byte	$09
	.byte	$38
	.byte	$98
	.byte	$08
	.byte	$00
_enems_B_06:
	.byte	$09
	.byte	$28
	.byte	$A8
	.byte	$08
	.byte	$09
	.byte	$1C
	.byte	$7C
	.byte	$08
	.byte	$00
_enems_B_0c:
	.byte	$04
	.byte	$29
	.byte	$2C
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$B8
	.byte	$08
	.byte	$00
_enems_B_0d:
	.byte	$09
	.byte	$43
	.byte	$A3
	.byte	$04
	.byte	$09
	.byte	$3B
	.byte	$BB
	.byte	$04
	.byte	$06
	.byte	$1B
	.byte	$1A
	.byte	$01
_enems_B_0e:
	.byte	$09
	.byte	$56
	.byte	$B6
	.byte	$02
	.byte	$04
	.byte	$83
	.byte	$8D
	.byte	$02
	.byte	$06
	.byte	$36
	.byte	$26
	.byte	$01
_enems_B_0f:
	.byte	$04
	.byte	$93
	.byte	$9D
	.byte	$01
	.byte	$00
_enems_B_10:
	.byte	$04
	.byte	$93
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_B_11:
	.byte	$04
	.byte	$93
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_B_12:
	.byte	$09
	.byte	$59
	.byte	$B9
	.byte	$04
	.byte	$06
	.byte	$39
	.byte	$38
	.byte	$02
	.byte	$00
_enems_B_13:
	.byte	$02
	.byte	$78
	.byte	$76
	.byte	$01
	.byte	$06
	.byte	$4B
	.byte	$4A
	.byte	$02
	.byte	$00
_enems_B_14:
	.byte	$09
	.byte	$56
	.byte	$B6
	.byte	$04
	.byte	$04
	.byte	$A3
	.byte	$AD
	.byte	$02
	.byte	$04
	.byte	$7D
	.byte	$3D
	.byte	$01
_enems_B_15:
	.byte	$04
	.byte	$A1
	.byte	$AE
	.byte	$02
	.byte	$06
	.byte	$66
	.byte	$76
	.byte	$02
	.byte	$06
	.byte	$6B
	.byte	$7B
	.byte	$01
_enems_B_16:
	.byte	$09
	.byte	$37
	.byte	$B7
	.byte	$04
	.byte	$06
	.byte	$6C
	.byte	$5C
	.byte	$02
	.byte	$06
	.byte	$54
	.byte	$44
	.byte	$02
_enems_B_17:
	.byte	$06
	.byte	$AE
	.byte	$AD
	.byte	$01
	.byte	$06
	.byte	$A9
	.byte	$A8
	.byte	$00
	.byte	$00
_enems_B:
	.addr	_enems_B_00
	.addr	_enems_B_01
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_B_06
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_B_0c
	.addr	_enems_B_0d
	.addr	_enems_B_0e
	.addr	_enems_B_0f
	.addr	_enems_B_10
	.addr	_enems_B_11
	.addr	_enems_B_12
	.addr	_enems_B_13
	.addr	_enems_B_14
	.addr	_enems_B_15
	.addr	_enems_B_16
	.addr	_enems_B_17
_hotspots_B:
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$A7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$4C
_rlets_0:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0E
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$CC
	.byte	$C3
	.byte	$CC
	.byte	$CC
	.byte	$C3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$CC
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$F0
	.byte	$00
	.byte	$30
	.byte	$F0
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_rlets_1:
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$AF
	.byte	$04
	.byte	$01
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_tsmap0:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap1:
	.byte	$20
	.byte	$10
	.byte	$11
	.byte	$14
	.byte	$28
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1E
	.byte	$24
	.byte	$0A
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap2:
	.byte	$00
	.byte	$06
	.byte	$16
	.byte	$17
	.byte	$09
	.byte	$1A
	.byte	$1B
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap3:
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$11
	.byte	$16
	.byte	$24
	.byte	$23
	.byte	$1C
	.byte	$1B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap4:
	.byte	$00
	.byte	$0A
	.byte	$1B
	.byte	$04
	.byte	$05
	.byte	$16
	.byte	$17
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0D
	.byte	$0E
	.byte	$28
	.byte	$1A
	.byte	$29
_tsmap5:
	.byte	$00
	.byte	$16
	.byte	$0A
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$24
	.byte	$1B
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap6:
	.byte	$20
	.byte	$0A
	.byte	$1B
	.byte	$04
	.byte	$05
	.byte	$16
	.byte	$17
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0D
	.byte	$0E
	.byte	$28
	.byte	$1A
	.byte	$29
_tsmap7:
	.byte	$28
	.byte	$10
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$06
	.byte	$1B
	.byte	$0A
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap8:
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$09
	.byte	$0A
	.byte	$1B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_enems_ssmap0:
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap1:
	.byte	$24
	.byte	$25
	.byte	$32
	.byte	$33
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap2:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$16
	.byte	$17
_enems_ssmap3:
	.byte	$24
	.byte	$25
	.byte	$12
	.byte	$13
	.byte	$34
	.byte	$35
	.byte	$26
	.byte	$27
_enems_ssmap4:
	.byte	$34
	.byte	$35
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap5:
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$36
	.byte	$37
	.byte	$16
	.byte	$17
_l_map_chr_rom_bank:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_l_map:
	.addr	_map_00_scr_offsets
	.addr	_map_01_scr_offsets
	.addr	_map_04_scr_offsets
	.addr	_map_03_scr_offsets
	.addr	_map_02_scr_offsets
	.addr	_map_05_scr_offsets
	.addr	_map_09_scr_offsets
	.addr	_map_06_scr_offsets
	.addr	_map_08_scr_offsets
	.addr	_map_0a_scr_offsets
	.addr	_map_0b_scr_offsets
	.addr	_map_07_scr_offsets
_l_map_size:
	.byte	$14
	.byte	$18
	.byte	$0C
	.byte	$18
	.byte	$18
	.byte	$0C
	.byte	$0A
	.byte	$10
	.byte	$14
	.byte	$14
	.byte	$18
	.byte	$18
_l_map_w:
	.byte	$0A
	.byte	$08
	.byte	$0C
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$0C
	.byte	$04
_l_locks:
	.word	$0000
	.addr	_map_01_locks
	.word	$0000
	.addr	_map_03_locks
	.addr	_map_02_locks
	.word	$0000
	.word	$0000
	.addr	_map_06_locks
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_map_07_locks
_l_enems:
	.addr	_enems_0
	.addr	_enems_1
	.addr	_enems_4
	.addr	_enems_3
	.addr	_enems_2
	.addr	_enems_5
	.addr	_enems_9
	.addr	_enems_6
	.addr	_enems_8
	.addr	_enems_A
	.addr	_enems_B
	.addr	_enems_7
_l_hotspots:
	.addr	_hotspots_0
	.addr	_hotspots_1
	.addr	_hotspots_4
	.addr	_hotspots_3
	.addr	_hotspots_2
	.addr	_hotspots_5
	.addr	_hotspots_9
	.addr	_hotspots_6
	.addr	_hotspots_8
	.addr	_hotspots_A
	.addr	_hotspots_B
	.addr	_hotspots_7
_l_pal_bg:
	.addr	_mypal_game_bg0
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg4
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg2
	.addr	_mypal_game_bg5
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg7
	.addr	_mypal_game_bg8
	.addr	_mypal_game_bg9
	.addr	_mypal_game_bg6
_l_pal_spr:
	.addr	_mypal_game_fg0
	.addr	_mypal_game_fg1
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg0
	.addr	_mypal_game_fg2
	.addr	_mypal_game_fg4
	.addr	_mypal_game_fg1
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg5
_l_bolts_max:
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
_l_tsmap:
	.addr	_tsmap0
	.addr	_tsmap1
	.addr	_tsmap4
	.addr	_tsmap3
	.addr	_tsmap2
	.addr	_tsmap0
	.addr	_tsmap7
	.addr	_tsmap3
	.addr	_tsmap6
	.addr	_tsmap7
	.addr	_tsmap8
	.addr	_tsmap5
_l_enems_ssmap:
	.addr	_enems_ssmap0
	.addr	_enems_ssmap1
	.addr	_enems_ssmap4
	.addr	_enems_ssmap3
	.addr	_enems_ssmap2
	.addr	_enems_ssmap0
	.addr	_enems_ssmap1
	.addr	_enems_ssmap3
	.addr	_enems_ssmap4
	.addr	_enems_ssmap2
	.addr	_enems_ssmap2
	.addr	_enems_ssmap5
_l_alt_bg:
	.byte	$2A
	.byte	$22
	.byte	$22
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$00
	.byte	$2A
	.byte	$22
	.byte	$00
	.byte	$22
	.byte	$00
_l_scr_ini:
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$14
_l_ini_x:
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$0C
	.byte	$02
	.byte	$02
_l_ini_y:
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$09
_l_pfacing:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_l_ppu_mask:
	.byte	$1E
	.byte	$1E
	.byte	$5E
	.byte	$1E
	.byte	$9E
	.byte	$9E
	.byte	$5E
	.byte	$9E
	.byte	$3E
	.byte	$5E
	.byte	$5E
	.byte	$3E
_l_music:
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$02
	.byte	$07
_hud_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$06
	.byte	$0B
	.byte	$01
	.byte	$1D
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$03
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$05
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$1C
	.byte	$09
	.byte	$0B
	.byte	$01
	.byte	$1D
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$01
	.byte	$00
_alm0:
	.byte	$34
	.byte	$30
	.byte	$38
	.byte	$30
	.byte	$3B
	.byte	$30
	.byte	$9E
	.byte	$00
	.byte	$AE
	.byte	$00
	.byte	$FF
_alm1:
	.byte	$57
	.byte	$30
	.byte	$54
	.byte	$30
	.byte	$FF
_level_names:
	.byte	$54,$48,$45,$20,$42,$4F,$53,$51,$55,$45,$00,$54,$48,$45,$20,$44
	.byte	$45,$53,$45,$52,$54,$00,$47,$4F,$4F,$44,$20,$4D,$41,$52,$53,$48
	.byte	$00,$44,$45,$20,$4E,$41,$44,$41,$4C,$20,$31,$00,$43,$55,$45,$56
	.byte	$41,$20,$43,$41,$56,$45,$00,$4E,$4F,$53,$48,$45,$20,$57,$4F,$4F
	.byte	$44,$00,$4C,$41,$56,$41,$20,$50,$49,$54,$21,$21,$00,$44,$45,$20
	.byte	$4E,$41,$44,$41,$4C,$20,$32,$00,$4D,$41,$52,$53,$48,$59,$20,$47
	.byte	$4F,$4F,$00,$48,$45,$4C,$4C,$20,$50,$49,$54,$21,$21,$00,$49,$43
	.byte	$59,$20,$44,$55,$53,$54,$45,$52,$00,$45,$4C,$20,$43,$41,$53,$54
	.byte	$4C,$45,$52,$00,$00
_lava_top:
	.byte	$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9
	.byte	$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9
	.byte	$00
_lava_body:
	.byte	$E4,$E5,$E6,$E7,$AA,$AB,$E5,$AB,$E6,$AA,$AB,$E4,$E5,$E6,$AB,$E5
	.byte	$AA,$AB,$AA,$E6,$E5,$E4,$AB,$E6,$AA,$AB,$E5,$E4,$E6,$AA,$AB,$AA
	.byte	$E5,$E6,$E4,$E5,$AB,$E6,$AA,$E5,$AB,$E4,$E6,$E5,$AB,$AA,$E5,$AB
	.byte	$E4,$E6,$E5,$AA,$AB,$E5,$E4,$E6,$E5,$AA,$AB,$E5,$E4,$E6,$E5,$E4
	.byte	$00
_jitter:
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
_shl5:
	.word	$0000
	.word	$0020
	.word	$0040
	.word	$0060
	.word	$0080
	.word	$00A0
	.word	$00C0
	.word	$00E0
	.word	$0100
	.word	$0120
	.word	$0140
	.word	$0160
	.word	$0180
	.word	$01A0
	.word	$01C0
	.word	$01E0
	.word	$0200
	.word	$0220
	.word	$0240
	.word	$0260
	.word	$0280
	.word	$02A0
	.word	$02C0
	.word	$02E0
	.word	$0300
	.word	$0320
	.word	$0340
	.word	$0360
	.word	$0380
	.word	$03A0
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_hitter_offs:
	.byte	$0C
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$0C
__mx:
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$FC
	.byte	$FC
__my:
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$FC
_player_frames:
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$03
__pgtmx:
	.byte	$F0
	.byte	$10
L0001:
	.byte	$4D,$4F,$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$22,$00,$53,$54,$41
	.byte	$52,$54,$3D,$4E,$4F,$52,$4D,$41,$4C,$25,$53,$45,$4C,$45,$43,$54
	.byte	$3D,$4B,$49,$44,$53,$21,$00,$56,$31,$00,$47,$41,$4D,$45,$20,$4F
	.byte	$56,$45,$52,$21,$00,$53,$54,$41,$52,$54,$3D,$43,$4F,$4E,$54,$49
	.byte	$4E,$55,$45,$00,$20,$20,$53,$4F,$52,$52,$59,$20,$4E,$49,$4E,$4A
	.byte	$41,$4A,$41,$52,$25,$25,$20,$42,$55,$54,$20,$59,$45,$52,$20,$4E
	.byte	$4F,$56,$49,$41,$20,$49,$53,$25,$25,$49,$4E,$20,$41,$4E,$4F,$54
	.byte	$48,$45,$52,$20,$43,$41,$53,$54,$4C,$45,$21,$25,$25,$20,$20,$20
	.byte	$20,$20,$54,$48,$45,$20,$45,$4E,$44,$3F,$00,$20,$20,$53,$4F,$52
	.byte	$52,$59,$20,$4E,$49,$4E,$4A,$41,$4A,$41,$52,$25,$25,$20,$42,$55
	.byte	$54,$20,$59,$45,$52,$20,$4E,$4F,$56,$49,$41,$20,$49,$53,$25,$25
	.byte	$49,$4E,$20,$41,$4E,$4F,$54,$48,$45,$52,$20,$43,$41,$53,$54,$4C
	.byte	$45,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpaux:
	.res	1,$00
_pad:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_half_life:
	.res	1,$00
_game_over:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_level:
	.res	1,$00
_gp_gen:
	.res	2,$00
_gp_map:
	.res	2,$00
_ul:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdct:
	.res	1,$00
_rdi:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rdn:
	.res	1,$00
_rlem:
	.res	1,$00
_rleb:
	.res	1,$00
_rler:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_t1:
	.res	1,$00
_t2:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_touched:
	.res	1,$00
__en_cttouched:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_maxct:
	.res	1,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_status:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_life:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_fr:
	.res	1,$00
_en_sprid:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_touched:
	.res	1,$00
_en_touched:
	.res	3,$00
_en_cttouched:
	.res	3,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	1,$00
_pvy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pkeys:
	.res	1,$00
_pkilled:
	.res	1,$00
_pneedsreset:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_player_ax:
	.res	1,$00
_player_rx:
	.res	1,$00
_player_vx_max:
	.res	1,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_enems_offset:
	.res	1,$00
_c_player_offset:
	.res	1,$00
_ts_offs:
	.res	1,$00
_c_alt_bg:
	.res	1,$00
_c_map:
	.res	2,$00
_c_map_chr_rom_bank:
	.res	1,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_map_w:
	.res	1,$00
_c_tsmap:
	.res	2,$00
_c_enems_ssmap:
	.res	2,$00
__x:
	.res	1,$00
__y:
	.res	1,$00
__t:
	.res	1,$00
__n:
	.res	1,$00
__x1:
	.res	1,$00
__y1:
	.res	1,$00
__x2:
	.res	1,$00
__y2:
	.res	1,$00
__s:
	.res	2,$00
_f_zone_ac:
	.res	1,$00
_fzx1:
	.res	1,$00
_fzx2:
	.res	1,$00
_fzy1:
	.res	1,$00
_fzy2:
	.res	1,$00
_firezoned:
	.res	1,$00
_hitter_on:
	.res	1,$00
_hitter_x:
	.res	1,$00
_hitter_y:
	.res	1,$00
_hitter_frame:
	.res	1,$00
_hitter_hit_x:
	.res	1,$00
_hitter_hit_y:
	.res	1,$00
__coco_x:
	.res	1,$00
__coco_y:
	.res	1,$00
_coco_it:
	.res	1,$00
.segment	"BSS"
_update_index:
	.res	1,$00
_update_list:
	.res	90,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_attr_table:
	.res	64,$00
_kids_mode:
	.res	1,$00
_c_ppu_mask:
	.res	1,$00
_ppu_mask_xor_bits_fiddle:
	.res	1,$00
_brkf:
	.res	4,$00
_brkx:
	.res	4,$00
_brky:
	.res	4,$00
_fade_delay:
	.res	1,$00
_hyx:
	.res	25,$00
_ht:
	.res	25,$00
_hact:
	.res	25,$00
_scrpixoffset:
	.res	2,$00
_lkyx:
	.res	16,$00
_lknp:
	.res	16,$00
_lkact:
	.res	16,$00
_yx:
	.res	1,$00
_win_game:
	.res	1,$00
_flags:
	.res	8,$00
_script_something_done:
	.res	1,$00
_c_baddies_count:
	.res	1,$00
_en_maxct:
	.res	3,$00
_en_cur_d:
	.res	3,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_psafe:
	.res	1,$00
_pscreenissafe:
	.res	1,$00
_c_bolts_max:
	.res	1,$00
_paused:
	.res	1,$00
_coco_slots_i:
	.res	1,$00
_coco_slots:
	.res	3,$00
_coco_x:
	.res	3,$00
_coco_y:
	.res	3,$00
_coco_mx:
	.res	3,$00
_coco_my:
	.res	3,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_phit:
	.res	1,$00
_pslippery:
	.res	1,$00
_pquicksanded:
	.res	1,$00
_opcoins:
	.res	1,$00
_pcoins:
	.res	1,$00
_screen_clear_list:
	.res	24,$00
_ray_tiles:
	.res	1,$00
_face_tiles:
	.res	1,$00
_face_count:
	.res	1,$00
_face_cleared:
	.res	1,$00
_f0:
	.res	1,$00
_f1:
	.res	1,$00
_f2:
	.res	1,$00
_deco_flags:
	.res	1,$00
_lava_delay:
	.res	1,$00
_lava_ticker:
	.res	1,$00
_lava_height:
	.res	1,$00
_lava_cur_height:
	.res	1,$00
_lava_on_screen:
	.res	1,$00
_lava_height_pixels:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (gpit = 4; gpit != 0xff; -- gpit) {
;
	lda     #$04
	sta     _gpit
L0C66:	lda     _gpit
	cmp     #$FF
	beq     L0C67
;
; pal_bright (gpit); delay (fade_delay);
;
	lda     _gpit
	jsr     _pal_bright
	lda     _fade_delay
	jsr     _delay
;
; for (gpit = 4; gpit != 0xff; -- gpit) {
;
	dec     _gpit
	jmp     L0C66
;
; }
;
L0C67:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (gpit = 0; gpit < 5; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L0C73:	lda     _gpit
	cmp     #$05
	bcs     L0C74
;
; pal_bright (gpit); delay (fade_delay);
;
	lda     _gpit
	jsr     _pal_bright
	lda     _fade_delay
	jsr     _delay
;
; for (gpit = 0; gpit < 5; ++ gpit) {
;
	inc     _gpit
	jmp     L0C73
;
; }
;
L0C74:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("and #2");
;
	and     #2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda %v, y", tileset_pals);
;
	lda     _tileset_pals,y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L0C9E
;
; __asm__ ("asl a");
;
L0C9F:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L0C9F
;
; __asm__ ("sta %v", i);   // i = (c_ts_pals [_t] << (rdb << 1));
;
L0C9E:	sta     _i
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", i);
;
	ora     _i
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rdc);
;
	ldx     _rdc
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_tile: near

.segment	"CODE"

;
; _t = (16 + _t) << 2;
;
	lda     __t
	clc
	adc     #$10
	asl     a
	asl     a
	sta     __t
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_gp_addr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_gp_addr: near

.segment	"CODE"

;
; gp_addr = (((_y << 5) | _x) | NAMETABLE_A);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	sta     _gp_addr
	lda     tmp1
	ora     #$20
	sta     _gp_addr+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; do_attr_table ();
;
	jsr     _do_attr_table
;
; calc_tile ();
;
	jsr     _calc_tile
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; vram_adr (gp_addr);
;
	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; VRAM_PUT (_t); ++ _t;
;
	lda     __t
	sta     $2007
	inc     __t
;
; VRAM_PUT (_t); ++ _t;
;
	lda     __t
	sta     $2007
	inc     __t
;
; gp_addr += 32;
;
	lda     #$20
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L0CC5
	inc     _gp_addr+1
;
; vram_adr (gp_addr);
;
L0CC5:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; VRAM_PUT (_t); ++ _t; 
;
	lda     __t
	sta     $2007
	inc     __t
;
; VRAM_PUT (_t); 
;
	lda     __t
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ul_put2c_hrd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_put2c_hrd: near

.segment	"CODE"

;
; __asm__ ("lda %v+1", gp_addr);
;
	lda     _gp_addr+1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #2");
;
	lda     #2
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ul_put_t_inc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_put_t_inc: near

.segment	"CODE"

;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("inc %v", _t);
;
	inc     __t
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L0CE1
	inx
L0CE1:	sta     _ul
	stx     _ul+1
;
; do_attr_table ();
;
	jsr     _do_attr_table
;
; gp_addr = 0x23c0 + rdc; 
;
	ldx     #$00
	lda     _rdc
	clc
	adc     #$C0
	pha
	txa
	adc     #$23
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; __asm__ ("ldy #10");
;
	ldy     #10
;
; __asm__ ("lda %v+1", gp_addr);
;
	lda     _gp_addr+1
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; calc_tile ();
;
	jsr     _calc_tile
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; __asm__ ("ldy #0");  
;
	ldy     #0
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; ul_put_t_inc ();
;
	jsr     _ul_put_t_inc
;
; ul_put_t_inc ();  
;
	jsr     _ul_put_t_inc
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #32");
;
	adc     #32
;
; __asm__ ("sta %v", gp_addr);
;
	sta     _gp_addr
;
; __asm__ ("bcc %g", ult_incsk2);
;
	bcc     L0CF9
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("iny");  
;
L0CF9:	iny
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; ul_put_t_inc ();
;
	jsr     _ul_put_t_inc
;
; ul_put_t_inc (); 
;
	jsr     _ul_put_t_inc
;
; update_index += 13;
;
	ldx     #$00
	lda     #$0D
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L0D05:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L0D05
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L0D10
	inx
L0D10:	sta     _ul
	stx     _ul+1
;
; __asm__ ("ldy #0");  
;
	ldy     #0
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");
;
	adc     #16
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");  
;
	adc     #16
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; update_index += 5;
;
	ldx     #$00
	lda     #$05
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; _t = rdt;
;
	lda     _rdt
	sta     __t
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; rdb = rand8 ();
;
	jsr     _rand8
	sta     _rdb
;
; if (level == 6) {
;
	lda     _level
	cmp     #$06
	bne     L0D2B
;
; rda = rdm & 0xf; if (rda == 0 || rda == 0xf || (rda == 0xd && n_pant && n_pant < 9)) _t = 22;
;
	lda     _rdm
	and     #$0F
	sta     _rda
	lda     _rda
	beq     L0D2C
	lda     _rda
	cmp     #$0F
	beq     L0D2C
	lda     _rda
	cmp     #$0D
	bne     L0D2B
	lda     _n_pant
	beq     L0D2B
	lda     _n_pant
	cmp     #$09
	bcs     L0D2B
L0D2C:	lda     #$16
	sta     __t
;
; if (rdt == 0) {
;
L0D2B:	lda     _rdt
	jne     L0D33
;
; if (rdm > 15) {
;
	lda     _rdm
	cmp     #$10
	bcc     L0D55
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 3 || rda == 17) {
;
	cmp     #$03
	beq     L0D3E
	lda     _rda
	cmp     #$11
	bne     L0D3D
;
; _t = rda;
;
L0D3E:	lda     _rda
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L0D42
;
; } else if (rda == 22 || rda == 23) {
;
L0D3D:	lda     _rda
	cmp     #$16
	beq     L0D45
	lda     _rda
	cmp     #$17
	bne     L0D44
;
; if ((deco_flags & DECO_STALACTITES) && (rdb & 1)) _t = 9;
;
L0D45:	lda     _deco_flags
	and     #$01
	jeq     L0D42
	lda     _rdb
	and     #$01
	jeq     L0D42
	lda     #$09
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L0D42
;
; } else if (rda == 1) {
;
L0D44:	lda     _rda
	cmp     #$01
	bne     L0D50
;
; _t = 2;
;
	lda     #$02
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L0D42
;
; } else if (rda == 2 || rda == 16) {
;
L0D50:	lda     _rda
	cmp     #$02
	beq     L0D56
	lda     _rda
	cmp     #$10
	bne     L0D55
;
; if ((rdb & 7) == 1) _t = 31;
;
L0D56:	lda     _rdb
	and     #$07
	cmp     #$01
	jne     L0D42
	lda     #$1F
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L0D42
;
; if (rdm) {
;
L0D55:	lda     _rdm
	beq     L0D66
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #1");
;
	sbc     #1
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 37 || rda == 38) {
;
	cmp     #$25
	beq     L0D67
	lda     _rda
	cmp     #$26
	bne     L0D66
;
; __asm__ ("inc %v", rda);
;
L0D67:	inc     _rda
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L0D42
;
; if (c_alt_bg && (rdb & 0x1f) <2) {
;
L0D66:	lda     _c_alt_bg
	jeq     L0D42
	lda     _rdb
	and     #$1F
	cmp     #$02
	bcs     L0D42
;
; if (c_alt_bg == 34) { 
;
	lda     _c_alt_bg
	cmp     #$22
	bne     L0D72
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("dec %v", rda);
;
	dec     _rda
;
; __asm__ ("ldx %v", rda);
;
	ldx     _rda
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("cmp (%v), y", c_tsmap);
;
	cmp     (_c_tsmap),y
;
; __asm__ ("bne %g", custom_renderer_done);
;
	bne     L0D42
;
; __asm__ ("lda #33");
;
	lda     #33
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("lda #34");
;
	lda     #34
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; } else _t = c_alt_bg;
;
	jmp     L0D42
L0D72:	lda     _c_alt_bg
	sta     __t
;
; } else if (_t == 22) {
;
	jmp     L0D42
L0D33:	lda     __t
	cmp     #$16
	bne     L0D84
;
; _t += (rdb & 1);
;
	lda     _rdb
	and     #$01
	clc
	adc     __t
	sta     __t
;
; if (rdm > 15) {
;
	lda     _rdm
	cmp     #$10
	bcc     L0D42
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 25) _t = 24;
;
	cmp     #$19
	bne     L0D42
	lda     #$18
	sta     __t
;
; } else if (_t == TILE_RAY) {
;
	jmp     L0D42
L0D84:	lda     __t
	cmp     #$1B
	bne     L0D96
;
; ++ ray_tiles;
;
	inc     _ray_tiles
;
; } else if (_t == TILE_FACE) {
;
	jmp     L0D42
L0D96:	lda     __t
	cmp     #$24
	bne     L0D42
;
; ++ face_tiles;
;
	inc     _face_tiles
;
; map_buff [rdm] = _t;  
;
L0D42:	ldy     _rdm
	lda     __t
	sta     _map_buff,y
;
; map_attr [rdm] = behs [_t];    
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L0DA3
	inx
L0DA3:	sta     ptr1
	stx     ptr1+1
	ldy     __t
	lda     _behs,y
	ldy     #$00
	sta     (ptr1),y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; _x = 0; _y = TOP_ADJUST;
;
	lda     #$00
	sta     __x
	sta     __y
;
; bankswitch (c_map_chr_rom_bank);
;
	lda     _c_map_chr_rom_bank
	jsr     _bankswitch
;
; vram_adr (c_map [n_pant]);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L1BF5
	inx
	clc
L1BF5:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; rdm = 0; while (rdm < 192) {
;
	lda     #$00
	sta     _rdm
L0DB9:	lda     _rdm
	cmp     #$C0
	bcs     L0DBA
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; __asm__ ("sta %v", rdct);    
;
	sta     _rdct
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("sta %v", rdt);
;
	sta     _rdt
;
; while (rdct >= 16) {
;
L0DC4:	lda     _rdct
	cmp     #$10
	bcc     L0DC5
;
; add_tile ();
;
	jsr     _add_tile
;
; rdct -= 16; 
;
	lda     _rdct
	sec
	sbc     #$10
	sta     _rdct
;
; } add_tile ();
;
	jmp     L0DC4
L0DC5:	jsr     _add_tile
;
; }
;
	jmp     L0DB9
;
; bankswitch (DEFAULT_CHR_ROM);
;
L0DBA:	lda     #$00
	jsr     _bankswitch
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("lda %v, x", map_buff);
;
L0DCE:	lda     _map_buff,x
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", rdm);
;
	stx     _rdm
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("beq %g", map_custom_renderer_done);
;
	beq     L0DD7
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("and #31");
;
	and     #31
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("bne %g", map_custom_renderer_loop);
;
	bne     L0DCE
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("jmp %g", map_custom_renderer_loop);
;
	jmp     L0DCE
;
; if (c_bolts_max) {
;
L0DD7:	lda     _c_bolts_max
	beq     L0DE3
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("lda %v, x", lknp);
;
L0DE6:	lda     _lknp,x
;
; __asm__ ("cmp %v", n_pant);
;
	cmp     _n_pant
;
; __asm__ ("bne %g", clear_open_locks_continue);
;
	bne     L0DEA
;
; __asm__ ("lda %v, x", lkact);
;
	lda     _lkact,x
;
; __asm__ ("bne %g", clear_open_locks_continue);
;
	bne     L0DEA
;
; __asm__ ("lda %v, x", lkyx);  
;
	lda     _lkyx,x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #$fe");
;
	and     #$fe
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda %v, x", lkyx);
;
	lda     _lkyx,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", gpit);
;
	stx     _gpit
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("ldy %v, x", lkyx);
;
	ldy     _lkyx,x
;
; __asm__ ("sta %v, y", map_attr);
;
	sta     _map_attr,y
;
; __asm__ ("sta %v, y", map_buff);
;
	sta     _map_buff,y
;
; __asm__ ("inx");
;
L0DEA:	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", clear_open_locks_loop);
;
	bne     L0DE6
;
; do_process_breakable = 0;
;
L0DE3:	lda     #$00
	sta     _do_process_breakable
;
; memfill (brkf, 0, BREAKABLE_MAX);
;
	jsr     decsp3
	lda     #<(_brkf)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_brkf)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$04
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; vram_adr (gp_addr);
;
L1BF8:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; while (gpit = *_s ++) {
;
L0E10:	lda     __s
	ldx     __s+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0E14
	inx
L0E14:	sta     __s
	stx     __s+1
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	beq     L0E11
;
; if (gpit == '%') { gp_addr += 32; vram_adr (gp_addr); }
;
	lda     _gpit
	cmp     #$25
	bne     L0E15
	lda     #$20
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1BF8
	inc     _gp_addr+1
;
; else { 
;
	jmp     L1BF8
;
; __asm__ ("lda %v", gpit);
;
L0E15:	lda     _gpit
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #32");
;
	sbc     #32
;
; __asm__ ("sta $2007");
;
	sta     $2007
;
; }
;
	jmp     L0E10
;
; }
;
L0E11:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ un_rle_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_un_rle_paint: near

.segment	"CODE"

;
; if (rdm == 0) {
;
	lda     _rdm
	bne     L0E22
;
; _t = rleb; draw_tile ();
;
	lda     _rleb
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 31; if (!_x) _y +=2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L0E2B
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; ++ gpit; if (gpit == 240) {
;
L0E2B:	inc     _gpit
	lda     _gpit
	cmp     #$F0
	bne     L0E36
;
; rdm = 1; vram_adr (0x23c0);
;
	lda     #$01
	sta     _rdm
	ldx     #$23
	lda     #$C0
	jmp     _vram_adr
;
; VRAM_PUT (rleb);
;
L0E22:	lda     _rleb
	sta     $2007
;
; }
;
L0E36:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ un_rle_screen2 (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_un_rle_screen2: near

.segment	"CODE"

;
; gp_map = rle;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _gp_map
	stx     _gp_map+1
;
; rlem = *gp_map; ++ gp_map; // Read marker
;
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _rlem
	inc     _gp_map
	bne     L0E3F
	inc     _gp_map+1
;
; rdm = _x = _y = gpit = 0;
;
L0E3F:	tya
	sta     _gpit
	sta     __y
	sta     __x
	sta     _rdm
;
; rda = *gp_map; ++ gp_map;
;
L0E45:	lda     _gp_map
	sta     ptr1
	lda     _gp_map+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _rda
	inc     _gp_map
	bne     L0E4B
	inc     _gp_map+1
;
; if (rda == rlem) {
;
L0E4B:	lda     _rlem
	cmp     _rda
	bne     L0E4C
;
; rler = *gp_map; ++ gp_map;
;
	lda     _gp_map
	sta     ptr1
	lda     _gp_map+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rler
	inc     _gp_map
	bne     L0E51
	inc     _gp_map+1
;
; if (rler == 0) break;
;
L0E51:	lda     _rler
	jeq     incsp2
;
; while (rler --) un_rle_paint ();
;
L0E52:	lda     _rler
	pha
	sec
	sbc     #$01
	sta     _rler
	pla
	tax
	beq     L0E45
	jsr     _un_rle_paint
	jmp     L0E52
;
; rleb = rda; un_rle_paint ();
;
L0E4C:	lda     _rda
	sta     _rleb
	jsr     _un_rle_paint
;
; }
;
	jmp     L0E45

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad;
;
	lda     _pad
	sta     _pad_this_frame
;
; pad = pad_poll (0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; pad_this_frame = (pad_this_frame ^ pad) & pad;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ attr (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_attr: near

.segment	"CODE"

;
; _x = x; _y = y;
;
	ldy     #$01
	lda     (sp),y
	sta     __x
	dey
	lda     (sp),y
	sta     __y
;
; if (_x > 15 || _y > 11) return 0;
;
	lda     __x
	cmp     #$10
	bcs     L0E6B
	lda     __y
	cmp     #$0C
	bcc     L0E6A
L0E6B:	ldx     #$00
	txa
	jmp     incsp2
;
; return map_attr [COORDS(_x,_y)];
;
L0E6A:	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ qtile (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_qtile: near

.segment	"CODE"

;
; return map_buff [COORDS(x,y)];
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	bpl     L0E79
	dex
L0E79:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp,x)
	bpl     L0E7C
	dex
L0E7C:	jsr     aslax4
	ora     ptr1
	sta     ptr1
	txa
	ora     ptr1+1
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; rdd = COORDS(_x,_y);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _rdd
;
; map_buff [rdd] = _t;
;
	ldy     _rdd
	lda     __t
	sta     _map_buff,y
;
; map_attr [rdd] = behs [_t];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdd
	bcc     L0E8A
	inx
L0E8A:	sta     ptr1
	stx     ptr1+1
	ldy     __t
	lda     _behs,y
	ldy     #$00
	sta     (ptr1),y
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	sta     __y
;
; update_list_tile ();
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x1);
;
	lda     __x1
;
; __asm__ ("cmp %v", _x2);
;
	cmp     __x2
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L0E98
;
; __asm__ ("lda %v", _x2);
;
	lda     __x2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("cmp %v", _x1);
;
	cmp     __x1
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L0E98
;
; __asm__ ("lda %v", _y1);
;
	lda     __y1
;
; __asm__ ("cmp %v", _y2);
;
	cmp     __y2
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L0E98
;
; __asm__ ("lda %v", _y2);
;
	lda     __y2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("cmp %v", _y1);
;
	cmp     __y1
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L0E98
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; return 0;
;
L0E98:	ldx     #$00
	txa
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x1);
;
	lda     __x1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _x2);
;
	cmp     __x2
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L0EAF
;
; __asm__ ("lda %v", _x2);
;
	lda     __x2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _x1);
;
	cmp     __x1
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L0EAF
;
; __asm__ ("lda %v", _y1);
;
	lda     __y1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _y2);
;
	cmp     __y2
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L0EAF
;
; __asm__ ("lda %v", _y2);
;
	lda     __y2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _y1);
;
	cmp     __y1
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L0EAF
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; return 0; 
;
L0EAF:	ldx     #$00
	txa
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ add_sign (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$01
	lda     (sp),y
	bne     L0EC4
	tax
	jmp     incsp2
L0EC4:	lda     (sp),y
	asl     a
	bcc     L0EC9
	ldx     #$00
	lda     (sp,x)
	bpl     L0ECB
	dex
L0ECB:	jsr     negax
L0ECF:	ldx     #$00
	cmp     #$80
	jcc     incsp2
	jmp     L1BFA
L0EC9:	dey
	lda     (sp),y
	cmp     #$80
	bcc     L0ECF
L1BFA:	ldx     #$FF
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) cy2 = 0; 
;
	lda     _cy1
	cmp     #$0D
	bcs     L0ED3
	lda     _cy2
	cmp     #$0D
	bcc     L0ED2
L0ED3:	lda     #$00
	sta     _cy2
;
; else if (cy1 > 11 || cy2 > 11) { at1 = at2 = 0; return; }
;
	jmp     L0ED8
L0ED2:	lda     _cy1
	cmp     #$0C
	bcs     L0ED9
	lda     _cy2
	cmp     #$0C
	bcc     L0ED8
L0ED9:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; __asm__ ("lda %v", cy1);
;
L0ED8:	lda     _cy1
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("ora %v", cx1);
;
	ora     _cx1
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", t1);
;
	sta     _t1
;
; __asm__ ("lda %v, x", map_attr);
;
	lda     _map_attr,x
;
; __asm__ ("sta %v", at1);
;
	sta     _at1
;
; __asm__ ("lda %v", cy2);
;
	lda     _cy2
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("ora %v", cx2);
;
	ora     _cx2
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", t2);
;
	sta     _t2
;
; __asm__ ("lda %v, x", map_attr);
;
	lda     _map_attr,x
;
; __asm__ ("sta %v", at2);  
;
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ close_update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_close_update_cycle: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda #$ff");
;
	lda     #$ff
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; ppu_waitnmi ();
;
	jmp     _ppu_waitnmi

.endproc

; ---------------------------------------------------------------
; void __near__ attr_list_mod (__near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_attr_list_mod: near

.segment	"CODE"

;
; gp_map = l;
;
	ldy     #$01
	lda     (sp),y
	sta     _gp_map+1
	dey
	lda     (sp),y
	sta     _gp_map
;
; __asm__ ("lda (%v), y", gp_map);
;
L0EFD:	lda     (_gp_map),y
;
; __asm__ ("cmp #$ff");
;
	cmp     #$ff
;
; __asm__ ("beq %g", attr_list_mod_done);
;
	jeq     incsp2
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_map);
;
	lda     (_gp_map),y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("jmp %g", attr_list_mod_loop);
;
	jmp     L0EFD

.endproc

; ---------------------------------------------------------------
; void __near__ clear_tile_rdn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_tile_rdn: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
L0F0D:	lda     _map_buff,x
;
; __asm__ ("cmp %v", rdn);
;
	cmp     _rdn
;
; __asm__ ("bne %g", substitute_10_continue);
;
	bne     L0F11
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", rdy);
;
	lda     _rdy
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", rdm);
;
	stx     _rdm
;
; map_set ();
;
	jsr     _map_set
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("inc %v", rdx);
;
L0F11:	inc     _rdx
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("cmp #16");
;
	cmp     #16
;
; __asm__ ("bne %g", substitute_10_noincy);
;
	bne     L0F20
;
; __asm__ ("inc %v", rdy);
;
	inc     _rdy
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("inx");
;
L0F20:	inx
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("bne %g", substitute_10_loop);
;
	bne     L0F0D
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_launch (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_launch: near

.segment	"CODE"

;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; f1 = 1;
;
	lda     #$01
	sta     _f1
;
; pal_bg (mypal_game_bg8);
;
	lda     #<(_mypal_game_bg8)
	ldx     #>(_mypal_game_bg8)
	jsr     _pal_bg
;
; lava_ticker = lava_delay;
;
	lda     _lava_delay
	sta     _lava_ticker
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_draw_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_draw_off: near

.segment	"CODE"

;
; rdy = lava_cur_height + TOP_ADJUST;
;
	lda     _lava_cur_height
	sta     _rdy
;
; vram_write ((unsigned char *) lava_top, NAMETABLE_A + shl5 [rdy], 32);
;
	jsr     decsp4
	lda     #<(_lava_top)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_lava_top)
	sta     (sp),y
	ldx     #$00
	lda     _rdy
	asl     a
	bcc     L1BFD
	inx
	clc
L1BFD:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	txa
	clc
	adc     #$20
	tax
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _vram_write
;
; for (gpit = lava_cur_height + 1; gpit < 24; gpit ++)
;
	lda     _lava_cur_height
L1C01:	clc
	adc     #$01
	sta     _gpit
	cmp     #$18
	bcs     L0F3A
;
; vram_write ((unsigned char *) lava_body + (rand8 () & 0x1f), NAMETABLE_A + shl5 [gpit + TOP_ADJUST], 32);
;
	jsr     decsp4
	jsr     _rand8
	and     #$1F
	clc
	adc     #<(_lava_body)
	tay
	lda     #$00
	adc     #>(_lava_body)
	tax
	tya
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1BFE
	inx
	clc
L1BFE:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	txa
	clc
	adc     #$20
	tax
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _vram_write
;
; for (gpit = lava_cur_height + 1; gpit < 24; gpit ++)
;
	lda     _gpit
	jmp     L1C01
;
; __asm__ ("lda %v", rdy);
;
L0F3A:	lda     _rdy
;
; __asm__ ("and #$fc");
;
	and     #$fc
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; memfill (attr_table + rdy, 0xaa, 64-rdy); 
;
	jsr     decsp3
	lda     _rdy
	clc
	adc     #<(_attr_table)
	tay
	lda     #$00
	adc     #>(_attr_table)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$AA
	ldy     #$00
	sta     (sp),y
	lda     #$40
	sec
	sbc     _rdy
	ldx     #$00
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ lava_draw_buff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_draw_buff: near

.segment	"CODE"

;
; if (lava_cur_height == 23) return;
;
	lda     _lava_cur_height
	cmp     #$17
	bne     L1C06
;
; }
;
	rts
;
; rdy = lava_cur_height + TOP_ADJUST;
;
L1C06:	lda     _lava_cur_height
	sta     _rdy
;
; gp_addr = NAMETABLE_A + shl5 [rdy];
;
	ldx     #$00
	lda     _rdy
	asl     a
	bcc     L1C04
	inx
	clc
L1C04:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L0F5B
	inx
L0F5B:	sta     _ul
	stx     _ul+1
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #64");
;
	lda     #64
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; memcpy (ul + 3, lava_top, 32);
;
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$03
	bcc     L0F69
	inx
L0F69:	jsr     pushax
	lda     #<(_lava_top)
	ldx     #>(_lava_top)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
;
; memcpy (ul + 35, lava_body + (rand8 () & 0x1f), 32);
;
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$23
	bcc     L0F6E
	inx
L0F6E:	jsr     pushax
	jsr     _rand8
	and     #$1F
	clc
	adc     #<(_lava_body)
	tay
	lda     #$00
	adc     #>(_lava_body)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
;
; update_index += (3 + 64);
;
	lda     #$43
	clc
	adc     _update_index
	sta     _update_index
;
; gp_addr = NAMETABLE_A + 0x3c0 + ((rdy & 0xfc) << 1);
;
	lda     _rdy
	ldx     #$00
	and     #$FC
	asl     a
	bcc     L1C05
	inx
	clc
L1C05:	adc     #$C0
	sta     _gp_addr
	txa
	adc     #$23
	sta     _gp_addr+1
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L0F7C
	inx
L0F7C:	sta     _ul
	stx     _ul+1
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #8");
;
	lda     #8
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; memfill (ul + 3, 0xAA, 8);
;
	jsr     decsp3
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$03
	bcc     L0F8A
	inx
L0F8A:	dey
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$AA
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$08
	jsr     _memfill
;
; update_index += (3 + 8);
;
	lda     #$0B
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_calc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_calc: near

.segment	"CODE"

;
; rdb = (level == 9 ? (n_pant >> 1) : n_pant);
;
	lda     _level
	cmp     #$09
	bne     L0F94
	ldx     #$00
	lda     _n_pant
	jsr     asrax1
	jmp     L0F97
L0F94:	lda     _n_pant
L0F97:	sta     _rdb
;
; __asm__ ("lda %v", lava_height);
;
	lda     _lava_height
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("ror");
;
	ror     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("ror");
;
	ror     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("cmp %v", rdb);
;
	cmp     _rdb
;
; __asm__ ("bne %g", lava_off_screen);
;
	bne     L0FA8
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", rda); // rda = v*8
;
	sta     _rda
;
; __asm__ ("asl a");   // A = v*16
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("sta %v", rda); // rda = v*8+v*16 = v*24
;
	sta     _rda
;
; __asm__ ("lda %v", lava_height);
;
	lda     _lava_height
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", rda);
;
	sbc     _rda
;
; __asm__ ("sta %v", lava_cur_height);
;
	sta     _lava_cur_height
;
; lava_height_pixels = lava_height << 3;
;
	ldx     #$00
	lda     _lava_height
	jsr     aslax3
	sta     _lava_height_pixels
	stx     _lava_height_pixels+1
;
; lava_on_screen = 1;
;
	lda     #$01
;
; return;
;
	jmp     L1C07
;
; lava_on_screen = 0;
;
L0FA8:	lda     #$00
L1C07:	sta     _lava_on_screen
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_game: near

.segment	"CODE"

;
; pcoins = 0; 
;
	lda     #$00
	sta     _pcoins
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_level: near

.segment	"CODE"

;
; vram_adr (MAP_CLEAR_LIST_ADDRESS);
;
	ldx     #$2C
	lda     #$00
	jsr     _vram_adr
;
; vram_fill (0, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; memfill (screen_clear_list, 0, 24); 
;
	jsr     decsp3
	lda     #<(_screen_clear_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$18
	jsr     _memfill
;
; (c_tsmap == tsmap2 || c_tsmap == tsmap8) ? 
;
	lda     #<(_tsmap2)
	ldx     #>(_tsmap2)
	cpx     _c_tsmap+1
	bne     L1C0A
	cmp     _c_tsmap
	beq     L0FD2
L1C0A:	lda     #<(_tsmap8)
	ldx     #>(_tsmap8)
	cpx     _c_tsmap+1
	bne     L0FD4
	cmp     _c_tsmap
	bne     L0FD4
;
; DECO_STALACTITES : 
;
L0FD2:	lda     #$01
;
; 0;
;
	jmp     L0FD6
L0FD4:	lda     #$00
L0FD6:	sta     _deco_flags
;
; opcoins = 0xff;
;
	lda     #$FF
	sta     _opcoins
;
; f1 = 0;
;
	lda     #$00
	sta     _f1
;
; lava_height = (level == 6 ? 240 : 255);
;
	lda     _level
	cmp     #$06
	bne     L0FDF
	lda     #$F0
	jmp     L0FE1
L0FDF:	lda     #$FF
L0FE1:	sta     _lava_height
;
; lava_height_pixels = 240 << 3;
;
	ldx     #$07
	lda     #$80
	sta     _lava_height_pixels
	stx     _lava_height_pixels+1
;
; lava_delay = (level == 6 ? 30 : 40);
;
	lda     _level
	cmp     #$06
	bne     L0FE8
	lda     #$1E
	jmp     L0FEA
L0FE8:	lda     #$28
L0FEA:	sta     _lava_delay
;
; if (level == 9) lava_launch ();
;
	lda     _level
	cmp     #$09
	jeq     _lava_launch
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flick_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flick_screen: near

.segment	"CODE"

;
; rdb = (level == 9) ? (n_pant >> 1) : n_pant;
;
	lda     _level
	cmp     #$09
	bne     L0FF3
	ldx     #$00
	lda     _n_pant
	jsr     asrax1
	jmp     L0FF6
L0FF3:	lda     _n_pant
L0FF6:	sta     _rdb
;
; scrpixoffset = (rdb << 7) + (rdb << 6);
;
	ldx     #$00
	lda     _rdb
	jsr     aslax4
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdb
	jsr     aslax4
	jsr     aslax2
	clc
	adc     ptr1
	sta     _scrpixoffset
	txa
	adc     ptr1+1
	sta     _scrpixoffset+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ exiting_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exiting_screen: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L0FFD
;
; rda = on_pant << 3;
;
	lda     _on_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_write (screen_clear_list, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_screen_clear_list)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L1C0D
	inx
L1C0D:	pha
	txa
	clc
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L1C0C
	inx
L1C0C:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_write
;
; ray_tiles = face_tiles = face_count = 0;
;
L0FFD:	lda     #$00
	sta     _face_count
	sta     _face_tiles
	sta     _ray_tiles
;
; rda = 0;
;
	sta     _rda
;
; if (level == 3 || level == 7) {
;
	lda     _level
	cmp     #$03
	beq     L100D
	lda     _level
	cmp     #$07
	jne     L100C
;
; if (level == 3) {
;
L100D:	lda     _level
	cmp     #$03
	bne     L100F
;
; if (n_pant == 7) {
;
	lda     _n_pant
	cmp     #$07
	bne     L1011
;
; rdi = 1;
;
	lda     #$01
	sta     _rdi
;
; if (on_pant == 15) { rda = 1; pvy = -64;} 
;
	lda     _on_pant
	cmp     #$0F
	bne     L1035
	lda     #$01
	sta     _rda
	lda     #$C0
;
; } else {
;
	jmp     L1C0F
;
; rdi = 0;
;
L1011:	lda     #$00
	sta     _rdi
;
; if (n_pant == 15 && on_pant == 7) { rda = 1; pvy = 48; }
;
	lda     _n_pant
	cmp     #$0F
	bne     L1035
	lda     _on_pant
	cmp     #$07
	bne     L1035
;
; } else  {
;
	jmp     L1C12
;
; if (n_pant < 2) {
;
L100F:	lda     _n_pant
	cmp     #$02
	bcs     L1027
;
; rdi = 1;
;
	lda     #$01
	sta     _rdi
;
; if (on_pant == n_pant + 4) { rda = 1; pvy = -64; }
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     #$04
	bcc     L102D
	inx
L102D:	cpx     #$00
	bne     L1035
	cmp     _on_pant
	bne     L1035
	lda     #$01
	sta     _rda
	lda     #$C0
;
; } else {
;
	jmp     L1C0F
;
; rdi = 0;
;
L1027:	lda     #$00
	sta     _rdi
;
; if (on_pant < 2) { rda = 1; pvy = 48; }
;
	lda     _on_pant
	cmp     #$02
	bcs     L1035
L1C12:	lda     #$01
	sta     _rda
	lda     #$30
L1C0F:	sta     _pvy
;
; if (rda) sfx_play (SFX_FLOAT, 0);
;
L1035:	lda     _rda
	beq     L103B
	lda     #$10
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (rdi) {
;
L103B:	lda     _rdi
	beq     L1040
;
; c_ppu_mask = 0x1e;
;
	lda     #$1E
	sta     _c_ppu_mask
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$01
	sta     _vertical_engine_type
;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; c_alt_bg = 34;
;
	lda     #$22
	sta     _c_alt_bg
;
; } else {
;
	rts
;
; c_ppu_mask = 0x9e;
;
L1040:	lda     #$9E
	sta     _c_ppu_mask
;
; vertical_engine_type = ENGINE_TYPE_SWIM;
;
	lda     #$03
	sta     _vertical_engine_type
;
; pal_bg (mypal_game_bg3);
;
	lda     #<(_mypal_game_bg3)
	ldx     #>(_mypal_game_bg3)
	jsr     _pal_bg
;
; c_alt_bg = 42;
;
	lda     #$2A
	sta     _c_alt_bg
;
; } else if (level == 11) {
;
	rts
L100C:	lda     _level
	cmp     #$0B
	bne     L1054
;
; c_alt_bg = ((n_pant & 1) == 0 && n_pant < 16) ? 34 : 0;
;
	lda     _n_pant
	and     #$01
	bne     L105D
	lda     _n_pant
	cmp     #$10
	bcs     L105D
	lda     #$22
	jmp     L105F
L105D:	lda     #$00
L105F:	sta     _c_alt_bg
;
; } else if (level == 8) {
;
	rts
L1054:	lda     _level
	cmp     #$08
	bne     L1062
;
; deco_flags = n_pant < 10 ? 0 : DECO_STALACTITES;
;
	lda     _n_pant
	cmp     #$0A
	bcs     L1066
	lda     #$00
	jmp     L1068
L1066:	lda     #$01
L1068:	sta     _deco_flags
;
; }
;
L1062:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_screen: near

.segment	"CODE"

;
; rda = n_pant << 3;
;
	lda     _n_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_read (screen_clear_list, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_screen_clear_list)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L1C14
	inx
L1C14:	pha
	txa
	clc
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L1C13
	inx
L1C13:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_read
;
; rdd = _x = 0; _y = TOP_ADJUST;
;
	lda     #$00
	sta     __x
	sta     _rdd
	sta     __y
;
; __asm__ ("ldx #0");
;
	tax
;
; __asm__ ("stx %v", rdm);
;
	sta     _rdm
;
; __asm__ ("txa");
;
L1079:	txa
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("ldx %v", rdd);
;
	ldx     _rdd
;
; __asm__ ("lda %v, x", screen_clear_list);
;
	lda     _screen_clear_list,x
;
; __asm__ ("and %v, y", bits);
;
	and     _bits,y
;
; __asm__ ("beq %g", es_modify_screen_skip);
;
	beq     L1081
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", behs);
;
	lda     _behs,y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("lda %v", rdm);
;
L1081:	lda     _rdm
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("cmp #7");
;
	cmp     #7
;
; __asm__ ("bne %g", es_inc_index_skip);
;
	bne     L108F
;
; __asm__ ("inc %v", rdd);
;
	inc     _rdd
;
; __asm__ ("lda %v", _x);
;
L108F:	lda     __x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("and #31");
;
	and     #31
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("bne %g", es_inc_y_skip);
;
	bne     L1097
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("inc %v", rdm);
;
L1097:	inc     _rdm
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("bne %g", es_modify_screen_loop);
;
	bne     L1079
;
; switch (level) {
;
	lda     _level
;
; }
;
	cmp     #$06
	jeq     L10D2
	cmp     #$09
	jeq     L10D3
	cmp     #$0B
	jne     L10A2
;
; switch (n_pant) {
;
	lda     _n_pant
;
; }
;
	cmp     #$01
	beq     L10A9
	cmp     #$03
	beq     L10A9
	cmp     #$05
	beq     L10AF
	cmp     #$07
	beq     L10AF
	cmp     #$0D
	beq     L10B5
	cmp     #$0F
	beq     L10BA
	cmp     #$11
	beq     L10C3
	cmp     #$17
	beq     L10CE
	jmp     L10A2
;
; pscreenissafe = 0;
;
L10A9:	lda     #$00
	sta     _pscreenissafe
;
; break;
;
	jmp     L10A2
;
; attr_list_mod (alm0);
;
L10AF:	lda     #<(_alm0)
	ldx     #>(_alm0)
	jsr     pushax
	jsr     _attr_list_mod
;
; break;
;
	jmp     L10A2
;
; en_t [0] = 0;
;
L10B5:	lda     #$00
	sta     _en_t
;
; break;
;
	jmp     L10A2
;
; map_attr [COORDS (2,3)] = 48;   // Set spring trap!
;
L10BA:	lda     #$30
	sta     _map_attr+50
;
; break;
;
	jmp     L10A2
;
; fzx1 = 80; fzx2 = fzy2 = 95; fzy1 = 16; f_zone_ac = 1;
;
L10C3:	lda     #$50
	sta     _fzx1
	lda     #$5F
	sta     _fzy2
	sta     _fzx2
	lda     #$10
	sta     _fzy1
	lda     #$01
	sta     _f_zone_ac
;
; break;
;
	jmp     L10A2
;
; attr_list_mod (alm1);
;
L10CE:	lda     #<(_alm1)
	ldx     #>(_alm1)
	jsr     pushax
	jsr     _attr_list_mod
;
; break;
;
	jmp     L10A2
;
; if (n_pant == 0 && f1) {
;
L10D2:	lda     _n_pant
	bne     L10D3
	lda     _f1
	beq     L10D3
;
; _x = 14; _y = 10 + TOP_ADJUST; _t = 0; draw_tile ();
;
	lda     #$0E
	sta     __x
	lda     #$0A
	sta     __y
	lda     #$00
	sta     __t
	jsr     _draw_tile
;
; _x = 16; _y = 10 + TOP_ADJUST; _t = 0; draw_tile ();
;
	lda     #$10
	sta     __x
	lda     #$0A
	sta     __y
	lda     #$00
	sta     __t
	jsr     _draw_tile
;
; map_attr [COORDS (7, 5)] = 0;
;
	lda     #$00
	sta     _map_attr+87
;
; map_attr [COORDS (8, 5)] = 0;
;
	sta     _map_attr+88
;
; lava_calc ();
;
L10D3:	jsr     _lava_calc
;
; if (lava_on_screen) lava_draw_off ();
;
	lda     _lava_on_screen
	beq     L10A2
	jsr     _lava_draw_off
;
; f0 = 0;
;
L10A2:	lda     #$00
	sta     _f0
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ press_fire_at_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_press_fire_at_screen: near

.segment	"CODE"

;
; rdx = (prx + 8) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L10FF
	inx
L10FF:	jsr     shrax4
	sta     _rdx
;
; rdy = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L1103
	inx
L1103:	jsr     shrax4
	sta     _rdy
;
; if (firezoned) {
;
	lda     _firezoned
	beq     L1104
;
; if (level == 11) {
;
	lda     _level
	cmp     #$0B
	jne     L1127
;
; switch (n_pant) {
;
	lda     _n_pant
;
; }
;
	cmp     #$11
	jne     L1127
;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; close_update_cycle (); update_index = 0; 
;
	jsr     _close_update_cycle
	lda     #$00
	sta     _update_index
;
; for (gpit = 6; gpit < 11; ++ gpit) {      
;
	lda     #$06
	sta     _gpit
L1113:	lda     _gpit
	cmp     #$0B
	bcs     L1114
;
; _y = 6; _x = gpit; _t = 0; map_set ();
;
	lda     #$06
	sta     __y
	lda     _gpit
	sta     __x
	lda     #$00
	sta     __t
	jsr     _map_set
;
; for (gpit = 6; gpit < 11; ++ gpit) {      
;
	inc     _gpit
	jmp     L1113
;
; f_zone_ac = 0;
;
L1114:	lda     #$00
	sta     _f_zone_ac
;
; return;
;
	rts
;
; switch (level) {
;
L1104:	lda     _level
;
; }
;
	cmp     #$06
	jeq     L1163
	cmp     #$0B
	jne     L1127
;
; switch (n_pant) {
;
	lda     _n_pant
;
; }
;
	cmp     #$0D
	beq     L112F
	cmp     #$12
	jne     L1127
;
; if (PLAYER_TOUCHES (8, 2) && f0 == 0) {
;
	lda     _rdx
	cmp     #$08
	bne     L112F
	lda     _rdy
	cmp     #$02
	bne     L112F
	lda     _f0
	bne     L112F
;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; close_update_cycle (); update_index = 0;
;
	jsr     _close_update_cycle
	lda     #$00
	sta     _update_index
;
; for (gpit = 4; gpit < 7; ++ gpit) {
;
	lda     #$04
	sta     _gpit
L113E:	lda     _gpit
	cmp     #$07
	bcs     L113F
;
; _y = gpit; _x = 9; _t = 29; map_set ();
;
	lda     _gpit
	sta     __y
	lda     #$09
	sta     __x
	lda     #$1D
	sta     __t
	jsr     _map_set
;
; for (gpit = 4; gpit < 7; ++ gpit) {
;
	inc     _gpit
	jmp     L113E
;
; f0 = 1;
;
L113F:	lda     #$01
	sta     _f0
;
; return;
;
	rts
;
; if (PLAYER_TOUCHES (3, 10) && f0 == 0) {
;
L112F:	lda     _rdx
	cmp     #$03
	bne     L1127
	lda     _rdy
	cmp     #$0A
	bne     L1127
	lda     _f0
	bne     L1127
;
; sfx_play (SFX_START, 0);
;
	jsr     pusha
	jsr     _sfx_play
;
; en_t [0] = 4;
;
	lda     #$04
	sta     _en_t
;
; f0 = 1;
;
	lda     #$01
	sta     _f0
;
; break;
;
	jmp     L1127
;
; if (n_pant == 9) {
;
L1163:	lda     _n_pant
	cmp     #$09
	bne     L1127
;
; if (PLAYER_TOUCHES (3, 9) && f1 == 0) {
;
	lda     _rdx
	cmp     #$03
	bne     L1127
	lda     _rdy
	cmp     #$09
	bne     L1127
	lda     _f1
	bne     L1127
;
; lava_launch ();
;
	jsr     _lava_launch
;
; __asm__ ("lda %v", prx);
;
L1127:	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #8");
;
	adc     #8
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");
;
	adc     #16
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ora %v", _x);
;
	ora     __x
;
; __asm__ ("sta %v", rdi);
;
	sta     _rdi
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", rdt);
;
	sta     _rdt
;
; __asm__ ("lda %v", cy1);
;
	lda     _cy1
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; if (rdt == TILE_RAY) {
;
	lda     _rdt
	cmp     #$1B
	bne     L11AA
;
; pad_this_frame = 0;  // so Ninjajar doesn't punch!
;
	lda     #$00
	sta     _pad_this_frame
;
; _t = 46; map_set ();
;
	lda     #$2E
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_OBJECT, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; -- ray_tiles;
;
	dec     _ray_tiles
;
; if (ray_tiles == 0) {
;
	lda     _ray_tiles
	bne     L11AA
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (level == 11 && n_pant == 20) {
;
	lda     _level
	cmp     #$0B
	bne     L1198
	lda     _n_pant
	cmp     #$14
	bne     L1198
;
; _t = 16; _y = 5; _x = 9; map_set ();
;
	lda     #$10
	sta     __t
	lda     #$05
	sta     __y
	lda     #$09
	sta     __x
	jsr     _map_set
;
; _t = 16; _y = 2; _x = 6; map_set ();
;
	lda     #$10
	sta     __t
	lda     #$02
	sta     __y
	lda     #$06
	sta     __x
	jsr     _map_set
;
; } else {
;
	jmp     L11AA
;
; rdn = TILE_FENCE; clear_tile_rdn ();
;
L1198:	lda     #$0A
	sta     _rdn
	jsr     _clear_tile_rdn
;
; if (rdt == TILE_FACE) {
;
L11AA:	lda     _rdt
	cmp     #$24
	beq     L1C18
;
; }
;
	rts
;
; pad_this_frame = 0;  // so Ninjajar doesn't punch!
;
L1C18:	lda     #$00
	sta     _pad_this_frame
;
; rda = 0;
;
	sta     _rda
;
; __asm__ ("ldx %v", rdi);
;
	ldx     _rdi
;
; __asm__ ("txa");
;
L11B5:	txa
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("cmp #%b", TILE_CHAIN);
;
	cmp     #$11
;
; __asm__ ("bne %g", count_tiles_done);
;
	bne     L11BE
;
; __asm__ ("inc %v", rda);
;
	inc     _rda
;
; __asm__ ("jmp %g", count_tiles_loop);
;
	jmp     L11B5
;
; if (rda == 0) {
;
L11BE:	lda     _rda
	bne     L11C1
;
; face_count = 0;
;
	sta     _face_count
;
; face_cleared = 1;
;
	lda     #$01
	sta     _face_cleared
;
; rdi = SFX_OBJECT;
;
	lda     #$02
;
; } else if (rda == face_count + 1) {
;
	jmp     L1C17
L11C1:	ldx     #$00
	lda     _face_count
	clc
	adc     #$01
	bcc     L11CC
	inx
L11CC:	cpx     #$00
	bne     L11CA
	cmp     _rda
	bne     L11CA
;
; face_count = rda;
;
	lda     _rda
	sta     _face_count
;
; face_cleared ++;
;
	lda     _face_cleared
	clc
	adc     #$01
	sta     _face_cleared
;
; if (face_cleared == face_tiles) {
;
	lda     _face_tiles
	cmp     _face_cleared
	bne     L11D0
;
; rdi = SFX_FANFARE;
;
	lda     #$13
	sta     _rdi
;
; rdn = TILE_SPIKES; clear_tile_rdn ();
;
	lda     #$0C
	sta     _rdn
	jsr     _clear_tile_rdn
;
; } else rdi = SFX_OBJECT;
;
	jmp     L11DA
L11D0:	lda     #$02
;
; } else {
;
	jmp     L1C17
;
; face_count = face_cleared = 0;
;
L11CA:	lda     #$00
	sta     _face_cleared
	sta     _face_count
;
; rdi = SFX_ENHIT;   
;
	lda     #$06
L1C17:	sta     _rdi
;
; sfx_play (rdi, 0);
;
L11DA:	lda     _rdi
	jsr     pusha
	lda     #$00
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ custom_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_custom_hud: near

.segment	"CODE"

;
; if (pcoins != opcoins) {
;
	lda     _opcoins
	cmp     _pcoins
	beq     L11E4
;
; P_T (16, 26, pcoins);
;
	lda     #$10
	sta     __x
	lda     #$1A
	sta     __y
	lda     _pcoins
	sta     __t
	jsr     _p_t
;
; opcoins = pcoins;
;
	lda     _pcoins
	sta     _opcoins
;
; }
;
L11E4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_tile_break (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_tile_break: near

.segment	"CODE"

;
; rdt = map_buff [COORDS(_x,_y)];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rdt
;
; if (rdt == 14 && (rand8 () & 7) < 6) _t = 47;
;
	cmp     #$0E
	bne     L11FA
	jsr     _rand8
	and     #$07
	cmp     #$06
	bcs     L11FA
	lda     #$2F
	sta     __t
;
; screen_clear_list [(_y << 1) | (_x > 7)] |= bits [_x & 7];
;
L11FA:	ldx     #$00
	lda     __y
	asl     a
	bcc     L1C1A
	inx
L1C1A:	sta     ptr1
	stx     ptr1+1
	lda     __x
	cmp     #$08
	lda     #$00
	rol     a
	ora     ptr1
	clc
	adc     #<(_screen_clear_list)
	tay
	lda     ptr1+1
	adc     #>(_screen_clear_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     __x
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ on_tile_get (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_tile_get: near

.segment	"CODE"

;
; ++ pcoins;
;
	inc     _pcoins
;
; if (pcoins == (kids_mode ? 25 : 50)) {
;
	lda     _kids_mode
	beq     L120D
	lda     #$19
	jmp     L120F
L120D:	lda     #$32
L120F:	cmp     _pcoins
	bne     L120A
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pcoins = 0;
;
	lda     #$00
	sta     _pcoins
;
; ++ plife;
;
	inc     _plife
;
; }
;
L120A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_obj_got (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_obj_got: near

.segment	"CODE"

;
; win_game = (pobjs == 1);
;
	lda     _pobjs
	cmp     #$01
	jsr     booleq
	sta     _win_game
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_enem_killed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_enem_killed: near

.segment	"CODE"

;
; if (level == 11 && n_pant < 4) {
;
	lda     _level
	cmp     #$0B
	bne     L121E
	lda     _n_pant
	cmp     #$04
	bcc     L121D
L121E:	rts
;
; ++ f0; 
;
L121D:	inc     _f0
;
; if (f0 == 3) {
;
	lda     _f0
	cmp     #$03
	bne     L1221
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; _x = 7; _y = 11; _t = 0; map_set ();
;
	lda     #$07
	sta     __x
	lda     #$0B
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; _x = 8; _y = 11; _t = 0; map_set ();
;
	lda     #$08
	sta     __x
	lda     #$0B
	sta     __y
	lda     #$00
	sta     __t
	jmp     _map_set
;
; }
;
L1221:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_load: near

.segment	"CODE"

;
; if (c_locks == 0) { c_bolts_max = 0;  return; }
;
	lda     _c_locks
	ora     _c_locks+1
	bne     L1235
	sta     _c_bolts_max
	rts
;
; __asm__ ("ldx #0");
;
L1235:	ldx     #0
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_locks);
;
L123C:	lda     (_c_locks),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", lknp);
;
	sta     _lknp,x
;
; __asm__ ("lda (%v), y", c_locks);
;
	lda     (_c_locks),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", lkyx);
;
	sta     _lkyx,x
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, x", lkact);
;
	sta     _lkact,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", bolts_load_loop);
;
	bne     L123C
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolt_clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolt_clear: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("lda %v, x", lknp);
;
L124A:	lda     _lknp,x
;
; __asm__ ("cmp %v", n_pant);
;
	cmp     _n_pant
;
; __asm__ ("bne %g", bolt_clear_loop_continue);
;
	bne     L124E
;
; __asm__ ("lda %v, x", lkyx);
;
	lda     _lkyx,x
;
; __asm__ ("cmp %v", rdd);
;
	cmp     _rdd
;
; __asm__ ("bne %g", bolt_clear_loop_continue);
;
	bne     L124E
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", lkact);
;
	sta     _lkact,x
;
; __asm__ ("inx");
;
L124E:	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", bolt_clear_loop);
;
	bne     L124A
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("ldx #0");
;
	tax
;
; __asm__ ("stx %v", gpit);
;
L125B:	stx     _gpit
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("beq %g", breakable_do_anim_continue);
;
	beq     L125F
;
; __asm__ ("inc %v, x", brkf);
;
	inc     _brkf,x
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("cmp #%b", BREAKABLE_MAX_FRAMES);
;
	cmp     #$0C
;
; __asm__ ("bne %g", breakable_do_anim_set_flag);
;
	bne     L1265
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", brkf);
;
	sta     _brkf,x
;
; __asm__ ("lda %v, x", brkx);
;
	lda     _brkx,x
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v, x", brky);
;
	lda     _brky,x
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; _t = BREAKABLE_ERASE;
;
	lda     _c_tsmap
	sta     ptr1
	lda     _c_tsmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __t
;
; on_tile_break ();
;
	jsr     _on_tile_break
;
; map_set ();
;
	jsr     _map_set
;
; __asm__ ("jmp %g", breakable_do_anim_continue);
;
	jmp     L125F
;
; __asm__ ("lda #1");
;
L1265:	lda     #1
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("ldx %v", gpit);
;
L125F:	ldx     _gpit
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", BREAKABLE_MAX);
;
	cpx     #$04
;
; __asm__ ("bne %g", breakable_do_anim_loop);
;
	bne     L125B
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ break_wall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_break_wall: near

.segment	"CODE"

;
; rdm = _x | (_y << 4);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _rdm
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("stx %v", gpit);
;
L127F:	stx     _gpit
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("bne %g", break_wall_anim_create_continue);
;
	bne     L1283
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("sta %v, x", brkf);
;
	sta     _brkf,x
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("sta %v, x", brkx);
;
	sta     _brkx,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("sta %v, x", brky);
;
	sta     _brky,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda #%b", BREAKABLE_BREAKING);
;
	lda     #$2E
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; update_list_tile ();
;
	jsr     _update_list_tile
;
; map_attr [rdm] = 8;
;
	ldy     _rdm
	lda     #$08
	sta     _map_attr,y
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jmp     _sfx_play
;
; __asm__ ("ldx %v", gpit);
;
L1283:	ldx     _gpit
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", BREAKABLE_MAX);
;
	cpx     #$04
;
; __asm__ ("bne %g", break_wall_anim_create_loop);
;
	bne     L127F
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_hotspots);
;
L12A7:	lda     (_c_hotspots),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", ht);
;
	sta     _ht,x
;
; __asm__ ("lda (%v), y", c_hotspots);
;
	lda     (_c_hotspots),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", hyx);
;
	sta     _hyx,x
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, x", hact);
;
	sta     _hact,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", MAP_W * MAP_H);
;
	cpx     #$19
;
; __asm__ ("bne %g", hotspots_load_loop);
;
	bne     L12A7
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", hrt);
;
	sta     _hrt
;
; __asm__ ("ldx %v", n_pant);
;
	ldx     _n_pant
;
; __asm__ ("lda %v, x", hact);
;
	lda     _hact,x
;
; __asm__ ("beq %g", hotspots_create_done);
;
	beq     L12BA
;
; __asm__ ("lda %v, x", ht);
;
	lda     _ht,x
;
; __asm__ ("beq %g", hotspots_create_done);
;
	beq     L12BA
;
; __asm__ ("sta %v", hrt);
;
	sta     _hrt
;
; __asm__ ("lda %v, x", hyx);
;
	lda     _hyx,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v", hry);
;
	sta     _hry
;
; __asm__ ("lda %v, x", hyx);
;
	lda     _hyx,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", hrx);
;
	sta     _hrx
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", HOTSPOTS_TILE_BASE);
;
	adc     #$2A
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; draw_tile ();
;
	jmp     _draw_tile
;
; }
;
L12BA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hitter_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hitter_do: near

.segment	"CODE"

;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", HITTER_Y_OFFS);
;
	adc     #$06
;
; __asm__ ("sta %v", hitter_y);
;
	sta     _hitter_y
;
; __asm__ ("adc #4");
;
	adc     #4
;
; __asm__ ("sta %v", hitter_hit_y);
;
	sta     _hitter_hit_y
;
; __asm__ ("ldx %v", hitter_frame);
;
	ldx     _hitter_frame
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("beq %g", hitter_facing_left);
;
	beq     L12E9
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("adc %v, x", hitter_offs);
;
	adc     _hitter_offs,x
;
; __asm__ ("sta %v", hitter_x);
;
	sta     _hitter_x
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("jmp %g", hitter_facing_done);
;
	jmp     L12EF
;
; __asm__ ("lda %v", prx);
;
L12E9:	lda     _prx
;
; __asm__ ("adc #8");
;
	adc     #8
;
; __asm__ ("sbc %v, x", hitter_offs);
;
	sbc     _hitter_offs,x
;
; __asm__ ("sta %v", hitter_x);
;
	sta     _hitter_x
;
; __asm__ ("sta %v", hitter_hit_x);
;
L12EF:	sta     _hitter_hit_x
;
; __asm__ ("lda %v", hitter_frame);
;
	lda     _hitter_frame
;
; __asm__ ("cmp #%b", HITTER_ACTIVE_FRAME_A);
;
	cmp     #$02
;
; __asm__ ("bcc %g", hitter_inactive);
;
	bcc     L12F9
;
; __asm__ ("cmp #%b", HITTER_ACTIVE_FRAME_B);
;
	cmp     #$03
;
; __asm__ ("beq %g", hitter_active);
;
	beq     L12FD
;
; __asm__ ("bcc %g", hitter_active);
;
	bcc     L12FD
;
; __asm__ ("lda #0");
;
L12F9:	lda     #0
;
; __asm__ ("sta %v", hitter_hit_y);
;
	sta     _hitter_hit_y
;
; hitter_x, hitter_y + SPRITE_ADJUST, 
;
L12FD:	jsr     decsp4
	lda     _hitter_x
	ldy     #$03
	sta     (sp),y
	lda     _hitter_y
	clc
	adc     #$07
	dey
	sta     (sp),y
;
; 0xf9 - pfacing, 1, 252
;
	lda     #$F9
	sec
	sbc     _pfacing
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
;
; );
;
	lda     #$FC
	jsr     _oam_spr
;
; if (hitter_hit_y) {
;
	lda     _hitter_hit_y
	beq     L130E
;
; _x = hitter_hit_x >> 4;
;
	ldx     #$00
	lda     _hitter_hit_x
	jsr     asrax4
	sta     __x
;
; _y = hitter_hit_y >> 4;
;
	ldx     #$00
	lda     _hitter_hit_y
	jsr     asrax4
	sta     __y
;
; if (map_attr [_x | (hitter_hit_y & 0xf0)] == 24) {
;
	lda     _hitter_hit_y
	and     #$F0
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	cmp     #$18
	bne     L130E
;
; break_wall ();
;
	jsr     _break_wall
;
; hitter_on = 0;
;
	lda     #$00
	sta     _hitter_on
;
; if (half_life) { ++ hitter_frame; if (hitter_frame == HITTER_FRAMES) hitter_on = 0; }
;
L130E:	lda     _half_life
	beq     L1318
	inc     _hitter_frame
	lda     _hitter_frame
	cmp     #$05
	bne     L1318
	lda     #$00
	sta     _hitter_on
;
; }
;
L1318:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("txa");
;
L132E:	txa
;
; __asm__ ("sta %v, x", coco_slots);
;
	sta     _coco_slots,x
;
; __asm__ ("lda #$ff");
;
	lda     #$ff
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", COCOS_MAX);
;
	cpx     #$03
;
; __asm__ ("bne %g", cocos_init_loop);
;
	bne     L132E
;
; __asm__ ("sta %v", coco_slots_i);
;
	stx     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_add: near

.segment	"CODE"

;
; __asm__ ("lda %v", coco_slots_i);
;
	lda     _coco_slots_i
;
; __asm__ ("bne %g", cocos_add_do);
;
	bne     L133D
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("dec %v", coco_slots_i);
;
L133D:	dec     _coco_slots_i
;
; __asm__ ("ldx %v", coco_slots_i);
;
	ldx     _coco_slots_i
;
; __asm__ ("lda %v, x", coco_slots);
;
	lda     _coco_slots,x
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("sta %v, x", coco_x);
;
	sta     _coco_x,x
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda %v, y", _mx);
;
	lda     __mx,y
;
; __asm__ ("sta %v, x", coco_mx);
;
	sta     _coco_mx,x
;
; __asm__ ("lda %v, y", _my);
;
	lda     __my,y
;
; __asm__ ("sta %v, x", coco_my);
;
	sta     _coco_my,x
;
; sfx_play (SFX_COCO, 1);
;
	lda     #$0A
	jsr     pusha
	lda     #$01
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("stx %v", coco_it);
;
L1351:	stx     _coco_it
;
; __asm__ ("lda %v, x", coco_y);
;
	lda     _coco_y,x
;
; __asm__ ("cmp #$ff");
;
	cmp     #$ff
;
; __asm__ ("beq %g", cocos_do_nococo);
;
	jeq     L1356
;
; __asm__ ("lda %v, x", coco_x);
;
	lda     _coco_x,x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, x", coco_mx);
;
	adc     _coco_mx,x
;
; __asm__ ("sta %v, x", coco_x);
;
	sta     _coco_x,x
;
; __asm__ ("sta %v", _coco_x);
;
	sta     __coco_x
;
; __asm__ ("lda %v, x", coco_y);
;
	lda     _coco_y,x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, x", coco_my);
;
	adc     _coco_my,x
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("sta %v", _coco_y);
;
	sta     __coco_y
;
; _coco_x, _coco_y + SPRITE_ADJUST,
;
	jsr     decsp4
	lda     __coco_x
	ldy     #$03
	sta     (sp),y
	lda     __coco_y
	clc
	adc     #$07
	dey
	sta     (sp),y
;
; COCOS_PATTERN, COCOS_PALETTE, 236 + (coco_it << 2)
;
	lda     #$FA
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	ldx     #$00
	lda     _coco_it
	jsr     aslax2
;
; );
;
	clc
	adc     #$EC
	jsr     _oam_spr
;
; IF_COLLIDE_IN ((_coco_x + 4), (_coco_y + 4), prx, pry) {
;
	lda     __coco_x
	clc
	adc     #$04
	sta     __x1
	lda     __coco_y
	clc
	adc     #$04
	sta     __y1
	lda     _prx
	sta     __x2
	lda     _pry
	sta     __y2
	jsr     _collide_in
	tax
	beq     L137A
;
; if (kids_mode) {
;
	lda     _kids_mode
	beq     L137C
;
; pstate = EST_PARALYZED;
;
	lda     #$08
	sta     _pstate
;
; pctstate = 100;
;
	lda     #$64
	sta     _pctstate
;
; } else phit = 1;
;
	jmp     L1382
L137C:	lda     #$01
	sta     _phit
;
; __asm__ ("ldx %v", coco_it);
;
L1382:	ldx     _coco_it
;
; __asm__ ("jmp %g", cocos_do_destroy);
;
	jmp     L1387
;
; __asm__ ("ldx %v", coco_it);
;
L137A:	ldx     _coco_it
;
; __asm__ ("lda #%b", (COCOS_V - 1));
;
	lda     #$03
;
; __asm__ ("cmp %v", _coco_x);
;
	cmp     __coco_x
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L1387
;
; __asm__ ("lda %v", _coco_x);
;
	lda     __coco_x
;
; __asm__ ("cmp #%w", (249 - COCOS_V));
;
	cmp     #$00F5
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L1387
;
; __asm__ ("lda #%b", (COCOS_V - 1));
;
	lda     #$03
;
; __asm__ ("cmp %v", _coco_y);
;
	cmp     __coco_y
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L1387
;
; __asm__ ("lda %v", _coco_y);
;
	lda     __coco_y
;
; __asm__ ("cmp #%w", (185 - COCOS_V));
;
	cmp     #$00B5
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L1387
;
; __asm__ ("lda %v", _coco_x);
;
	lda     __coco_x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _coco_y);
;
	lda     __coco_y
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ora %v", cx1);
;
	ora     _cx1
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_attr);
;
	lda     _map_attr,y
;
; __asm__ ("and #8");
;
	and     #8
;
; __asm__ ("bne %g", cocos_do_destroy);
;
	bne     L1387
;
; __asm__ ("jmp %g", cocos_do_continue);
;
	jmp     L13AB
;
; 0, 240,
;
L1356:	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
;
; 0xfa, 1, 236 + (coco_it << 2)
;
	lda     #$FA
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	ldx     #$00
	lda     _coco_it
	jsr     aslax2
;
; );
;
	clc
	adc     #$EC
	jsr     _oam_spr
;
; __asm__ ("ldx %v", coco_it);
;
	ldx     _coco_it
;
; __asm__ ("jmp %g", cocos_do_continue);
;
	jmp     L13AB
;
; __asm__ ("lda #$ff");
;
L1387:	lda     #$ff
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("ldy %v", coco_slots_i);
;
	ldy     _coco_slots_i
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("sta %v, y", coco_slots);
;
	sta     _coco_slots,y
;
; __asm__ ("inc %v", coco_slots_i);
;
	inc     _coco_slots_i
;
; __asm__ ("inx");
;
L13AB:	inx
;
; __asm__ ("cpx #%b", COCOS_MAX);
;
	cpx     #$03
;
; __asm__ ("bne %g", cocos_do_loop);
;
	jne     L1351
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_set_safe (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_set_safe: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; px = (signed int) (l_ini_x [level] << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; py = (signed int) (l_ini_y [level] << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; player_set_safe ();
;
	jsr     _player_set_safe
;
; pfacing = l_pfacing [level];
;
	ldy     _level
	lda     _l_pfacing,y
	sta     _pfacing
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$01
	sta     _vertical_engine_type
;
; pvx = pvy = pfr = pctfr = pj = pctj = pobjs = pkeys = pkilled = 0;
;
	lda     #$00
	sta     _pkilled
	sta     _pkeys
	sta     _pobjs
	sta     _pctj
	sta     _pj
	sta     _pctfr
	sta     _pfr
	sta     _pvy
	sta     _pvx
;
; hitter_on = 0;
;
	sta     _hitter_on
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; if (plife) --plife; else game_over = 1;
;
	lda     _plife
	beq     L13F4
	dec     _plife
	jmp     L13F7
L13F4:	lda     #$01
	sta     _game_over
;
; pstate = EST_FLICKERING;
;
L13F7:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; pvx = pvy = pj = 0;
;
	lda     #$00
	sta     _pj
	sta     _pvy
	sta     _pvx
;
; if (!game_over) {
;
	lda     _game_over
	bne     L140B
;
; px = px_safe;
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe;
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; }
;
L140B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ process_tile (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_process_tile: near

.segment	"CODE"

;
; _x = x0; _y = y0;
;
	ldy     #$01
	lda     (sp),y
	sta     __x
	dey
	lda     (sp),y
	sta     __y
;
; if (qt == LOCK_TILE && pkeys) {
;
	ldy     #$02
	lda     (sp),y
	cmp     #$0F
	jne     incsp3
	lda     _pkeys
	jeq     incsp3
;
; _t = 0; map_set (); // rdd == YX
;
	lda     #$00
	sta     __t
	jsr     _map_set
;
; bolt_clear ();
;
	jsr     _bolt_clear
;
; -- pkeys;
;
	dec     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pstate != EST_NORMAL) {
;
	lda     _pstate
	beq     L1428
;
; -- pctstate;
;
	dec     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L1428
	sta     _pstate
;
; if (pstate == EST_PARALYZED) pad_this_frame = pad = 0;
;
L1428:	lda     _pstate
	cmp     #$08
	bne     L142C
	lda     #$00
	sta     _pad
	sta     _pad_this_frame
;
; hitv = hith = 0;
;
L142C:	lda     #$00
	sta     _hith
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$03
	bne     L1434
;
; if (pad & (PAD_DOWN|PAD_A)) {
;
	lda     _pad
	and     #$21
	beq     L1436
;
; pvy += PLAYER_AY_SWIM;
;
	lda     #$02
	clc
	adc     _pvy
	sta     _pvy
;
; if (pvy > PLAYER_VY_SWIM_MAX) pvy = PLAYER_VY_SWIM_MAX;
;
	sec
	sbc     #$11
	bvs     L143F
	eor     #$80
L143F:	bpl     L145A
	lda     #$10
;
; } else {
;
	jmp     L1C20
;
; pvy -= PLAYER_AY_SWIM >> 1;
;
L1436:	dec     _pvy
;
; if (pvy < -PLAYER_VY_SWIM_MAX) pvy = -PLAYER_VY_SWIM_MAX;
;
	lda     _pvy
	sec
	sbc     #$F0
	bvc     L1449
	eor     #$80
L1449:	bpl     L145A
	lda     #$F0
;
; } else
;
	jmp     L1C20
;
; pvy += pj ? PLAYER_G_JUMPING : PLAYER_G;
;
L1434:	lda     _pj
	beq     L144F
	lda     #$01
	jmp     L1451
L144F:	lda     #$04
L1451:	clc
	adc     _pvy
	sta     _pvy
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX;
;
	sec
	sbc     #$41
	bvs     L1457
	eor     #$80
L1457:	bpl     L1454
	lda     #$40
	sta     _pvy
;
; if (pgotten) pvy = 0;
;
L1454:	lda     _pgotten
	beq     L145A
	lda     #$00
L1C20:	sta     _pvy
;
; py += pvy; if (py < -(8<<FIXBITS)) py = -(8<<FIXBITS);
;
L145A:	lda     _pvy
	ldx     #$00
	cmp     #$80
	bcc     L1C26
	dex
	clc
L1C26:	adc     _py
	sta     _py
	txa
	adc     _py+1
	sta     _py+1
	lda     _py
	cmp     #$80
	lda     _py+1
	sbc     #$FF
	bvc     L1465
	eor     #$80
L1465:	bpl     L1462
	ldx     #$FF
	lda     #$80
	sta     _py
	stx     _py+1
;
; pry = py >> FIXBITS;
;
L1462:	lda     _py
	ldx     _py+1
	jsr     asrax4
	sta     _pry
;
; ppossee = pquicksanded = 0;
;
	lda     #$00
	sta     _pquicksanded
	sta     _ppossee
;
; cx1 = (prx + 4) >> 4;
;
	tax
	lda     _prx
	clc
	adc     #$04
	bcc     L1471
	inx
L1471:	jsr     shrax4
	sta     _cx1
;
; cx2 = (prx + 11) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0B
	bcc     L1475
	inx
L1475:	jsr     shrax4
	sta     _cx2
;
; if (pvy + pgtmy)
;
	ldx     #$00
	lda     _pvy
	bpl     L1478
	dex
L1478:	clc
	adc     _pgtmy
	pha
	txa
	adc     _pgtmy+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L14AF
;
; if (pvy + pgtmy < 0)
;
	ldx     #$00
	lda     _pvy
	bpl     L147B
	dex
L147B:	clc
	adc     _pgtmy
	txa
	adc     _pgtmy+1
	tax
	cpx     #$80
	bcc     L1479
;
; cy1 = cy2 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L1480
	inx
L1480:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rdb = 8; rdc = (cy1 << 4) + 8;
;
	lda     #$08
	sta     _rdb
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	clc
	adc     #$08
;
; else if (pvy + pgtmy > 0)
;
	jmp     L1C29
L1479:	ldx     #$00
	lda     _pvy
	bpl     L148A
	dex
L148A:	clc
	adc     _pgtmy
	pha
	txa
	adc     _pgtmy+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L148B
	eor     #$80
L148B:	jpl     L14AF
;
; cy1 = cy2 = (pry + 16) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1490
	inx
L1490:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; if (pry > ((cy1 - 1) << 4) + (pvy >> FIXBITS)) goto nopor;
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1495
	ldx     #$FF
L1495:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _pvy
	bpl     L1497
	dex
L1497:	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     tosicmp
	beq     L1C28
	bcs     L14AF
;
; rdb = 12; rdc = (cy1 - 1) << 4;
;
L1C28:	lda     #$0C
	sta     _rdb
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
L1C29:	sta     _rdc
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rdb) || (at2 & rdb)) {
;
	ldx     #$00
	lda     _rdb
	and     _at1
	pha
	pla
	bne     L14A2
	lda     _rdb
	and     _at2
	pha
	pla
	beq     L14A1
;
; pvy = 0; pry = rdc; py = pry << FIXBITS; pgotten = 0;
;
L14A2:	stx     _pvy
	lda     _rdc
	sta     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
	lda     #$00
	sta     _pgotten
;
; } else if ((at1 & 1) || (at2 & 1)) hitv = 1;  
;
	jmp     L14AF
L14A1:	lda     _at1
	and     #$01
	bne     L14B0
	lda     _at2
	and     #$01
	beq     L14AF
L14B0:	lda     #$01
	sta     _hitv
;
; psafe = pscreenissafe;
;
L14AF:	lda     _pscreenissafe
	sta     _psafe
;
; cy1 = cy2 = (pry + 15) >> 4; cm_two_points ();
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L14BC
	inx
L14BC:	jsr     shrax4
	sta     _cy2
	sta     _cy1
	jsr     _cm_two_points
;
; if ((at1 == 2) || (at2 == 2)) {
;
	lda     _at1
	cmp     #$02
	beq     L14BF
	lda     _at2
	cmp     #$02
	bne     L14CA
;
; pquicksanded = 1;
;
L14BF:	lda     #$01
	sta     _pquicksanded
;
; if (pvy + pgtmy < 0) { pj = 0; }
;
	ldx     #$00
	lda     _pvy
	bpl     L14C7
	dex
L14C7:	clc
	adc     _pgtmy
	txa
	adc     _pgtmy+1
	tax
	cpx     #$80
	bcc     L14C5
	lda     #$00
	sta     _pj
;
; else { pvy = PLAYER_VY_SINKING; ppossee = 1; }
;
	jmp     L14CA
L14C5:	lda     #$01
	sta     _pvy
	sta     _ppossee
;
; if ((at1 == 48) || (at2 == 48)) {
;
L14CA:	lda     _at1
	cmp     #$30
	beq     L14D0
	lda     _at2
	cmp     #$30
	bne     L14CF
;
; if (at1 == 48) _x = cx1; 
;
L14D0:	lda     _at1
	cmp     #$30
	bne     L14D4
	lda     _cx1
;
; else _x = cx2;
;
	jmp     L1C21
L14D4:	lda     _cx2
L1C21:	sta     __x
;
; _y = cy1; _t = SPRING_SPIKE_TILE; map_set ();
;
	lda     _cy1
	sta     __y
	lda     #$0C
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_SPRING, 0);
;
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cy1 = cy2 = (pry + 16) >> 4; cm_two_points ();
;
L14CF:	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L14E7
	inx
L14E7:	jsr     shrax4
	sta     _cy2
	sta     _cy1
	jsr     _cm_two_points
;
; ppossee = ppossee || (at1 & 12) || (at2 & 12);
;
	lda     _ppossee
	bne     L14EA
	lda     _at1
	and     #$0C
	bne     L14EA
	lda     _at2
	and     #$0C
	beq     L14ED
L14EA:	lda     #$01
L14ED:	sta     _ppossee
;
; pslippery = (at1 & 64) || (at2 & 64);
;
	lda     _at1
	and     #$40
	bne     L14EF
	lda     _at2
	and     #$40
	beq     L14F2
L14EF:	lda     #$01
L14F2:	sta     _pslippery
;
; if (ppossee) {
;
	lda     _ppossee
	beq     L1501
;
; if (at1 & 32) { 
;
	lda     _at1
	and     #$20
	beq     L14F5
;
; pgotten = 1; pgtmy = 0;
;
	lda     #$01
	sta     _pgotten
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
;
; psafe = 0;
;
	sta     _psafe
;
; pgtmx = _pgtmx [at1 & 1]; 
;
	lda     _at1
	and     #$01
	clc
	adc     #<(__pgtmx)
	tay
	lda     #$00
	adc     #>(__pgtmx)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L1500
	dex
L1500:	sta     _pgtmx
	stx     _pgtmx+1
;
; if (at2 & 32) { 
;
L14F5:	lda     _at2
	and     #$20
	beq     L1501
;
; pgotten = 1; pgtmy = 0; 
;
	lda     #$01
	sta     _pgotten
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
;
; psafe = 0;
;
	sta     _psafe
;
; pgtmx = _pgtmx [at2 & 1]; 
;
	lda     _at2
	and     #$01
	clc
	adc     #<(__pgtmx)
	tay
	lda     #$00
	adc     #>(__pgtmx)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L150C
	dex
L150C:	sta     _pgtmx
	stx     _pgtmx+1
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L1501:	lda     _vertical_engine_type
	cmp     #$01
	jne     L152E
;
; if ((pad_this_frame & PAD_A) && !pj) {
;
	lda     _pad_this_frame
	and     #$01
	beq     L1520
	lda     _pj
	bne     L1520
;
; if (pgotten || ppossee || hitv) {
;
	lda     _pgotten
	bne     L1515
	lda     _ppossee
	bne     L1515
	lda     _hitv
	beq     L1520
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
L1515:	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	lda     #$CC
	sta     _pvy
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (psafe && !pgotten && !hitv && pstate == EST_NORMAL) player_set_safe ();
;
	lda     _psafe
	beq     L1520
	lda     _pgotten
	bne     L1520
	lda     _hitv
	bne     L1520
	lda     _pstate
	bne     L1520
	jsr     _player_set_safe
;
; if (pad & PAD_A) {
;
L1520:	lda     _pad
	and     #$01
	beq     L1525
;
; if (pj) {
;
	lda     _pj
	beq     L152E
;
; ++ pctj; if (pctj == PLAYER_VY_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L152E
;
; } else {
;
	jmp     L1531
;
; if (pj) {
;
L1525:	lda     _pj
	beq     L1531
;
; if (pvy < -PLAYER_VY_JUMP_RELEASE) pvy = -PLAYER_VY_JUMP_RELEASE;
;
	lda     _pvy
	sec
	sbc     #$E8
	bvc     L1534
	eor     #$80
L1534:	bpl     L1531
	lda     #$E8
	sta     _pvy
;
; pj = 0;
;
L1531:	lda     #$00
	sta     _pj
;
; __asm__ ("lda %v", pslippery);
;
L152E:	lda     _pslippery
;
; __asm__ ("beq %g", player_move_no_slippery);
;
	beq     L153B
;
; __asm__ ("ldx #%b", PLAYER_AX_SLIPPERY);
;
	ldx     #$01
;
; __asm__ ("ldy %v", PLAYER_RX_SLIPPERY);
;
	ldy     _half_life
;
; __asm__ ("lda #%b", PLAYER_VX_MAX_SLIPPERY);
;
	lda     #$30
;
; __asm__ ("jmp %g", player_move_horizontal_set);
;
	jmp     L1542
;
; __asm__ ("lda %v", pquicksanded);
;
L153B:	lda     _pquicksanded
;
; __asm__ ("beq %g", player_move_no_quicksands);
;
	beq     L1545
;
; __asm__ ("ldx #%b", PLAYER_AX_QUICKSANDS);
;
	ldx     #$01
;
; __asm__ ("ldy #%b", PLAYER_RX_QUICKSANDS);
;
	ldy     #$08
;
; __asm__ ("lda #%b", PLAYER_VX_MAX_QUICKSANDS);
;
	tya
;
; __asm__ ("jmp %g", player_move_horizontal_set);
;
	jmp     L1542
;
; __asm__ ("ldx #%b", PLAYER_AX);
;
L1545:	ldx     #$03
;
; __asm__ ("ldy #%b", PLAYER_RX);
;
	ldy     #$04
;
; __asm__ ("lda #%b", PLAYER_VX_MAX);
;
	lda     #$20
;
; __asm__ ("stx %v", player_ax);
;
L1542:	stx     _player_ax
;
; __asm__ ("sty %v", player_rx);
;
	sty     _player_rx
;
; __asm__ ("sta %v", player_vx_max);
;
	sta     _player_vx_max
;
; if (!((pad & PAD_LEFT) || (pad & PAD_RIGHT))) {
;
	lda     _pad
	and     #$40
	bne     L1558
	lda     _pad
	and     #$80
	beq     L155B
L1558:	lda     #$01
L155B:	jsr     bnega
	beq     L1571
;
; if (pvx > 0) {
;
	lda     _pvx
	sec
	sbc     #$01
	bvs     L155F
	eor     #$80
L155F:	bpl     L155C
;
; pvx -= _PLAYER_RX; if (pvx < 0) pvx = 0;
;
	lda     _player_rx
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	asl     a
	bcc     L1571
;
; } else if (pvx < 0) {
;
	jmp     L1C2A
L155C:	lda     _pvx
	asl     a
	bcc     L1571
;
; pvx += _PLAYER_RX; if (pvx > 0) pvx = 0;
;
	lda     _player_rx
	clc
	adc     _pvx
	sta     _pvx
	sec
	sbc     #$01
	bvs     L1574
	eor     #$80
L1574:	bpl     L1571
L1C2A:	lda     #$00
	sta     _pvx
;
; if (pad & PAD_LEFT) {
;
L1571:	lda     _pad
	and     #$40
	beq     L1577
;
; pvx -= _PLAYER_AX;
;
	lda     _player_ax
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
;
; if (pvx < -_PLAYER_VX_MAX) pvx = -_PLAYER_VX_MAX;
;
	ldx     #$00
	lda     _pvx
	bpl     L157F
	dex
L157F:	jsr     pushax
	ldx     #$00
	lda     _player_vx_max
	bpl     L1580
	dex
L1580:	jsr     negax
	jsr     tosicmp
	bpl     L157D
	ldx     #$00
	lda     _player_vx_max
	bpl     L1583
	dex
L1583:	jsr     negax
	sta     _pvx
;
; pfacing = 0;
;
L157D:	lda     #$00
	sta     _pfacing
;
; if (pad & PAD_RIGHT) {
;
L1577:	lda     _pad
	and     #$80
	beq     L1586
;
; pvx += _PLAYER_AX;
;
	lda     _player_ax
	clc
	adc     _pvx
	sta     _pvx
;
; if (pvx > _PLAYER_VX_MAX) pvx = _PLAYER_VX_MAX;  
;
	ldx     #$00
	lda     _pvx
	bpl     L158E
	dex
L158E:	jsr     pushax
	ldx     #$00
	lda     _player_vx_max
	bpl     L158F
	dex
L158F:	jsr     tosicmp
	bmi     L158C
	beq     L158C
	lda     _player_vx_max
	sta     _pvx
;
; pfacing = 1;
;
L158C:	lda     #$01
	sta     _pfacing
;
; px += pvx;
;
L1586:	lda     _pvx
	ldx     #$00
	cmp     #$80
	bcc     L1C27
	dex
	clc
L1C27:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
;
; if (px < (0 << FIXBITS)) px = 0 << FIXBITS;
;
	ldx     _px+1
	cpx     #$80
	bcc     L1599
	lda     #$00
	sta     _px
	sta     _px+1
;
; if (px > (240 << FIXBITS)) px = 240 << FIXBITS;
;
L1599:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$0F
	bvs     L15A1
	eor     #$80
L15A1:	bpl     L159E
	ldx     #$0F
	lda     #$00
	sta     _px
	stx     _px+1
;
; if (pgotten) px += pgtmx;
;
L159E:	lda     _pgotten
	beq     L15A4
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; prx = px >> FIXBITS;
;
L15A4:	lda     _px
	ldx     _px+1
	jsr     asrax4
	sta     _prx
;
; if (pvx + pgtmx)
;
	ldx     #$00
	lda     _pvx
	bpl     L15AC
	dex
L15AC:	clc
	adc     _pgtmx
	pha
	txa
	adc     _pgtmx+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L15ED
;
; cy1 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L15B0
	inx
L15B0:	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L15B4
	inx
L15B4:	jsr     shrax4
	sta     _cy2
;
; if (pvx + pgtmx < 0)    
;
	ldx     #$00
	lda     _pvx
	bpl     L15B7
	dex
L15B7:	clc
	adc     _pgtmx
	txa
	adc     _pgtmx+1
	tax
	cpx     #$80
	bcc     L15B5
;
; cx1 = cx2 = (prx + 4) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L15BC
	inx
L15BC:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rdc = ((cx1 + 1) << 4) - 4;   
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L15C1
	inx
L15C1:	jsr     shlax4
	sec
	sbc     #$04
;
; else if (pvx + pgtmx > 0)
;
	jmp     L1C24
L15B5:	ldx     #$00
	lda     _pvx
	bpl     L15C6
	dex
L15C6:	clc
	adc     _pgtmx
	pha
	txa
	adc     _pgtmx+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L15C7
	eor     #$80
L15C7:	bpl     L15C4
;
; cx1 = cx2 = (prx + 12) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0C
	bcc     L15CC
	inx
L15CC:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rdc = ((cx1 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L15D1
	dex
L15D1:	jsr     shlax4
	clc
	adc     #$04
L1C24:	sta     _rdc
;
; cm_two_points ();
;
L15C4:	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L15D5
	lda     _at2
	and     #$08
	beq     L15D4
;
; pvx = 0; prx = rdc; px = prx << FIXBITS;
;
L15D5:	lda     #$00
	sta     _pvx
	lda     _rdc
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (              at1 == 10) process_tile (t1, cx1, cy1
;
	lda     _at1
	cmp     #$0A
	bne     L15DF
	jsr     decsp3
	lda     _t1
	ldy     #$02
	sta     (sp),y
	lda     _cx1
	dey
	sta     (sp),y
;
; );
;
	lda     _cy1
	dey
	sta     (sp),y
	jsr     _process_tile
;
; if (cy1 != cy2 && at2 == 10) process_tile (t2, cx1, cy2
;
L15DF:	lda     _cy2
	cmp     _cy1
	beq     L15ED
	lda     _at2
	cmp     #$0A
	bne     L15ED
	jsr     decsp3
	lda     _t2
	ldy     #$02
	sta     (sp),y
	lda     _cx1
	dey
	sta     (sp),y
;
; );
;
	lda     _cy2
	dey
	sta     (sp),y
	jsr     _process_tile
;
; } else hith = (at1 & 1) || (at2 & 1);
;
	jmp     L15ED
L15D4:	lda     _at1
	and     #$01
	bne     L15EF
	lda     _at2
	and     #$01
	beq     L15F2
L15EF:	lda     #$01
L15F2:	sta     _hith
;
; _x = (prx + 8) >> 4;
;
L15ED:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L15F6
	inx
L15F6:	jsr     shrax4
	sta     __x
;
; rdm = ((pry + 8) & 0xf0) | _x; cy1 = map_attr [rdm];
;
	lda     _pry
	clc
	adc     #$08
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     __x
	ora     ptr1
	sta     _rdm
	ldy     _rdm
	lda     _map_attr,y
	sta     _cy1
;
; if (cy1 == 128) {
;
	cmp     #$80
	bne     L1600
;
; _y = (pry + 8) >> 4; _t = c_tsmap [0]; 
;
	lda     _pry
	clc
	adc     #$08
	bcc     L1605
	inx
L1605:	jsr     shrax4
	sta     __y
	lda     _c_tsmap
	sta     ptr1
	lda     _c_tsmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __t
;
; sfx_play (SFX_RING, 0);
;
	lda     #$12
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; on_tile_get ();
;
	jsr     _on_tile_get
;
; map_set ();
;
	jsr     _map_set
;
; if (cy1 == 1) phit = 1;
;
L1600:	lda     _cy1
	cmp     #$01
	bne     L160E
	sta     _phit
;
; if (hitv) {
;
L160E:	lda     _hitv
	beq     L1612
;
; phit = 1;
;
	lda     #$01
	sta     _phit
;
; pvy = add_sign (-pvy, PLAYER_VX_MAX);
;
	jsr     decsp2
	ldx     #$00
	lda     _pvy
	bpl     L1619
	dex
L1619:	jsr     negax
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	jsr     _add_sign
	sta     _pvy
;
; } else if (hith) {
;
	jmp     L161C
L1612:	lda     _hith
	beq     L161C
;
; phit = 1;
;
	lda     #$01
	sta     _phit
;
; pvx = add_sign (-pvx, PLAYER_VX_MAX);
;
	jsr     decsp2
	ldx     #$00
	lda     _pvx
	bpl     L1623
	dex
L1623:	jsr     negax
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	jsr     _add_sign
	sta     _pvx
;
; if (pad_this_frame & PAD_B) {
;
L161C:	lda     _pad_this_frame
	and     #$02
	beq     L1627
;
; if (hitter_on == 0) {
;
	lda     _hitter_on
	bne     L1627
;
; hitter_on = 1; hitter_frame = 0;
;
	lda     #$01
	sta     _hitter_on
	lda     #$00
	sta     _hitter_frame
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM) {
;
L1627:	lda     _vertical_engine_type
	cmp     #$03
	bne     L162D
;
; (pfacing << 2) + 
;
	ldx     #$00
	lda     _pfacing
	jsr     aslax2
;
; (
;
	sta     ptr1
	stx     ptr1+1
;
; (pad & (PAD_LEFT|PAD_RIGHT|PAD_DOWN|PAD_UP|PAD_A)) ?
;
	lda     _pad
	and     #$F1
;
; ((frame_counter >> 2) & 3) :
;
	beq     L1636
	ldx     #$00
	lda     _frame_counter
	jsr     asrax2
	and     #$03
;
; 1
;
	jmp     L163A
;
; )
;
L1636:	lda     #$01
;
; ];    
;
L163A:	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1C1E
	inx
L1C1E:	sta     ptr1
	txa
	clc
	adc     #>(_player_frames)
	sta     ptr1+1
	ldy     #<(_player_frames)
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L1C25
;
; } else 
;
	jmp     L1C25
;
; if (ppossee || pgotten) {
;
L162D:	lda     _ppossee
	bne     L163F
	lda     _pgotten
	beq     L163E
;
; psprid = player_frames [(pfacing << 2) + (pvx ? (prx >> 3) & 3 : 1)];
;
L163F:	ldx     #$00
	lda     _pfacing
	jsr     aslax2
	sta     ptr1
	stx     ptr1+1
	lda     _pvx
	beq     L1646
	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	jmp     L1649
L1646:	lda     #$01
L1649:	clc
	adc     ptr1
	ldx     ptr1+1
;
; } else {
;
	jmp     L1C32
;
; psprid = player_frames [8 + pfacing];
;
L163E:	tax
	lda     _pfacing
	clc
	adc     #$08
L1C32:	bcc     L164F
	inx
L164F:	sta     ptr1
	txa
	clc
	adc     #>(_player_frames)
	sta     ptr1+1
	ldy     #<(_player_frames)
	lda     (ptr1),y
L1C25:	sta     _psprid
;
; if (pstate != EST_FLICKERING || half_life) {
;
	lda     _pstate
	cmp     #$02
	bne     L1651
	lda     _half_life
	beq     L1650
;
; rda = psprid + c_player_offset;
;
L1651:	lda     _psprid
	clc
	adc     _c_player_offset
	sta     _rda
;
; oam_2x2_meta_spr (prx + ((pstate == EST_PARALYZED) & half_life), pry + SPRITE_ADJUST, 128, spriteset_pals [rda], rda << 2);
;
	jsr     decsp4
	lda     _prx
	jsr     pusha0
	lda     _pstate
	cmp     #$08
	jsr     booleq
	sta     ptr1
	lda     _half_life
	and     ptr1
	jsr     tosadda0
	ldy     #$03
	sta     (sp),y
	lda     _pry
	clc
	adc     #$07
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	ldy     _rda
	lda     _spriteset_pals,y
	ldy     #$00
	sta     (sp),y
	lda     _rda
	asl     a
	asl     a
	jmp     _oam_2x2_meta_spr
;
; oam_2x2_meta_spr (prx, 240, 128, 0, 252);
;
L1650:	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$FC
	jmp     _oam_2x2_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ enems_arrays_restore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_arrays_restore: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_maxct);
;
	lda     __en_maxct
;
; __asm__ ("sta %v, y", en_maxct);
;
	sta     _en_maxct,y
;
; __asm__ ("lda %v", _en_touched);
;
	lda     __en_touched
;
; __asm__ ("sta %v, y", en_touched);
;
	sta     _en_touched,y
;
; __asm__ ("lda %v", _en_cttouched);
;
	lda     __en_cttouched
;
; __asm__ ("sta %v, y", en_cttouched);
;
	sta     _en_cttouched,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_enems [n_pant]; rdm = (gp_gen != 0);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L1C38
	inx
	clc
L1C38:	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_gen
	stx     _gp_gen+1
	cpx     #$00
	bne     L1684
	cmp     #$00
L1684:	jsr     boolne
	sta     _rdm
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	stx     _gpit
L1685:	lda     _gpit
	cmp     #$03
	bcc     L1C39
;
; }
;
	rts
;
; if (rdm) if (*gp_gen == 0) rdm = 0;
;
L1C39:	lda     _rdm
	beq     L168F
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L168F
	sta     _rdm
;
; if (rdm == 0) {
;
L168F:	lda     _rdm
	bne     L1693
;
; en_t [gpit] = 0;
;
	ldy     _gpit
	sta     _en_t,y
;
; } else
;
	jmp     L1687
;
; __asm__ ("ldy #0");
;
L1693:	ldy     #0
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdc);
;
	sta     _rdc
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdd);
;
	sta     _rdd
;
; gp_gen += 4;
;
	lda     #$04
	clc
	adc     _gp_gen
	sta     _gp_gen
	bcc     L16A8
	inc     _gp_gen+1
;
; __asm__ ("ldx %v", gpit);
;
L16A8:	ldx     _gpit
;
; __asm__ ("lda %v", rdb);
;
	lda     _rdb
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v, x", en_x1);
;
	sta     _en_x1,x
;
; __asm__ ("lda %v", rdb);
;
	lda     _rdb
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v, x", en_y1);
;
	sta     _en_y1,x
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v, x", en_x2);
;
	sta     _en_x2,x
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v, x", en_y2);
;
	sta     _en_y2,x
;
; _en_x = en_x1 [gpit];
;
	ldy     _gpit
	lda     _en_x1,y
	sta     __en_x
;
; _en_y = en_y1 [gpit];
;
	ldy     _gpit
	lda     _en_y1,y
	sta     __en_y
;
; _en_maxct = rdd & 0xf0;
;
	lda     _rdd
	and     #$F0
	sta     __en_maxct
;
; rdt = rdd & 0xf;
;
	lda     _rdd
	and     #$0F
	sta     _rdt
;
; _en_mx = ADD_SIGN2 (en_x2 [gpit], en_x1 [gpit], rdt);
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L16D1
	cmp     ptr1
	bne     L16D1
	txa
	jmp     L16E1
L16D1:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L16DE
	beq     L16DE
	lda     _rdt
	jmp     L16E1
L16DE:	ldx     #$00
	lda     _rdt
	jsr     negax
L16E1:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (en_y2 [gpit], en_y1 [gpit], rdt);
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y2,y
	sta     ptr1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L16EE
	cmp     ptr1
	bne     L16EE
	txa
	jmp     L16FE
L16EE:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L16FB
	beq     L16FB
	lda     _rdt
	jmp     L16FE
L16FB:	ldx     #$00
	lda     _rdt
	jsr     negax
L16FE:	sta     __en_my
;
; _en_t = rda;    
;
	lda     _rda
	sta     __en_t
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_status [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; rdt = _en_t & 0xf;
;
	lda     __en_t
	and     #$0F
	sta     _rdt
;
; }
;
	cmp     #$06
	beq     L1716
	cmp     #$07
	bne     L1720
;
; _en_mx = rdd & 0xf; // Raw speed
;
	lda     _rdd
	and     #$0F
	sta     __en_mx
;
; break;
;
	jmp     L1710
;
; _en_mx = rdd & 0xf;
;
L1716:	lda     _rdd
	and     #$0F
	sta     __en_mx
;
; _en_s = (FANTIES_CELL - 1) << 1;
;
	lda     #$04
	sta     __en_s
;
; en_life [gpit] = FANTIES_LIFE;
;
	ldy     _gpit
	lda     #$03
	sta     _en_life,y
;
; break;
;
	jmp     L1710
;
; __asm__ ("ldx %v", gpit);
;
L1720:	ldx     _gpit
;
; __asm__ ("lda %v", rdt);
;
	lda     _rdt
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #1");
;
	sbc     #1
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("cmp #1");
;
	cmp     #1
;
; __asm__ ("beq %g", enems_load_en_status_do);
;
	beq     L172A
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("cmp #1");
;
	cmp     #1
;
; __asm__ ("bne %g", enems_load_en_status_else);
;
	bne     L172E
;
; __asm__ ("sta %v, x", en_status);
;
L172A:	sta     _en_status,x
;
; __asm__ ("jmp %g", en_status_done);
;
	jmp     L1732
;
; __asm__ ("lda #0");
;
L172E:	lda     #0
;
; __asm__ ("sta %v, x", en_status);
;
	sta     _en_status,x
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("cmp #$80");
;
	cmp     #$80
;
; __asm__ ("ror a");
;
	ror     a
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("cmp #$80");
;
	cmp     #$80
;
; __asm__ ("ror a");
;
	ror     a
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; if (rdt == 9) _en_s = DROPS_BASE_SPRITE;
;
L1732:	lda     _rdt
	cmp     #$09
	bne     L1710
	lda     #$2E
	sta     __en_s
;
; _en_touched = _en_ct = 0;
;
L1710:	lda     #$00
	sta     __en_ct
	sta     __en_touched
;
; enems_arrays_restore ();
;
	jsr     _enems_arrays_restore
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
L1687:	inc     _gpit
	jmp     L1685

.endproc

; ---------------------------------------------------------------
; void __near__ enem_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enem_hit: near

.segment	"CODE"

;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v", _en_touched);
;
	sta     __en_touched
;
; __asm__ ("sta %v", touched);
;
	sta     _touched
;
; __asm__ ("lda #8");
;
	lda     #8
;
; __asm__ ("sta %v", _en_cttouched);
;
	sta     __en_cttouched
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("dec %v, x", en_life);
;
	dec     _en_life,x
;
; __asm__ ("bne %g", enem_hit_not_killed_yet);
;
	bne     L174E
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("inc %v", pkilled);
;
	inc     _pkilled
;
; on_enem_killed ();
;
	jsr     _on_enem_killed
;
; sfx_play (SFX_ENHIT, 2);
;
L174E:	lda     #$06
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pgtmx = 0;
;
	sta     _pgtmx
	sta     _pgtmx+1
;
; pgtmy = 0;
;
	sta     _pgtmy
	sta     _pgtmy+1
;
; touched = 0;
;
	sta     _touched
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	sta     _gpit
L175F:	lda     _gpit
	cmp     #$03
	bcc     L1C4B
;
; }
;
	rts
;
; en_sprid = 0xff;
;
L1C4B:	lda     #$FF
	sta     _en_sprid
;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_maxct);
;
	lda     _en_maxct,y
;
; __asm__ ("sta %v", _en_maxct);
;
	sta     __en_maxct
;
; __asm__ ("lda %v, y", en_touched);
;
	lda     _en_touched,y
;
; __asm__ ("sta %v", _en_touched);
;
	sta     __en_touched
;
; __asm__ ("lda %v, y", en_cttouched);
;
	lda     _en_cttouched,y
;
; __asm__ ("sta %v", _en_cttouched);
;
	sta     __en_cttouched
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; if (_en_touched) {    
;
	lda     __en_touched
	beq     L1786
;
; if (_en_cttouched) {
;
	lda     __en_cttouched
	beq     L1780
;
; -- _en_cttouched;
;
	dec     __en_cttouched
;
; en_sprid = EXPL_SPR;
;
	lda     #$2F
;
; goto enems_move_loop_continue; 
;
	jmp     L1C41
;
; } else _en_touched = 0;
;
L1780:	sta     __en_touched
;
; if (_en_t) {
;
L1786:	lda     __en_t
	jeq     L1789
;
; gpjt = (prx + 11 >= _en_x && prx <= _en_x + 11);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0B
	bcc     L178E
	inx
L178E:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L178F
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L1790
	ldx     #$01
L1790:	jsr     tosicmp
	bcc     L178D
	beq     L178D
L178F:	lda     #$00
	jmp     L1791
L178D:	lda     #$01
L1791:	sta     _gpjt
;
; if (_en_mx != 0) {
;
	lda     __en_mx
	beq     L1792
;
; en_fr = ((_en_x) >> 4) & 1;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
;
; } else if (_en_my != 0) {
;
	jmp     L1C49
L1792:	lda     __en_my
	beq     L179A
;
; en_fr = ((_en_y) >> 4) & 1;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
;
; } else {
;
	jmp     L1C49
;
; en_fr = (frame_counter >> 3) & 1;
;
L179A:	tax
	lda     _frame_counter
	jsr     asrax3
L1C49:	and     #$01
	sta     _en_fr
;
; switch (_en_t & 0xf) {
;
	lda     __en_t
	and     #$0F
;
; }
;
	cmp     #$01
	beq     L17AF
	cmp     #$02
	beq     L17AF
	cmp     #$03
	beq     L17AF
	cmp     #$04
	beq     L17AF
	cmp     #$06
	jeq     L17E4
	cmp     #$07
	jeq     L1858
	cmp     #$09
	jeq     L186D
	jmp     L17A7
;
; if (!en_status [gpit] || half_life) {
;
L17AF:	ldy     _gpit
	lda     _en_status,y
	beq     L17B1
	lda     _half_life
	beq     L17CD
;
; __asm__ ("ldx %v", gpit);
;
L17B1:	ldx     _gpit
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("cmp %v, x", en_x1);
;
	cmp     _en_x1,x
;
; __asm__ ("beq %g", enems_lineal_horz_chgdir);
;
	beq     L17BC
;
; __asm__ ("cmp %v, x", en_x2);
;
	cmp     _en_x2,x
;
; __asm__ ("bne %g", enems_lineal_horz_done);
;
	bne     L17BF
;
; __asm__ ("lda #0");
;
L17BC:	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_mx);
;
	sbc     __en_mx
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_y);
;
L17BF:	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("cmp %v, x", en_y1);
;
	cmp     _en_y1,x
;
; __asm__ ("beq %g", enems_lineal_vert_chgdir);
;
	beq     L17CA
;
; __asm__ ("cmp %v, x", en_y2);
;
	cmp     _en_y2,x
;
; __asm__ ("bne %g", enems_lineal_vert_done);
;
	bne     L17CD
;
; __asm__ ("lda #0");
;
L17CA:	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_my);
;
	sbc     __en_my
;
; __asm__ ("sta %v", _en_my);  
;
	sta     __en_my
;
; en_sprid = c_enems_ssmap [_en_s + en_fr];
;
L17CD:	ldx     #$00
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L1C47
	inx
	clc
L1C47:	adc     _c_enems_ssmap
	sta     ptr1
	txa
	adc     _c_enems_ssmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _en_sprid
;
; if (_en_mx < 0) en_sprid += 8;
;
	lda     __en_mx
	asl     a
	bcc     L17D5
	lda     #$08
	clc
	adc     _en_sprid
;
; else if (_en_mx == 0 && _en_my < 0) en_sprid += 8;
;
	jmp     L1C43
L17D5:	lda     __en_mx
	jne     L17A7
	lda     __en_my
	asl     a
	jcc     L17A7
	lda     #$08
	clc
	adc     _en_sprid
;
; break;
;
	jmp     L1C43
;
; if ((rand8 () & 7) < 3) goto enems_8way_fanties_done;
;
L17E4:	jsr     _rand8
	and     #$07
	cmp     #$03
	jcc     L1821
;
; __asm__ ("lda %v", frame_counter);
;
	lda     _frame_counter
;
; __asm__ ("and %v", _en_mx);
;
	and     __en_mx
;
; __asm__ ("bne %g", enems_8way_fanties_done);
;
	jne     L1821
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("beq %g", enems_8way_fanties_vertical_done);
;
	beq     L17F3
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("bcc %g", enems_8way_fanties_move_down);
;
	bcc     L1805
;
; __asm__ ("dec %v", _en_y);
;
	dec     __en_y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("jmp %g", enems_8way_fanties_vert_cy_set);
;
	jmp     L1809
;
; __asm__ ("inc %v", _en_y);
;
L1805:	inc     __en_y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
L1809:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("bne %g", enems_8way_fanties_vertical_do);
;
	bne     L1818
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("beq %g", enems_8way_fanties_vertical_done);
;
	beq     L17F3
;
; __asm__ ("lda %v", rdy);
;
L1818:	lda     _rdy
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v", _en_x);
;
L17F3:	lda     __en_x
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("beq %g", enems_8way_fanties_horizontal_done);
;
	beq     L1821
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("bcc %g", enems_8way_fanties_move_right);
;
	bcc     L1833
;
; __asm__ ("dec %v", _en_x);
;
	dec     __en_x
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("jmp %g", enems_8way_fanties_horz_cx_set);
;
	jmp     L1837
;
; __asm__ ("inc %v", _en_x);
;
L1833:	inc     __en_x
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
L1837:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("bne %g", enems_8way_fanties_horizontal_do);
;
	bne     L1846
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("beq %g", enems_8way_fanties_horizontal_done);
;
	beq     L1821
;
; __asm__ ("lda %v", rdx);
;
L1846:	lda     _rdx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", frame_counter);
;
L1821:	lda     _frame_counter
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", en_fr);
;
	sta     _en_fr
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", en_fr);
;
	adc     _en_fr
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda (%v), y", c_enems_ssmap);
;
	lda     (_c_enems_ssmap),y
;
; break;
;
	jmp     L1C43
;
; if (_en_x > prx) _en_x -= _en_mx;
;
L1858:	ldx     #$00
	lda     __en_x
	sec
	sbc     _prx
	bcc     L1859
	beq     L1859
	lda     __en_mx
	eor     #$FF
	sec
;
; else if (_en_x < prx) _en_x += _en_mx;
;
	jmp     L1C4A
L1859:	lda     __en_x
	cmp     _prx
	bcs     L185F
	lda     __en_mx
	clc
L1C4A:	adc     __en_x
	sta     __en_x
;
; en_sprid = c_enems_ssmap [((PURSUERS_CELL - 1) << 1) + ((frame_counter >> 2) & 1)];
;
L185F:	lda     _frame_counter
	jsr     asrax2
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L1C48
	inx
	clc
L1C48:	adc     _c_enems_ssmap
	sta     ptr1
	txa
	adc     _c_enems_ssmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
;
; break;
;
	jmp     L1C43
;
; if (!en_status [gpit] || half_life) {
;
L186D:	ldy     _gpit
	lda     _en_status,y
	beq     L186F
	lda     _half_life
	beq     L1884
;
; __asm__ ("ldx %v", gpit);
;
L186F:	ldx     _gpit
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("cmp %v, x", en_x2);
;
	cmp     _en_x2,x
;
; __asm__ ("bne %g", enems_droparrow_horz_done);
;
	bne     L187A
;
; __asm__ ("lda %v, x", en_x1);
;
	lda     _en_x1,x
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", _en_y);
;
L187A:	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("cmp %v, x", en_y2);
;
	cmp     _en_y2,x
;
; __asm__ ("bne %g", enems_droparrow_vert_done);
;
	bne     L1884
;
; __asm__ ("lda %v, x", en_y1);
;
	lda     _en_y1,x
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; en_sprid = _en_s;
;
L1884:	lda     __en_s
L1C43:	sta     _en_sprid
;
; if (_en_ct) -- _en_ct; else {
;
L17A7:	lda     __en_ct
	beq     L188A
	dec     __en_ct
	jmp     L18E6
;
; _x = _en_x + 4; _y = _en_y + 4; _t = 0xff;
;
L188A:	lda     __en_x
	clc
	adc     #$04
	sta     __x
	lda     __en_y
	clc
	adc     #$04
	sta     __y
	lda     #$FF
	sta     __t
;
; switch (_en_t & 0xf0) {
;
	lda     __en_t
	and     #$F0
;
; }
;
	cmp     #$10
	beq     L189A
	cmp     #$20
	jeq     L18B6
	cmp     #$30
	jeq     L18D2
	cmp     #$40
	jeq     L18D2
	cmp     #$50
	jeq     L18D2
	cmp     #$60
	jeq     L18D2
	cmp     #$70
	jeq     L18DF
	jmp     L1898
;
; if (pry + 8 >= _en_y && pry <= _en_y + 8) {
;
L189A:	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L189D
	inx
L189D:	cmp     __en_y
	txa
	sbc     #$00
	jcc     L1898
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$08
	bcc     L189F
	ldx     #$01
L189F:	jsr     tosicmp
	bcc     L189C
	jne     L1898
;
; if (_en_mx == 0 || 
;
L189C:	lda     __en_mx
	beq     L18A2
;
; (_en_mx > 0 && prx > _en_x) ||
;
	lda     __en_mx
	sec
	sbc     #$01
	bvs     L18A6
	eor     #$80
L18A6:	bpl     L1C3B
	lda     _prx
	sec
	sbc     __en_x
	sta     tmp1
	lda     tmp1
	beq     L1C3B
	bcs     L18A2
;
; (_en_mx < 0 && prx < _en_x)
;
L1C3B:	lda     __en_mx
	asl     a
	jcc     L1898
	lda     _prx
	cmp     __en_x
	jcs     L1898
;
; _t = (prx < _en_x) ? 6 : 2;
;
L18A2:	lda     _prx
	cmp     __en_x
	bcs     L18B1
	lda     #$06
	jmp     L1C45
L18B1:	lda     #$02
;
; break;
;
	jmp     L1C45
;
; if (prx + 8 >= _en_x && prx <= _en_x + 8) {
;
L18B6:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L18B9
	inx
L18B9:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1898
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$08
	bcc     L18BB
	ldx     #$01
L18BB:	jsr     tosicmp
	bcc     L18B8
	bne     L1898
;
; if (_en_my == 0 || 
;
L18B8:	lda     __en_my
	beq     L18BE
;
; (_en_my > 0 && pry > _en_y) ||
;
	lda     __en_my
	sec
	sbc     #$01
	bvs     L18C2
	eor     #$80
L18C2:	bpl     L1C3D
	lda     _pry
	sec
	sbc     __en_y
	sta     tmp1
	lda     tmp1
	beq     L1C3D
	bcs     L18BE
;
; (_en_my < 0 && pry < _en_y)
;
L1C3D:	lda     __en_my
	asl     a
	bcc     L1898
	lda     _pry
	cmp     __en_y
	bcs     L1898
;
; _t = (pry < _en_y) ? 0 : 4;
;
L18BE:	lda     _pry
	cmp     __en_y
	bcs     L18CD
	lda     #$00
	jmp     L1C45
L18CD:	lda     #$04
;
; break;
;
	jmp     L1C45
;
; _t = ((_en_t >> 4) - 3) << 1;
;
L18D2:	ldx     #$00
	lda     __en_t
	jsr     asrax4
	sec
	sbc     #$03
	asl     a
;
; break;
;
	jmp     L1C45
;
; __asm__ ("ldx %v", gpit);
;
L18DF:	ldx     _gpit
;
; __asm__ ("inc %v, x", en_cur_d);
;
	inc     _en_cur_d,x
;
; __asm__ ("lda %v, x", en_cur_d);
;
	lda     _en_cur_d,x
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("sta %v, x", en_cur_d);
;
	sta     _en_cur_d,x
;
; __asm__ ("sta %v", _t);
;
L1C45:	sta     __t
;
; if (_t != 0xff) {
;
L1898:	lda     __t
	cmp     #$FF
	beq     L18E6
;
; cocos_add ();
;
	jsr     _cocos_add
;
; _en_ct = _en_maxct ? _en_maxct : ENEM_COCOS_FREQ;
;
	lda     __en_maxct
	beq     L18EB
	lda     __en_maxct
	jmp     L18ED
L18EB:	lda     #$96
L18ED:	sta     __en_ct
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM)
;
L18E6:	lda     _vertical_engine_type
	cmp     #$03
	jeq     L190A
;
; if (_en_t == 4 && gpjt && !pgotten && !pj) {
;
	lda     __en_t
	cmp     #$04
	jne     L190A
	lda     _gpjt
	jeq     L190A
	lda     _pgotten
	jne     L190A
	lda     _pj
	jne     L190A
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L18F7
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L18F9
	inx
L18F9:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L18F7
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L18FB
	inx
L18FB:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L18F8
	bne     L18F7
;
; pgotten = 1;
;
L18F8:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (FIXBITS - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L1901
	dex
L1901:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; pry = _en_y - 16; py = pry << FIXBITS;       
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L18F7:	lda     __en_my
	asl     a
	bcc     L1C3F
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L190F
	inx
L190F:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1C3F
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L1910
	inx
L1910:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L190B
	beq     L190B
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L1C3F:	lda     __en_my
	sec
	sbc     #$01
	bvs     L1914
	eor     #$80
L1914:	jpl     L190A
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1916
	inx
L1916:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L1917
	dex
L1917:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L190A
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L1918
	inx
L1918:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L190B
	bne     L190A
;
; pgotten = 1;
;
L190B:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (FIXBITS - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L191F
	dex
L191F:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; pry = _en_y - 16; py = pry << FIXBITS;
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
;
; _en_t != 4
;
L190A:	lda     __en_t
;
; && _en_t != 9
;
	cmp     #$04
	beq     L193E
	lda     __en_t
;
; ) {
;
	cmp     #$09
	beq     L193E
;
; if (hitter_on && hitter_hit_y) {
;
	lda     _hitter_on
	beq     L193E
	lda     _hitter_hit_y
	beq     L193E
;
; IF_COLLIDE_IN (hitter_hit_x, hitter_hit_y, _en_x, _en_y) {
;
	lda     _hitter_hit_x
	sta     __x1
	lda     _hitter_hit_y
	sta     __y1
	lda     __en_x
	sta     __x2
	lda     __en_y
	sta     __y2
	jsr     _collide_in
	tax
	beq     L193E
;
; enem_hit ();
;
	jsr     _enem_hit
;
; goto enems_move_loop_continue;
;
	jmp     L195B
;
; if (!touched) {
;
L193E:	lda     _touched
	bne     L195B
;
; IF_COLLIDE (prx, pry, _en_x, _en_y) {
;
	lda     _prx
	sta     __x1
	lda     _pry
	sta     __y1
	lda     __en_x
	sta     __x2
	lda     __en_y
	sta     __y2
	jsr     _collide
	tax
	beq     L195B
;
; if (_en_t != 4)
;
	lda     __en_t
	cmp     #$04
	beq     L195B
;
; touched = phit = 1;
;
	lda     #$01
	sta     _phit
	sta     _touched
;
; en_life [gpit] = 1; enem_hit ();
;
	ldy     _gpit
	sta     _en_life,y
	jsr     _enem_hit
;
; } else {
;
	jmp     L195B
;
; en_sprid = 0xff;
;
L1789:	lda     #$FF
L1C41:	sta     _en_sprid
;
; if (en_sprid == 0xff) oam_2x2_meta_spr (0, 240, gpit << 4, 0, 252);
;
L195B:	lda     _en_sprid
	cmp     #$FF
	bne     L195E
	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     _gpit
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$FC
;
; else oam_2x2_meta_spr (_en_x, _en_y + SPRITE_ADJUST, gpit << 4, spriteset_pals [en_sprid], en_sprid << 2);
;
	jmp     L1C46
L195E:	jsr     decsp4
	lda     __en_x
	ldy     #$03
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$07
	dey
	sta     (sp),y
	lda     _gpit
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	ldy     _en_sprid
	lda     _spriteset_pals,y
	ldy     #$00
	sta     (sp),y
	lda     _en_sprid
	asl     a
	asl     a
L1C46:	jsr     _oam_2x2_meta_spr
;
; enems_arrays_restore ();
;
	jsr     _enems_arrays_restore
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	inc     _gpit
	jmp     L175F

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill (0, 1024);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; pad_read ();
;
L197D:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_START|PAD_SELECT|PAD_B)) break;
;
	lda     _pad_this_frame
	and     #$0F
	beq     L197D
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title: near

.segment	"CODE"

;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; un_rle_screen2 ((unsigned char *) rlets_0);
;
	lda     #<(_rlets_0)
	ldx     #>(_rlets_0)
	jsr     pushax
	jsr     _un_rle_screen2
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; PR_STR (10, 2, "MOJON TWINS\"");
;
	lda     #$0A
	sta     __x
	lda     #$02
	sta     __y
	lda     #<(L0001)
	sta     __s
	lda     #>(L0001)
	sta     __s+1
	jsr     _pr_str
;
; PR_STR (10, 23, "START=NORMAL%SELECT=KIDS!");
;
	lda     #$0A
	sta     __x
	lda     #$17
	sta     __y
	lda     #<(L0001+13)
	sta     __s
	lda     #>(L0001+13)
	sta     __s+1
	jsr     _pr_str
;
; PR_STR (29, 14, "V1");
;
	lda     #$1D
	sta     __x
	lda     #$0E
	sta     __y
	lda     #<(L0001+39)
	sta     __s
	lda     #>(L0001+39)
	sta     __s+1
	jsr     _pr_str
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (M_TITLE);
;
	lda     #$00
	jsr     _music_play
;
; bat_out ();
;
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ fixed_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fixed_screen: near

.segment	"CODE"

;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; pal_spr (mypal_game_fg0);
;
	lda     #<(_mypal_game_fg0)
	ldx     #>(_mypal_game_fg0)
	jsr     _pal_spr
;
; if (rdn < 2) cls (); else un_rle_screen2 ((unsigned char *) rlets_1);
;
	lda     _rdn
	cmp     #$02
	bcs     L19B5
	jsr     _cls
	jmp     L19B8
L19B5:	lda     #<(_rlets_1)
	ldx     #>(_rlets_1)
	jsr     pushax
	jsr     _un_rle_screen2
;
; switch (rdn) {
;
L19B8:	lda     _rdn
;
; }
;
	beq     L19BF
	cmp     #$01
	beq     L19D1
	cmp     #$02
	jeq     L19EB
	cmp     #$03
	jeq     L1A05
	jmp     L19BD
;
; PR_STR (11, 14, (unsigned char *) (level_names + ((level << 3) + (level << 1) + level)));
;
L19BF:	lda     #$0B
	sta     __x
	lda     #$0E
	sta     __y
	ldx     #$00
	lda     _level
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _level
	asl     a
	bcc     L1C4E
	inx
	clc
L1C4E:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	clc
	adc     _level
	bcc     L1C4F
	inx
	clc
L1C4F:	adc     #<(_level_names)
	sta     __s
	txa
	adc     #>(_level_names)
	sta     __s+1
	jsr     _pr_str
;
; music_play (M_FIXED);
;
	lda     #$01
	jsr     _music_play
;
; break;
;
	jmp     L19BD
;
; PR_STR (11, 13, "GAME OVER!");
;
L19D1:	lda     #$0B
	sta     __x
	lda     #$0D
	sta     __y
	lda     #<(L0001+42)
	sta     __s
	lda     #>(L0001+42)
	sta     __s+1
	jsr     _pr_str
;
; if (kids_mode) {
;
	lda     _kids_mode
	beq     L19DC
;
; PR_STR (9, 15, "START=CONTINUE");
;
	lda     #$09
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+53)
	sta     __s
	lda     #>(L0001+53)
	sta     __s+1
	jsr     _pr_str
;
; music_play (M_GOVER);
;
L19DC:	lda     #$08
	jsr     _music_play
;
; break;
;
	jmp     L19BD
;
; PR_STR (7, 10, "  SORRY NINJAJAR%% BUT YER NOVIA IS%%IN ANOTHER CASTLE!%%     THE END?");
;
L19EB:	lda     #$07
	sta     __x
	lda     #$0A
	sta     __y
	lda     #<(L0001+68)
	sta     __s
	lda     #>(L0001+68)
	sta     __s+1
	jsr     _pr_str
;
; oam_2x2_meta_spr (32, 183, 0, 1, 0x4c);
;
	jsr     decsp4
	lda     #$20
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     #$4C
	jsr     _oam_2x2_meta_spr
;
; oam_2x2_meta_spr (208, 183, 16, 0, 0x14);
;
	jsr     decsp4
	lda     #$D0
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$14
	jsr     _oam_2x2_meta_spr
;
; music_play (M_ENDING);
;
	lda     #$09
	jsr     _music_play
;
; break;
;
	jmp     L19BD
;
; PR_STR (7, 10, "  SORRY NINJAJAR%% BUT YER NOVIA IS%%IN ANOTHER CASTLE!");
;
L1A05:	lda     #$07
	sta     __x
	lda     #$0A
	sta     __y
	lda     #<(L0001+139)
	sta     __s
	lda     #>(L0001+139)
	sta     __s+1
	jsr     _pr_str
;
; oam_2x2_meta_spr (32, 183, 0, 1, 0x4c);
;
	jsr     decsp4
	lda     #$20
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     #$4C
	jsr     _oam_2x2_meta_spr
;
; oam_2x2_meta_spr (208, 183, 16, 0, 0x14);
;
	jsr     decsp4
	lda     #$D0
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$14
	jsr     _oam_2x2_meta_spr
;
; bat_in ();
;
L19BD:	jsr     _bat_in
;
; bat_out ();
;
	jsr     _bat_out
;
; oam_hide_rest (0);
;
	lda     #$00
	jmp     _oam_hide_rest

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; set_rand (n_pant + 1);
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L1A23
	inx
L1A23:	jsr     _set_rand
;
; fade_delay = 1;
;
	lda     #$01
	sta     _fade_delay
;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L1A26
	jsr     _fade_out
	jmp     L1A29
L1A26:	lda     #$00
	sta     _ft
;
; enems_load ();
;
L1A29:	jsr     _enems_load
;
; f_zone_ac = 0;
;
	lda     #$00
	sta     _f_zone_ac
;
; ppu_off ();
;
	jsr     _ppu_off
;
; exiting_screen ();
;
	jsr     _exiting_screen
;
; draw_scr ();
;
	jsr     _draw_scr
;
; hotspots_create ();
;
	jsr     _hotspots_create
;
; pscreenissafe = 1;
;
	lda     #$01
	sta     _pscreenissafe
;
; entering_screen ();
;
	jsr     _entering_screen
;
; vram_write (attr_table, 0x23c0, 48);
;
	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$30
	jsr     _vram_write
;
; enems_move ();
;
	jsr     _enems_move
;
; player_move ();
;
	jsr     _player_move
;
; if (psafe) player_set_safe ();
;
	lda     _psafe
	beq     L1A3C
	jsr     _player_set_safe
;
; hitter_on = 0;
;
L1A3C:	lda     #$00
	sta     _hitter_on
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; __asm__ ("lda %v", c_ppu_mask);
;
	lda     _c_ppu_mask
;
; __asm__ ("and %v", ppu_mask_xor_bits_fiddle);
;
	and     _ppu_mask_xor_bits_fiddle
;
; __asm__ ("beq %g", init_ppu_mask_nope);
;
	beq     L1A45
;
; __asm__ ("lda %v", c_ppu_mask);
;
	lda     _c_ppu_mask
;
; __asm__ ("eor %v", ppu_mask_xor_bits_fiddle);
;
	eor     _ppu_mask_xor_bits_fiddle
;
; __asm__ ("jmp %g", init_ppu_mask_set);
;
	jmp     L1A49
;
; __asm__ ("lda %v", c_ppu_mask);
;
L1A45:	lda     _c_ppu_mask
;
; __asm__ ("sta $2001");
;
L1A49:	sta     $2001
;
; cocos_init ();
;
	jsr     _cocos_init
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM)
;
	lda     _vertical_engine_type
	cmp     #$03
	jne     _fade_in
;
; player_set_safe ();
;
	jsr     _player_set_safe
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; n_pant = l_scr_ini [level];
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; on_pant = 99;
;
	lda     #$63
	sta     _on_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; bolts_load ();
;
	jsr     _bolts_load
;
; player_init ();
;
	jsr     _player_init
;
; memfill (flags, 0, MAX_FLAGS);
;
	jsr     decsp3
	lda     #<(_flags)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_flags)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$08
	jsr     _memfill
;
; entering_level ();
;
	jsr     _entering_level
;
; half_life = win_game = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_game
	sta     _half_life
;
; olife = oammo = oobjs = okeys = 0x99;
;
	lda     #$99
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; pneedsreset = 0;
;
	lda     #$00
	sta     _pneedsreset
;
; music_play (l_music [level]);
;
	ldy     _level
	lda     _l_music,y
	jsr     _music_play
;
; set_vram_update (update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; update_list [0] = 0xff;
;
	lda     #$FF
	sta     _update_list
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ft = 1; while (1) {
;
	lda     #$01
	sta     _ft
;
; half_life ^= 1;
;
L1A78:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; pad_read ();
;
	jsr     _pad_read
;
; if (paused == 0) {
;
	lda     _paused
	jne     L1A81
;
; phit = 0;
;
	sta     _phit
;
; rdx = prx + 8; rdy = pry + 8;
;
	lda     _prx
	clc
	adc     #$08
	sta     _rdx
	lda     _pry
	clc
	adc     #$08
	sta     _rdy
;
; firezoned = (f_zone_ac && (rdx >= fzx1 && rdx <= fzx2 && rdy >= fzy1 && rdy <= fzy2));
;
	lda     _f_zone_ac
	beq     L1A8E
	lda     _rdx
	cmp     _fzx1
	bcc     L1A8E
	lda     _rdx
	sec
	sbc     _fzx2
	sta     tmp1
	lda     tmp1
	beq     L1C54
	bcs     L1A8E
L1C54:	lda     _rdy
	cmp     _fzy1
	bcc     L1A8E
	lda     _rdy
	sec
	sbc     _fzy2
	bcc     L1A8D
	beq     L1A8D
L1A8E:	lda     #$00
	jmp     L1A92
L1A8D:	lda     #$01
L1A92:	sta     _firezoned
;
; if ((pad_this_frame & PAD_B) || firezoned) 
;
	lda     _pad_this_frame
	and     #$02
	bne     L1A94
	lda     _firezoned
	beq     L1A93
;
; press_fire_at_screen ();
;
L1A94:	jsr     _press_fire_at_screen
;
; player_move ();
;
L1A93:	jsr     _player_move
;
; if (hitter_on) hitter_do ();
;
	lda     _hitter_on
	beq     L1A99
	jsr     _hitter_do
;
; else oam_spr (0, 240, 0, 0, 252);
;
	jmp     L1A9C
L1A99:	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$FC
	jsr     _oam_spr
;
; enems_move ();
;
L1A9C:	jsr     _enems_move
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (do_process_breakable) breakable_do_anim ();
;
L1A81:	lda     _do_process_breakable
	beq     L1AA5
	jsr     _breakable_do_anim
;
; if (hrt) {
;
L1AA5:	lda     _hrt
	jeq     L1ADF
;
; IF_COLLIDE_IN (prx + 8, pry + 8, hrx, hry) {
;
	lda     _prx
	clc
	adc     #$08
	sta     __x1
	lda     _pry
	clc
	adc     #$08
	sta     __y1
	lda     _hrx
	sta     __x2
	lda     _hry
	sta     __y2
	jsr     _collide_in
	tax
	jeq     L1ADF
;
; _x = hrx >> 4; _y = hry >> 4; _t = map_buff [(hry & 0xf0) | _x]; map_set ();     
;
	ldx     #$00
	lda     _hrx
	jsr     asrax4
	sta     __x
	ldx     #$00
	lda     _hry
	jsr     asrax4
	sta     __y
	lda     _hry
	and     #$F0
	sta     ptr1
	lda     __x
	ora     ptr1
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     __t
	jsr     _map_set
;
; rda = 0; switch (hrt) {
;
	lda     #$00
	sta     _rda
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L1AC9
	cmp     #$02
	beq     L1ACF
	cmp     #$03
	beq     L1AD4
	jmp     L1AC7
;
; ++ pobjs;
;
L1AC9:	inc     _pobjs
;
; on_obj_got ();
;
	jsr     _on_obj_got
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L1C55
;
; ++ pkeys;
;
L1ACF:	inc     _pkeys
;
; rda = SFX_USE;
;
	lda     #$03
;
; break;
;
	jmp     L1C55
;
; plife += PLAYER_REFILL;
;
L1AD4:	inc     _plife
;
; rda = SFX_USE;
;
L1C55:	sta     _rda
;
; hry = 240;
;
L1AC7:	lda     #$F0
	sta     _hry
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	lda     #$00
	sta     _hact,y
;
; if (rda) sfx_play (rda, 1);
;
	lda     _rda
	beq     L1ADF
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pad_this_frame & PAD_START) {
;
L1ADF:	lda     _pad_this_frame
	and     #$08
	beq     L1AE4
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; music_pause (paused);
;
	jsr     _music_pause
;
; pal_bright (4 - paused);    
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; if (prx == 0 && pvx < 0) {
;
L1AE4:	lda     _prx
	bne     L1AEC
	lda     _pvx
	asl     a
	bcc     L1AEC
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; prx = 240; px = prx << FIXBITS;
;
	lda     #$F0
;
; } else if (prx == 240 && pvx > 0) {
;
	jmp     L1C5B
L1AEC:	lda     _prx
	cmp     #$F0
	bne     L1AF7
	lda     _pvx
	sec
	sbc     #$01
	bvs     L1AFB
	eor     #$80
L1AFB:	bpl     L1AF7
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; prx = 0; px = prx << FIXBITS;
;
	lda     #$00
L1C5B:	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (pry > 192 && pry <= 248 && pvy < 0 && n_pant >= c_map_w) {
;
L1AF7:	lda     _pry
	cmp     #$C1
	bcc     L1B02
	lda     _pry
	cmp     #$F9
	bcs     L1B02
	lda     _pvy
	asl     a
	bcc     L1B02
	ldx     #$00
	lda     _n_pant
	cmp     _c_map_w
	bcc     L1B02
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; pry = 176; py = pry << FIXBITS;
;
	lda     #$B0
	sta     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; } else if (pry >= 176 && pry < 192 && pvy > 0) {
;
	jmp     L1B0E
L1B02:	lda     _pry
	cmp     #$B0
	bcc     L1B0E
	lda     _pry
	cmp     #$C0
	bcs     L1B0E
	lda     _pvy
	sec
	sbc     #$01
	bvs     L1B12
	eor     #$80
L1B12:	bpl     L1B0E
;
; n_pant += c_map_w;
;
	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; pry = py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
	sta     _pry
;
; if (on_pant != n_pant) flick_screen ();
;
L1B0E:	lda     _n_pant
	cmp     _on_pant
	beq     L1B19
	jsr     _flick_screen
;
; if (okeys != pkeys) {
;
L1B19:	lda     _pkeys
	cmp     _okeys
	beq     L1B1C
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; P_T (KEYS_X, KEYS_Y, pkeys);
;
	lda     #$1C
	sta     __x
	lda     #$1A
	sta     __y
	lda     _pkeys
	sta     __t
	jsr     _p_t
;
; if (olife != plife) {
;
L1B1C:	lda     _plife
	cmp     _olife
	beq     L1B2A
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; P_T (LIFE_X, LIFE_Y, plife);
;
	lda     #$04
	sta     __x
	lda     #$1A
	sta     __y
	lda     _plife
	sta     __t
	jsr     _p_t
;
; custom_hud ();
;
L1B2A:	jsr     _custom_hud
;
; if (f1 && !paused) {
;
	lda     _f1
	jeq     L1B55
	lda     _paused
	jne     L1B55
;
; if (lava_ticker) -- lava_ticker; else {
;
	lda     _lava_ticker
	beq     L1B3D
	dec     _lava_ticker
	jmp     L1B48
;
; sfx_play (SFX_BREAKB, 0);
;
L1B3D:	lda     #$11
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; lava_ticker = lava_delay;
;
	lda     _lava_delay
	sta     _lava_ticker
;
; lava_height --;
;
	lda     _lava_height
	sec
	sbc     #$01
	sta     _lava_height
;
; lava_calc ();
;
	jsr     _lava_calc
;
; if (lava_on_screen) lava_draw_buff ();  
;
	lda     _lava_on_screen
	beq     L1B48
	jsr     _lava_draw_buff
;
; rda = frame_counter & 0xf;
;
L1B48:	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; scroll (jitter [rda], 240-8 + jitter [15-rda]);
;
	lda     #<(_jitter)
	ldx     #>(_jitter)
	clc
	adc     _rda
	bcc     L1B50
	inx
L1B50:	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L1B51
	dex
L1B51:	jsr     pushax
	lda     #$0F
	sec
	sbc     _rda
	clc
	adc     #<(_jitter)
	tay
	lda     #$00
	adc     #>(_jitter)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	clc
	adc     #$E8
	bcc     L1B54
	inx
L1B54:	jsr     _scroll
;
; if (pry <= 176 && pry + scrpixoffset > lava_height_pixels - 12) {
;
	lda     _pry
	cmp     #$B1
	bcs     L1B55
	lda     _pry
	clc
	adc     _scrpixoffset
	pha
	lda     #$00
	adc     _scrpixoffset+1
	tax
	pla
	jsr     pushax
	lda     _lava_height_pixels
	ldx     _lava_height_pixels+1
	sec
	sbc     #$0C
	bcs     L1B58
	dex
L1B58:	jsr     tosicmp
	beq     L1B55
	bcc     L1B55
;
; pstate = EST_NORMAL; phit = 1; pneedsreset = 1;
;
	lda     #$00
	sta     _pstate
	lda     #$01
	sta     _phit
	sta     _pneedsreset
;
; close_update_cycle ();
;
L1B55:	jsr     _close_update_cycle
;
; if (pstate != EST_FLICKERING) if (phit) player_kill ();
;
	lda     _pstate
	cmp     #$02
	beq     L1B63
	lda     _phit
	beq     L1B63
	jsr     _player_kill
;
; if (on_pant != n_pant) {
;
L1B63:	lda     _n_pant
	cmp     _on_pant
	beq     L1B66
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if ((pad & (PAD_UP|PAD_B|PAD_SELECT)) == (PAD_UP|PAD_B|PAD_SELECT)) win_game = 1;
;
L1B66:	lda     _pad
	and     #$16
	cmp     #$16
	bne     L1B6B
	lda     #$01
	sta     _win_game
;
; if (game_over || win_game || pneedsreset) break;
;
L1B6B:	lda     _game_over
	bne     L1A79
	lda     _win_game
	bne     L1A79
	lda     _pneedsreset
	jeq     L1A78
;
; music_stop (); 
;
L1A79:	jsr     _music_stop
;
; set_vram_update (0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; scroll (0, 240-8);
;
	jsr     push0
	lda     #$E8
	jsr     _scroll
;
; ppu_mask_xor_bits_fiddle = ppu_system () ? 0x60 : 0;
;
	jsr     _ppu_system
	stx     tmp1
	ora     tmp1
	beq     L1B86
	lda     #$60
L1B86:	sta     _ppu_mask_xor_bits_fiddle
;
; title ();
;
L1B88:	jsr     _title
;
; kids_mode = (pad_this_frame & PAD_SELECT);
;
	lda     _pad_this_frame
	and     #$04
	sta     _kids_mode
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; plife = kids_mode ? 10 : 5;
;
	lda     _kids_mode
	beq     L1B93
	lda     #$0A
	jmp     L1B95
L1B93:	lda     #$05
L1B95:	sta     _plife
;
; entering_game ();
;
	jsr     _entering_game
;
; rdn = 0; fixed_screen ();
;
L1B98:	lda     #$00
	sta     _rdn
	jsr     _fixed_screen
;
; unrle_vram (hud_rle, 0x2000);
;
	lda     #<(_hud_rle)
	ldx     #>(_hud_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; if (kids_mode) {
;
	lda     _kids_mode
	beq     L1BA1
;
; vram_adr (0x2000+26*32+1);
;
	ldx     #$23
	lda     #$41
	jsr     _vram_adr
;
; VRAM_PUTN (62);
;
	lda     #$3E
	sta     $2007
;
; __asm__ ("ldx %v", level);
;
L1BA1:	ldx     _level
;
; __asm__ ("lda %v, x", l_bolts_max);
;
	lda     _l_bolts_max,x
;
; __asm__ ("sta %v", c_bolts_max);
;
	sta     _c_bolts_max
;
; __asm__ ("lda %v, x", l_alt_bg);
;
	lda     _l_alt_bg,x
;
; __asm__ ("sta %v", c_alt_bg);
;
	sta     _c_alt_bg
;
; __asm__ ("lda %v, x", l_map_w);
;
	lda     _l_map_w,x
;
; __asm__ ("sta %v", c_map_w);
;
	sta     _c_map_w
;
; __asm__ ("lda %v, x", l_ppu_mask);
;
	lda     _l_ppu_mask,x
;
; __asm__ ("sta %v", c_ppu_mask);
;
	sta     _c_ppu_mask
;
; __asm__ ("lda %v, x", l_map_chr_rom_bank);
;
	lda     _l_map_chr_rom_bank,x
;
; __asm__ ("sta %v", c_map_chr_rom_bank);
;
	sta     _c_map_chr_rom_bank
;
; __asm__ ("lda %v", level);
;
	lda     _level
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", l_map);
;
	lda     _l_map,y
;
; __asm__ ("sta %v", c_map);
;
	sta     _c_map
;
; __asm__ ("lda %v+1, y", l_map);
;
	lda     _l_map+1,y
;
; __asm__ ("sta %v+1", c_map);
;
	sta     _c_map+1
;
; __asm__ ("lda %v, y", l_locks);
;
	lda     _l_locks,y
;
; __asm__ ("sta %v", c_locks);
;
	sta     _c_locks
;
; __asm__ ("lda %v+1, y", l_locks);
;
	lda     _l_locks+1,y
;
; __asm__ ("sta %v+1", c_locks);
;
	sta     _c_locks+1
;
; __asm__ ("lda %v, y", l_enems);
;
	lda     _l_enems,y
;
; __asm__ ("sta %v", c_enems);
;
	sta     _c_enems
;
; __asm__ ("lda %v+1, y", l_enems);
;
	lda     _l_enems+1,y
;
; __asm__ ("sta %v+1", c_enems);
;
	sta     _c_enems+1
;
; __asm__ ("lda %v, y", l_hotspots);
;
	lda     _l_hotspots,y
;
; __asm__ ("sta %v", c_hotspots);
;
	sta     _c_hotspots
;
; __asm__ ("lda %v+1, y", l_hotspots);
;
	lda     _l_hotspots+1,y
;
; __asm__ ("sta %v+1", c_hotspots);
;
	sta     _c_hotspots+1
;
; __asm__ ("lda %v, y", l_tsmap);
;
	lda     _l_tsmap,y
;
; __asm__ ("sta %v", c_tsmap);
;
	sta     _c_tsmap
;
; __asm__ ("lda %v+1, y", l_tsmap);
;
	lda     _l_tsmap+1,y
;
; __asm__ ("sta %v+1", c_tsmap);
;
	sta     _c_tsmap+1
;
; __asm__ ("lda %v, y", l_enems_ssmap);
;
	lda     _l_enems_ssmap,y
;
; __asm__ ("sta %v", c_enems_ssmap);
;
	sta     _c_enems_ssmap
;
; __asm__ ("lda %v+1, y", l_enems_ssmap);
;
	lda     _l_enems_ssmap+1,y
;
; __asm__ ("sta %v+1", c_enems_ssmap);
;
	sta     _c_enems_ssmap+1
;
; __asm__ ("lda %v, y", l_pal_bg);
;
	lda     _l_pal_bg,y
;
; __asm__ ("ldx %v+1, y", l_pal_bg);
;
	ldx     _l_pal_bg+1,y
;
; __asm__ ("jsr %v", pal_bg);
;
	jsr     _pal_bg
;
; __asm__ ("lda %v", level);
;
	lda     _level
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", l_pal_spr);
;
	lda     _l_pal_spr,y
;
; __asm__ ("ldx %v+1, y", l_pal_spr);
;
	ldx     _l_pal_spr+1,y
;
; __asm__ ("jsr %v", pal_spr);
;
	jsr     _pal_spr
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L1BD8
;
; rdn = 1; fixed_screen ();
;
	lda     #$01
	sta     _rdn
	jsr     _fixed_screen
;
; if (!(kids_mode && (pad_this_frame & PAD_START))) break;
;
	lda     _kids_mode
	beq     L1BE2
	lda     _pad_this_frame
	and     #$08
	beq     L1BE2
	lda     #$01
L1BE2:	jsr     bnega
	jne     L1B88
;
; else plife = kids_mode ? 10 : 5;
;
	lda     _kids_mode
	beq     L1BE6
	lda     #$0A
	jmp     L1BE8
L1BE6:	lda     #$05
L1BE8:	sta     _plife
;
; } else if (!pneedsreset) {
;
	jmp     L1B98
L1BD8:	lda     _pneedsreset
	jne     L1B98
;
; ++ level;
;
	inc     _level
;
; if (level == MAX_LEVELS) {
;
	lda     _level
	cmp     #$0C
	jne     L1B98
;
; rdn = 2; fixed_screen ();
;
	lda     #$02
	sta     _rdn
	jsr     _fixed_screen
;
; break;
;
	jmp     L1B88

.endproc

