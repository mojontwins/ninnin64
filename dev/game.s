;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_2x2_meta_spr
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_unrle_vram
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.export		_behs
	.export		_mypal_game_bg0
	.export		_mypal_game_bg1
	.export		_mypal_game_bg2
	.export		_mypal_game_bg3
	.export		_mypal_game_bg4
	.export		_mypal_game_bg5
	.export		_mypal_game_bg6
	.export		_mypal_game_bg7
	.export		_mypal_game_bg8
	.export		_mypal_game_fg0
	.export		_mypal_game_fg1
	.export		_mypal_game_fg2
	.export		_mypal_game_fg3
	.export		_mypal_game_fg4
	.export		_mypal_game_fg5
	.export		_tileset_pals
	.export		_spriteset_pals
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_03
	.export		_scr_0_04
	.export		_scr_0_05
	.export		_scr_0_06
	.export		_scr_0_07
	.export		_scr_0_08
	.export		_scr_0_09
	.export		_scr_0_0c
	.export		_scr_0_0d
	.export		_scr_0_0e
	.export		_scr_0_0f
	.export		_map_0
	.export		_scr_1_00
	.export		_scr_1_01
	.export		_scr_1_02
	.export		_scr_1_03
	.export		_scr_1_04
	.export		_scr_1_08
	.export		_scr_1_09
	.export		_scr_1_0a
	.export		_scr_1_0b
	.export		_scr_1_0c
	.export		_scr_1_0d
	.export		_scr_1_0e
	.export		_scr_1_0f
	.export		_scr_1_10
	.export		_scr_1_12
	.export		_scr_1_13
	.export		_scr_1_14
	.export		_map_1
	.export		_map_1_locks
	.export		_scr_2_02
	.export		_scr_2_03
	.export		_scr_2_04
	.export		_scr_2_08
	.export		_scr_2_09
	.export		_scr_2_0a
	.export		_scr_2_0b
	.export		_scr_2_0c
	.export		_scr_2_0d
	.export		_scr_2_0e
	.export		_scr_2_0f
	.export		_scr_2_10
	.export		_scr_2_11
	.export		_scr_2_12
	.export		_scr_2_14
	.export		_scr_2_15
	.export		_map_2
	.export		_map_2_locks
	.export		_scr_3_00
	.export		_scr_3_01
	.export		_scr_3_02
	.export		_scr_3_03
	.export		_scr_3_04
	.export		_scr_3_05
	.export		_scr_3_06
	.export		_scr_3_07
	.export		_scr_3_09
	.export		_scr_3_0b
	.export		_scr_3_0c
	.export		_scr_3_0d
	.export		_scr_3_0e
	.export		_scr_3_0f
	.export		_map_3
	.export		_map_3_locks
	.export		_scr_4_00
	.export		_scr_4_01
	.export		_scr_4_02
	.export		_scr_4_03
	.export		_scr_4_04
	.export		_scr_4_05
	.export		_scr_4_06
	.export		_scr_4_07
	.export		_scr_4_08
	.export		_scr_4_09
	.export		_scr_4_0a
	.export		_scr_4_0b
	.export		_map_4
	.export		_scr_5_00
	.export		_scr_5_01
	.export		_scr_5_02
	.export		_scr_5_03
	.export		_scr_5_04
	.export		_scr_5_05
	.export		_scr_5_06
	.export		_scr_5_07
	.export		_scr_5_08
	.export		_scr_5_09
	.export		_scr_5_0a
	.export		_scr_5_0b
	.export		_map_5
	.export		_scr_6_00
	.export		_scr_6_01
	.export		_scr_6_04
	.export		_scr_6_05
	.export		_scr_6_06
	.export		_scr_6_07
	.export		_scr_6_08
	.export		_scr_6_09
	.export		_scr_6_0a
	.export		_scr_6_0b
	.export		_scr_6_0c
	.export		_scr_6_0d
	.export		_scr_6_0e
	.export		_scr_6_0f
	.export		_map_6
	.export		_map_6_locks
	.export		_scr_7_01
	.export		_scr_7_05
	.export		_scr_7_06
	.export		_scr_7_07
	.export		_scr_7_08
	.export		_scr_7_09
	.export		_scr_7_0b
	.export		_scr_7_0d
	.export		_scr_7_0e
	.export		_scr_7_0f
	.export		_scr_7_10
	.export		_scr_7_11
	.export		_scr_7_12
	.export		_scr_7_13
	.export		_scr_7_14
	.export		_scr_7_15
	.export		_scr_7_16
	.export		_scr_7_17
	.export		_map_7
	.export		_map_7_locks
	.export		_scr_8_00
	.export		_scr_8_01
	.export		_scr_8_02
	.export		_scr_8_03
	.export		_scr_8_04
	.export		_scr_8_05
	.export		_scr_8_06
	.export		_scr_8_07
	.export		_scr_8_08
	.export		_scr_8_09
	.export		_scr_8_0a
	.export		_scr_8_0b
	.export		_scr_8_0c
	.export		_scr_8_0d
	.export		_scr_8_0e
	.export		_scr_8_0f
	.export		_scr_8_10
	.export		_scr_8_11
	.export		_scr_8_12
	.export		_scr_8_13
	.export		_map_8
	.export		_scr_9_00
	.export		_scr_9_01
	.export		_scr_9_02
	.export		_scr_9_03
	.export		_scr_9_04
	.export		_scr_9_05
	.export		_scr_9_06
	.export		_scr_9_08
	.export		_scr_9_09
	.export		_map_9
	.export		_scr_A_00
	.export		_scr_A_02
	.export		_scr_A_04
	.export		_scr_A_06
	.export		_scr_A_07
	.export		_scr_A_08
	.export		_scr_A_0a
	.export		_scr_A_0b
	.export		_scr_A_0d
	.export		_scr_A_0e
	.export		_scr_A_0f
	.export		_scr_A_10
	.export		_scr_A_11
	.export		_scr_A_12
	.export		_scr_A_13
	.export		_map_A
	.export		_enems_0_01
	.export		_enems_0_02
	.export		_enems_0_03
	.export		_enems_0_05
	.export		_enems_0_06
	.export		_enems_0_07
	.export		_enems_0_08
	.export		_enems_0_09
	.export		_enems_0_0d
	.export		_enems_0_0e
	.export		_enems_0_0f
	.export		_enems_0
	.export		_hotspots_0
	.export		_enems_1_00
	.export		_enems_1_01
	.export		_enems_1_02
	.export		_enems_1_03
	.export		_enems_1_04
	.export		_enems_1_0a
	.export		_enems_1_0b
	.export		_enems_1_0c
	.export		_enems_1_0d
	.export		_enems_1_0f
	.export		_enems_1_10
	.export		_enems_1_11
	.export		_enems_1_13
	.export		_enems_1
	.export		_hotspots_1
	.export		_enems_2_02
	.export		_enems_2_03
	.export		_enems_2_08
	.export		_enems_2_09
	.export		_enems_2_0a
	.export		_enems_2_0b
	.export		_enems_2_0c
	.export		_enems_2_0d
	.export		_enems_2_0e
	.export		_enems_2_0f
	.export		_enems_2_12
	.export		_enems_2_14
	.export		_enems_2_15
	.export		_enems_2
	.export		_hotspots_2
	.export		_enems_3_00
	.export		_enems_3_02
	.export		_enems_3_03
	.export		_enems_3_04
	.export		_enems_3_05
	.export		_enems_3_06
	.export		_enems_3_07
	.export		_enems_3_08
	.export		_enems_3_0a
	.export		_enems_3_0b
	.export		_enems_3_0c
	.export		_enems_3_0d
	.export		_enems_3_0e
	.export		_enems_3_0f
	.export		_enems_3
	.export		_hotspots_3
	.export		_enems_4_00
	.export		_enems_4_01
	.export		_enems_4_02
	.export		_enems_4_03
	.export		_enems_4_04
	.export		_enems_4_05
	.export		_enems_4_06
	.export		_enems_4_07
	.export		_enems_4_08
	.export		_enems_4_09
	.export		_enems_4_0a
	.export		_enems_4_0b
	.export		_enems_4
	.export		_hotspots_4
	.export		_enems_5_00
	.export		_enems_5_01
	.export		_enems_5_02
	.export		_enems_5_03
	.export		_enems_5_04
	.export		_enems_5_05
	.export		_enems_5_06
	.export		_enems_5_07
	.export		_enems_5_08
	.export		_enems_5_09
	.export		_enems_5_0a
	.export		_enems_5_0b
	.export		_enems_5
	.export		_hotspots_5
	.export		_enems_6_00
	.export		_enems_6_01
	.export		_enems_6_04
	.export		_enems_6_05
	.export		_enems_6_06
	.export		_enems_6_07
	.export		_enems_6_08
	.export		_enems_6_0a
	.export		_enems_6_0b
	.export		_enems_6_0c
	.export		_enems_6_0d
	.export		_enems_6_0e
	.export		_enems_6_0f
	.export		_enems_6
	.export		_hotspots_6
	.export		_enems_7_01
	.export		_enems_7_03
	.export		_enems_7_05
	.export		_enems_7_08
	.export		_enems_7_09
	.export		_enems_7_0b
	.export		_enems_7_0d
	.export		_enems_7_0e
	.export		_enems_7_0f
	.export		_enems_7_10
	.export		_enems_7_12
	.export		_enems_7_13
	.export		_enems_7_14
	.export		_enems_7_15
	.export		_enems_7_16
	.export		_enems_7_17
	.export		_enems_7
	.export		_hotspots_7
	.export		_enems_8_00
	.export		_enems_8_01
	.export		_enems_8_02
	.export		_enems_8_03
	.export		_enems_8_04
	.export		_enems_8_05
	.export		_enems_8_06
	.export		_enems_8_07
	.export		_enems_8_08
	.export		_enems_8_0a
	.export		_enems_8_0b
	.export		_enems_8_0c
	.export		_enems_8_0d
	.export		_enems_8_0e
	.export		_enems_8_0f
	.export		_enems_8_10
	.export		_enems_8_11
	.export		_enems_8_12
	.export		_enems_8_13
	.export		_enems_8
	.export		_hotspots_8
	.export		_enems_9_00
	.export		_enems_9_02
	.export		_enems_9_03
	.export		_enems_9_04
	.export		_enems_9_05
	.export		_enems_9_06
	.export		_enems_9_07
	.export		_enems_9_08
	.export		_enems_9_09
	.export		_enems_9
	.export		_hotspots_9
	.export		_enems_A_02
	.export		_enems_A_04
	.export		_enems_A_06
	.export		_enems_A_08
	.export		_enems_A_0a
	.export		_enems_A_0b
	.export		_enems_A_0d
	.export		_enems_A_0e
	.export		_enems_A_0f
	.export		_enems_A_10
	.export		_enems_A
	.export		_hotspots_A
	.export		_rlets_0
	.export		_rlets_1
	.export		_tsmap0
	.export		_tsmap1
	.export		_tsmap2
	.export		_tsmap3
	.export		_tsmap4
	.export		_tsmap5
	.export		_tsmap6
	.export		_tsmap7
	.export		_tsmap8
	.export		_enems_ssmap0
	.export		_enems_ssmap1
	.export		_enems_ssmap2
	.export		_enems_ssmap3
	.export		_enems_ssmap4
	.export		_enems_ssmap5
	.export		_l_map
	.export		_l_map_size
	.export		_l_map_w
	.export		_l_locks
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_pal_bg
	.export		_l_pal_spr
	.export		_l_bolts_max
	.export		_l_tsmap
	.export		_l_enems_ssmap
	.export		_l_alt_bg
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_pfacing
	.export		_l_ppu_mask
	.export		_hud_rle
	.export		_i
	.export		_gpit
	.export		_gpjt
	.export		_gpaux
	.export		_pad
	.export		_pad_this_frame
	.export		_half_life
	.export		_game_over
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_level
	.export		_gp_gen
	.export		_gp_map
	.export		_ul
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdct
	.export		_rdi
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rdn
	.export		_rlem
	.export		_rleb
	.export		_rler
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_t1
	.export		_t2
	.export		_at1
	.export		_at2
	.export		__en_x
	.export		__en_y
	.export		__en_mx
	.export		__en_my
	.export		__en_touched
	.export		__en_cttouched
	.export		__en_t
	.export		__en_s
	.export		__en_ct
	.export		__en_maxct
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_status
	.export		_en_t
	.export		_en_s
	.export		_en_life
	.export		_en_ct
	.export		_en_fr
	.export		_en_sprid
	.export		_en_collx
	.export		_en_colly
	.export		_touched
	.export		_en_touched
	.export		_en_cttouched
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_pobjs
	.export		_plife
	.export		_pkeys
	.export		_pkilled
	.export		_pneedsreset
	.export		_pammo
	.export		_pfiring
	.export		_pgtmx
	.export		_pgtmy
	.export		_player_ax
	.export		_player_rx
	.export		_player_vx_max
	.export		_prx
	.export		_pry
	.export		_hitv
	.export		_hith
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_enems_offset
	.export		_c_player_offset
	.export		_ts_offs
	.export		_c_alt_bg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_map_w
	.export		_c_tsmap
	.export		_c_enems_ssmap
	.export		__x
	.export		__y
	.export		__t
	.export		__n
	.export		__x1
	.export		__y1
	.export		__x2
	.export		__y2
	.export		__s
	.export		_f_zone_ac
	.export		_fzx1
	.export		_fzx2
	.export		_fzy1
	.export		_fzy2
	.export		_firezoned
	.export		_hitter_on
	.export		_hitter_x
	.export		_hitter_y
	.export		_hitter_frame
	.export		_hitter_hit_x
	.export		_hitter_hit_y
	.export		__coco_x
	.export		__coco_y
	.export		_coco_it
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_attr_table
	.export		_kids_mode
	.export		_c_ppu_mask
	.export		_ppu_mask_xor_bits_fiddle
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_fade_delay
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_scrpixoffset
	.export		_lkyx
	.export		_lknp
	.export		_lkact
	.export		_yx
	.export		_win_game
	.export		_flags
	.export		_script_something_done
	.export		_c_baddies_count
	.export		_en_maxct
	.export		_en_cur_d
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_psafe
	.export		_pscreenissafe
	.export		_c_bolts_max
	.export		_paused
	.export		_coco_slots_i
	.export		_coco_slots
	.export		_coco_x
	.export		_coco_y
	.export		_coco_mx
	.export		_coco_my
	.export		_pstate
	.export		_pctstate
	.export		_phit
	.export		_pslippery
	.export		_pquicksanded
	.export		_opcoins
	.export		_pcoins
	.export		_screen_clear_list
	.export		_ray_tiles
	.export		_face_tiles
	.export		_face_count
	.export		_face_cleared
	.export		_f0
	.export		_f1
	.export		_f2
	.export		_deco_flags
	.export		_alm0
	.export		_alm1
	.export		_level_names
	.export		_lava_top
	.export		_lava_body
	.export		_lava_delay
	.export		_jitter
	.export		_lava_ticker
	.export		_lava_height
	.export		_lava_cur_height
	.export		_lava_on_screen
	.export		_lava_height_pixels
	.export		_shl5
	.export		_fade_out
	.export		_fade_in
	.export		_bitmasks
	.export		_do_attr_table
	.export		_calc_tile
	.export		_calc_gp_addr
	.export		_draw_tile
	.export		_ul_put2c_hrd
	.export		_ul_put_t_inc
	.export		_update_list_tile
	.export		_p_t
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_un_rle_paint
	.export		_un_rle_screen2
	.export		_pad_read
	.export		_attr
	.export		_qtile
	.export		_map_set
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_cm_two_points
	.export		_close_update_cycle
	.export		_attr_list_mod
	.export		_clear_tile_rdn
	.export		_lava_launch
	.export		_lava_draw_off
	.export		_lava_draw_buff
	.export		_lava_calc
	.export		_bits
	.export		_entering_game
	.export		_entering_level
	.export		_flick_screen
	.export		_exiting_screen
	.export		_entering_screen
	.export		_press_fire_at_screen
	.export		_custom_hud
	.export		_on_tile_break
	.export		_on_tile_get
	.export		_on_obj_got
	.export		_on_enem_killed
	.export		_bolts_load
	.export		_bolt_clear
	.export		_breakable_do_anim
	.export		_break_wall
	.export		_hotspots_load
	.export		_hotspots_create
	.export		_hitter_offs
	.export		_hitter_do
	.export		__mx
	.export		__my
	.export		_cocos_init
	.export		_cocos_add
	.export		_cocos_do
	.export		_player_frames
	.export		__pgtmx
	.export		_player_set_safe
	.export		_player_init
	.export		_player_kill
	.export		_process_tile
	.export		_player_move
	.export		_enems_arrays_restore
	.export		_enems_load
	.export		_enem_hit
	.export		_enems_move
	.export		_cls
	.export		_bat_in
	.export		_bat_out
	.export		_title
	.export		_fixed_screen
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_behs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$18
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$29
	.byte	$02
	.byte	$48
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$80
_mypal_game_bg0:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$0B
	.byte	$19
	.byte	$1D
	.byte	$06
	.byte	$26
	.byte	$36
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$38
_mypal_game_bg1:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$29
	.byte	$1D
	.byte	$06
	.byte	$26
	.byte	$36
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$38
_mypal_game_bg2:
	.byte	$1D
	.byte	$03
	.byte	$00
	.byte	$33
	.byte	$1D
	.byte	$02
	.byte	$12
	.byte	$32
	.byte	$1D
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$38
_mypal_game_bg3:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$21
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$04
	.byte	$16
	.byte	$3D
	.byte	$1D
	.byte	$05
	.byte	$18
	.byte	$37
_mypal_game_bg4:
	.byte	$1D
	.byte	$0C
	.byte	$00
	.byte	$2A
	.byte	$1D
	.byte	$2D
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$06
	.byte	$16
	.byte	$36
	.byte	$1D
	.byte	$0B
	.byte	$18
	.byte	$38
_mypal_game_bg5:
	.byte	$1D
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$1D
	.byte	$0C
	.byte	$02
	.byte	$12
	.byte	$1D
	.byte	$05
	.byte	$15
	.byte	$24
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$32
_mypal_game_bg6:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$10
	.byte	$1D
	.byte	$0B
	.byte	$1A
	.byte	$29
	.byte	$1D
	.byte	$05
	.byte	$25
	.byte	$37
	.byte	$1D
	.byte	$18
	.byte	$28
	.byte	$38
_mypal_game_bg7:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2A
	.byte	$1D
	.byte	$07
	.byte	$0B
	.byte	$19
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$35
	.byte	$1D
	.byte	$0A
	.byte	$18
	.byte	$36
_mypal_game_bg8:
	.byte	$1D
	.byte	$04
	.byte	$23
	.byte	$35
	.byte	$1D
	.byte	$07
	.byte	$18
	.byte	$36
	.byte	$1D
	.byte	$05
	.byte	$16
	.byte	$26
	.byte	$1D
	.byte	$07
	.byte	$17
	.byte	$35
_mypal_game_fg0:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$17
	.byte	$27
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$14
	.byte	$24
_mypal_game_fg1:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$16
	.byte	$28
	.byte	$1D
	.byte	$0D
	.byte	$2A
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$00
_mypal_game_fg2:
	.byte	$1D
	.byte	$0D
	.byte	$34
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$25
	.byte	$35
	.byte	$1D
	.byte	$0D
	.byte	$23
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$15
	.byte	$25
_mypal_game_fg3:
	.byte	$1D
	.byte	$0D
	.byte	$37
	.byte	$20
	.byte	$1D
	.byte	$0D
	.byte	$18
	.byte	$28
	.byte	$1D
	.byte	$0D
	.byte	$2A
	.byte	$33
	.byte	$1D
	.byte	$0C
	.byte	$1B
	.byte	$29
_mypal_game_fg4:
	.byte	$1D
	.byte	$0D
	.byte	$22
	.byte	$32
	.byte	$1D
	.byte	$0D
	.byte	$0C
	.byte	$1C
	.byte	$1D
	.byte	$0D
	.byte	$02
	.byte	$22
	.byte	$1D
	.byte	$0D
	.byte	$15
	.byte	$25
_mypal_game_fg5:
	.byte	$1D
	.byte	$0D
	.byte	$34
	.byte	$31
	.byte	$1D
	.byte	$0D
	.byte	$16
	.byte	$35
	.byte	$1D
	.byte	$0D
	.byte	$13
	.byte	$33
	.byte	$1D
	.byte	$0D
	.byte	$13
	.byte	$32
_tileset_pals:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
_spriteset_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_scr_0_00:
	.byte	$10
	.byte	$12
	.byte	$B1
	.byte	$B0
	.byte	$31
	.byte	$40
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$0B
	.byte	$60
	.byte	$1D
	.byte	$50
	.byte	$0B
	.byte	$60
	.byte	$1D
	.byte	$50
	.byte	$0B
	.byte	$60
	.byte	$1D
	.byte	$50
	.byte	$0B
	.byte	$50
	.byte	$2D
	.byte	$50
	.byte	$0B
	.byte	$50
	.byte	$1D
	.byte	$0B
	.byte	$0D
	.byte	$40
	.byte	$0B
	.byte	$20
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$0B
	.byte	$3D
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$F4
	.byte	$F5
_scr_0_01:
	.byte	$F1
	.byte	$41
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$20
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$C0
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$B0
	.byte	$0B
	.byte	$26
	.byte	$0B
	.byte	$A0
	.byte	$0E
	.byte	$20
	.byte	$0E
	.byte	$A0
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$A0
	.byte	$0E
	.byte	$20
	.byte	$0E
	.byte	$40
	.byte	$08
	.byte	$40
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$F4
	.byte	$F5
_scr_0_02:
	.byte	$F1
	.byte	$F0
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$60
	.byte	$0D
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$0E
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$0E
	.byte	$20
	.byte	$0B
	.byte	$10
	.byte	$0D
	.byte	$40
	.byte	$0E
	.byte	$10
	.byte	$0B
	.byte	$20
	.byte	$0D
	.byte	$10
	.byte	$0B
	.byte	$40
	.byte	$0B
	.byte	$10
	.byte	$0E
	.byte	$20
	.byte	$0E
	.byte	$A0
	.byte	$0D
	.byte	$20
	.byte	$0B
	.byte	$30
	.byte	$08
	.byte	$50
	.byte	$0B
	.byte	$00
	.byte	$F4
	.byte	$F5
_scr_0_03:
	.byte	$31
	.byte	$62
	.byte	$41
	.byte	$50
	.byte	$03
	.byte	$50
	.byte	$21
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$B0
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$20
	.byte	$0D
	.byte	$0E
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$40
	.byte	$1D
	.byte	$0E
	.byte	$30
	.byte	$0E
	.byte	$0D
	.byte	$0B
	.byte	$0D
	.byte	$40
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$30
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$40
	.byte	$0E
	.byte	$0B
	.byte	$0D
	.byte	$30
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$F4
	.byte	$F5
_scr_0_04:
	.byte	$31
	.byte	$22
	.byte	$B1
	.byte	$80
	.byte	$31
	.byte	$80
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$50
	.byte	$0D
	.byte	$D0
	.byte	$0D
	.byte	$0E
	.byte	$C0
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$40
	.byte	$08
	.byte	$40
	.byte	$44
	.byte	$40
	.byte	$54
	.byte	$45
	.byte	$4C
	.byte	$55
_scr_0_05:
	.byte	$F1
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$0B
	.byte	$3D
	.byte	$0B
	.byte	$80
	.byte	$2D
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$0B
	.byte	$70
	.byte	$0D
	.byte	$1B
	.byte	$1E
	.byte	$00
	.byte	$2B
	.byte	$94
	.byte	$00
	.byte	$1D
	.byte	$24
	.byte	$95
	.byte	$00
	.byte	$14
	.byte	$25
_scr_0_06:
	.byte	$41
	.byte	$22
	.byte	$10
	.byte	$22
	.byte	$21
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$B0
	.byte	$03
	.byte	$40
	.byte	$3E
	.byte	$00
	.byte	$3E
	.byte	$50
	.byte	$A6
	.byte	$F0
	.byte	$90
	.byte	$06
	.byte	$F0
	.byte	$A0
	.byte	$06
	.byte	$A0
	.byte	$0B
	.byte	$E0
	.byte	$F4
	.byte	$F5
_scr_0_07:
	.byte	$F1
	.byte	$20
	.byte	$91
	.byte	$80
	.byte	$31
	.byte	$90
	.byte	$03
	.byte	$50
	.byte	$03
	.byte	$B0
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$C0
	.byte	$16
	.byte	$90
	.byte	$16
	.byte	$60
	.byte	$16
	.byte	$F0
	.byte	$20
	.byte	$14
	.byte	$A0
	.byte	$24
	.byte	$15
	.byte	$AC
	.byte	$25
_scr_0_08:
	.byte	$A2
	.byte	$41
	.byte	$00
	.byte	$03
	.byte	$90
	.byte	$31
	.byte	$A0
	.byte	$03
	.byte	$00
	.byte	$21
	.byte	$E0
	.byte	$01
	.byte	$40
	.byte	$2D
	.byte	$0E
	.byte	$0B
	.byte	$20
	.byte	$03
	.byte	$50
	.byte	$1D
	.byte	$00
	.byte	$0E
	.byte	$0B
	.byte	$A0
	.byte	$1D
	.byte	$0E
	.byte	$0B
	.byte	$1D
	.byte	$90
	.byte	$0D
	.byte	$0E
	.byte	$0B
	.byte	$0E
	.byte	$1D
	.byte	$90
	.byte	$0E
	.byte	$0B
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$90
	.byte	$0D
	.byte	$1E
	.byte	$0D
	.byte	$1E
	.byte	$30
	.byte	$0B
	.byte	$00
	.byte	$F4
	.byte	$F5
_scr_0_09:
	.byte	$51
	.byte	$02
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$71
	.byte	$80
	.byte	$0B
	.byte	$41
	.byte	$90
	.byte	$0B
	.byte	$31
	.byte	$A0
	.byte	$0B
	.byte	$E0
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$0B
	.byte	$D0
	.byte	$1B
	.byte	$D0
	.byte	$1B
	.byte	$C0
	.byte	$2B
	.byte	$C0
	.byte	$2B
	.byte	$F4
	.byte	$F5
_scr_0_0c:
	.byte	$FB
	.byte	$0B
	.byte	$70
	.byte	$0B
	.byte	$4E
	.byte	$00
	.byte	$0B
	.byte	$70
	.byte	$7B
	.byte	$70
	.byte	$0B
	.byte	$1E
	.byte	$2D
	.byte	$00
	.byte	$0B
	.byte	$70
	.byte	$7B
	.byte	$70
	.byte	$5D
	.byte	$00
	.byte	$0B
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$30
	.byte	$7B
	.byte	$0E
	.byte	$0D
	.byte	$1E
	.byte	$20
	.byte	$1B
	.byte	$4D
	.byte	$00
	.byte	$0B
	.byte	$3E
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$3E
	.byte	$1B
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$00
	.byte	$3B
	.byte	$3E
	.byte	$00
	.byte	$0B
	.byte	$F4
	.byte	$F5
_scr_0_0d:
	.byte	$FB
	.byte	$1D
	.byte	$C0
	.byte	$2B
	.byte	$06
	.byte	$C0
	.byte	$1D
	.byte	$D0
	.byte	$1B
	.byte	$16
	.byte	$B0
	.byte	$1D
	.byte	$40
	.byte	$06
	.byte	$40
	.byte	$26
	.byte	$1B
	.byte	$26
	.byte	$F0
	.byte	$A0
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$90
	.byte	$0B
	.byte	$20
	.byte	$1B
	.byte	$9C
	.byte	$F4
	.byte	$F5
_scr_0_0e:
	.byte	$FB
	.byte	$1B
	.byte	$B0
	.byte	$1B
	.byte	$0D
	.byte	$20
	.byte	$0E
	.byte	$90
	.byte	$0B
	.byte	$0D
	.byte	$10
	.byte	$2E
	.byte	$80
	.byte	$1B
	.byte	$00
	.byte	$4E
	.byte	$70
	.byte	$0B
	.byte	$86
	.byte	$50
	.byte	$0B
	.byte	$F0
	.byte	$F0
	.byte	$D0
	.byte	$1B
	.byte	$CC
	.byte	$2B
	.byte	$F4
	.byte	$F5
_scr_0_0f:
	.byte	$9B
	.byte	$00
	.byte	$CB
	.byte	$40
	.byte	$4B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$36
	.byte	$3B
	.byte	$C0
	.byte	$1B
	.byte	$60
	.byte	$1E
	.byte	$40
	.byte	$1B
	.byte	$50
	.byte	$36
	.byte	$30
	.byte	$0B
	.byte	$0D
	.byte	$C0
	.byte	$0E
	.byte	$0B
	.byte	$0D
	.byte	$40
	.byte	$0E
	.byte	$60
	.byte	$0E
	.byte	$2B
	.byte	$20
	.byte	$0E
	.byte	$0B
	.byte	$0E
	.byte	$50
	.byte	$0E
	.byte	$3B
	.byte	$00
	.byte	$08
	.byte	$2B
	.byte	$10
	.byte	$08
	.byte	$20
	.byte	$1B
	.byte	$F4
	.byte	$F5
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_03
	.addr	_scr_0_04
	.addr	_scr_0_05
	.addr	_scr_0_06
	.addr	_scr_0_07
	.addr	_scr_0_08
	.addr	_scr_0_09
	.word	$0000
	.word	$0000
	.addr	_scr_0_0c
	.addr	_scr_0_0d
	.addr	_scr_0_0e
	.addr	_scr_0_0f
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_scr_1_00:
	.byte	$F5
	.byte	$35
	.byte	$B0
	.byte	$25
	.byte	$C0
	.byte	$15
	.byte	$D0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$D0
	.byte	$15
	.byte	$20
	.byte	$2E
	.byte	$60
	.byte	$25
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$40
	.byte	$35
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$30
	.byte	$05
	.byte	$0E
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$0D
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$05
	.byte	$1E
	.byte	$10
	.byte	$35
	.byte	$19
	.byte	$00
	.byte	$85
_scr_1_01:
	.byte	$F5
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$33
	.byte	$50
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$33
	.byte	$50
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$23
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$63
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$63
	.byte	$25
	.byte	$33
	.byte	$15
	.byte	$63
	.byte	$25
	.byte	$33
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$23
	.byte	$25
	.byte	$33
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$23
	.byte	$05
	.byte	$10
	.byte	$83
	.byte	$05
	.byte	$33
	.byte	$10
	.byte	$83
	.byte	$05
	.byte	$33
	.byte	$55
	.byte	$10
	.byte	$75
_scr_1_02:
	.byte	$75
	.byte	$70
	.byte	$23
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$05
	.byte	$70
	.byte	$23
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$05
	.byte	$70
	.byte	$75
	.byte	$70
	.byte	$25
	.byte	$10
	.byte	$02
	.byte	$90
	.byte	$25
	.byte	$C0
	.byte	$25
	.byte	$C0
	.byte	$25
	.byte	$13
	.byte	$05
	.byte	$90
	.byte	$25
	.byte	$13
	.byte	$05
	.byte	$90
	.byte	$43
	.byte	$05
	.byte	$90
	.byte	$43
	.byte	$05
	.byte	$98
	.byte	$25
	.byte	$1C
	.byte	$05
	.byte	$97
_scr_1_03:
	.byte	$00
	.byte	$E5
	.byte	$00
	.byte	$05
	.byte	$53
	.byte	$25
	.byte	$43
	.byte	$00
	.byte	$05
	.byte	$D3
	.byte	$00
	.byte	$05
	.byte	$D3
	.byte	$00
	.byte	$05
	.byte	$13
	.byte	$55
	.byte	$33
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$73
	.byte	$35
	.byte	$13
	.byte	$00
	.byte	$05
	.byte	$D3
	.byte	$00
	.byte	$05
	.byte	$D3
	.byte	$00
	.byte	$43
	.byte	$95
	.byte	$00
	.byte	$E3
	.byte	$38
	.byte	$B3
	.byte	$37
	.byte	$B5
_scr_1_04:
	.byte	$F5
	.byte	$63
	.byte	$05
	.byte	$13
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$43
	.byte	$15
	.byte	$23
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$23
	.byte	$15
	.byte	$73
	.byte	$55
	.byte	$A3
	.byte	$15
	.byte	$53
	.byte	$55
	.byte	$13
	.byte	$15
	.byte	$33
	.byte	$15
	.byte	$53
	.byte	$05
	.byte	$03
	.byte	$15
	.byte	$13
	.byte	$15
	.byte	$33
	.byte	$15
	.byte	$33
	.byte	$35
	.byte	$53
	.byte	$05
	.byte	$43
	.byte	$15
	.byte	$73
	.byte	$05
	.byte	$33
	.byte	$25
	.byte	$73
	.byte	$05
	.byte	$23
	.byte	$F5
	.byte	$35
_scr_1_08:
	.byte	$35
	.byte	$20
	.byte	$C5
	.byte	$19
	.byte	$20
	.byte	$25
	.byte	$10
	.byte	$35
	.byte	$10
	.byte	$19
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$25
	.byte	$10
	.byte	$19
	.byte	$90
	.byte	$05
	.byte	$0E
	.byte	$10
	.byte	$19
	.byte	$90
	.byte	$05
	.byte	$0E
	.byte	$10
	.byte	$19
	.byte	$90
	.byte	$05
	.byte	$0E
	.byte	$10
	.byte	$19
	.byte	$90
	.byte	$15
	.byte	$10
	.byte	$19
	.byte	$90
	.byte	$25
	.byte	$00
	.byte	$19
	.byte	$90
	.byte	$45
	.byte	$A0
	.byte	$58
	.byte	$30
	.byte	$58
	.byte	$57
	.byte	$20
	.byte	$08
	.byte	$57
_scr_1_09:
	.byte	$55
	.byte	$10
	.byte	$95
	.byte	$80
	.byte	$55
	.byte	$C0
	.byte	$15
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$48
	.byte	$30
	.byte	$68
	.byte	$47
	.byte	$3C
	.byte	$67
_scr_1_0a:
	.byte	$F5
	.byte	$15
	.byte	$40
	.byte	$65
	.byte	$10
	.byte	$05
	.byte	$70
	.byte	$15
	.byte	$F0
	.byte	$60
	.byte	$05
	.byte	$20
	.byte	$0E
	.byte	$2D
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$0E
	.byte	$20
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$0E
	.byte	$0D
	.byte	$1E
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$0D
	.byte	$30
	.byte	$B9
	.byte	$F0
	.byte	$10
	.byte	$18
	.byte	$B0
	.byte	$18
	.byte	$17
	.byte	$BC
	.byte	$17
_scr_1_0b:
	.byte	$F5
	.byte	$30
	.byte	$2E
	.byte	$85
	.byte	$30
	.byte	$4E
	.byte	$00
	.byte	$05
	.byte	$70
	.byte	$75
	.byte	$60
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$C0
	.byte	$F8
	.byte	$F7
_scr_1_0c:
	.byte	$55
	.byte	$10
	.byte	$95
	.byte	$60
	.byte	$55
	.byte	$A0
	.byte	$25
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$D0
	.byte	$0D
	.byte	$E0
	.byte	$0D
	.byte	$0E
	.byte	$D0
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$28
	.byte	$73
	.byte	$0D
	.byte	$38
	.byte	$27
	.byte	$18
	.byte	$5C
	.byte	$08
	.byte	$37
_scr_1_0d:
	.byte	$F5
	.byte	$50
	.byte	$45
	.byte	$30
	.byte	$05
	.byte	$60
	.byte	$15
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$90
	.byte	$0E
	.byte	$80
	.byte	$0E
	.byte	$40
	.byte	$05
	.byte	$83
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$83
	.byte	$05
	.byte	$20
	.byte	$25
	.byte	$33
	.byte	$05
	.byte	$23
	.byte	$25
	.byte	$00
	.byte	$F8
	.byte	$F7
_scr_1_0e:
	.byte	$F5
	.byte	$05
	.byte	$30
	.byte	$35
	.byte	$20
	.byte	$15
	.byte	$70
	.byte	$15
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$F8
	.byte	$F7
_scr_1_0f:
	.byte	$F5
	.byte	$30
	.byte	$15
	.byte	$10
	.byte	$02
	.byte	$30
	.byte	$25
	.byte	$30
	.byte	$02
	.byte	$70
	.byte	$0E
	.byte	$15
	.byte	$B0
	.byte	$2E
	.byte	$05
	.byte	$30
	.byte	$A1
	.byte	$05
	.byte	$30
	.byte	$01
	.byte	$24
	.byte	$01
	.byte	$54
	.byte	$05
	.byte	$30
	.byte	$01
	.byte	$24
	.byte	$01
	.byte	$54
	.byte	$05
	.byte	$20
	.byte	$0E
	.byte	$01
	.byte	$24
	.byte	$0F
	.byte	$54
	.byte	$05
	.byte	$20
	.byte	$0E
	.byte	$01
	.byte	$04
	.byte	$19
	.byte	$01
	.byte	$54
	.byte	$05
	.byte	$20
	.byte	$0E
	.byte	$0F
	.byte	$24
	.byte	$01
	.byte	$54
	.byte	$05
	.byte	$F8
	.byte	$F7
_scr_1_10:
	.byte	$55
	.byte	$20
	.byte	$C5
	.byte	$09
	.byte	$10
	.byte	$C5
	.byte	$20
	.byte	$C5
	.byte	$23
	.byte	$55
	.byte	$00
	.byte	$55
	.byte	$23
	.byte	$55
	.byte	$00
	.byte	$55
	.byte	$23
	.byte	$45
	.byte	$10
	.byte	$55
	.byte	$23
	.byte	$35
	.byte	$20
	.byte	$55
	.byte	$23
	.byte	$15
	.byte	$40
	.byte	$15
	.byte	$D0
	.byte	$05
	.byte	$40
	.byte	$06
	.byte	$80
	.byte	$F8
	.byte	$F7
_scr_1_12:
	.byte	$F5
	.byte	$15
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$90
	.byte	$01
	.byte	$09
	.byte	$01
	.byte	$19
	.byte	$A0
	.byte	$0E
	.byte	$09
	.byte	$D0
	.byte	$0D
	.byte	$09
	.byte	$D0
	.byte	$0E
	.byte	$09
	.byte	$D0
	.byte	$0E
	.byte	$09
	.byte	$D0
	.byte	$0E
	.byte	$09
	.byte	$20
	.byte	$F8
	.byte	$F7
_scr_1_13:
	.byte	$F5
	.byte	$10
	.byte	$02
	.byte	$20
	.byte	$15
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$02
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$F0
	.byte	$40
	.byte	$19
	.byte	$01
	.byte	$90
	.byte	$01
	.byte	$19
	.byte	$F0
	.byte	$40
	.byte	$09
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$09
	.byte	$90
	.byte	$0E
	.byte	$20
	.byte	$0D
	.byte	$A0
	.byte	$0E
	.byte	$20
	.byte	$0E
	.byte	$A0
	.byte	$0D
	.byte	$20
	.byte	$0E
	.byte	$40
	.byte	$F8
	.byte	$F7
_scr_1_14:
	.byte	$F5
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$15
	.byte	$20
	.byte	$02
	.byte	$20
	.byte	$15
	.byte	$50
	.byte	$02
	.byte	$70
	.byte	$05
	.byte	$C0
	.byte	$19
	.byte	$05
	.byte	$19
	.byte	$01
	.byte	$09
	.byte	$A0
	.byte	$05
	.byte	$90
	.byte	$01
	.byte	$09
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$09
	.byte	$01
	.byte	$09
	.byte	$60
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$68
	.byte	$70
	.byte	$08
	.byte	$67
	.byte	$08
	.byte	$6C
	.byte	$07
_map_1:
	.addr	_scr_1_00
	.addr	_scr_1_01
	.addr	_scr_1_02
	.addr	_scr_1_03
	.addr	_scr_1_04
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_scr_1_08
	.addr	_scr_1_09
	.addr	_scr_1_0a
	.addr	_scr_1_0b
	.addr	_scr_1_0c
	.addr	_scr_1_0d
	.addr	_scr_1_0e
	.addr	_scr_1_0f
	.addr	_scr_1_10
	.addr	_scr_1_09
	.addr	_scr_1_12
	.addr	_scr_1_13
	.addr	_scr_1_14
	.word	$0000
	.word	$0000
	.word	$0000
_map_1_locks:
	.byte	$0F
	.byte	$78
	.byte	$0F
	.byte	$94
_scr_2_02:
	.byte	$F2
	.byte	$22
	.byte	$10
	.byte	$32
	.byte	$30
	.byte	$42
	.byte	$30
	.byte	$12
	.byte	$50
	.byte	$22
	.byte	$50
	.byte	$02
	.byte	$60
	.byte	$12
	.byte	$3E
	.byte	$40
	.byte	$4E
	.byte	$12
	.byte	$3E
	.byte	$40
	.byte	$4E
	.byte	$12
	.byte	$3E
	.byte	$40
	.byte	$4E
	.byte	$12
	.byte	$51
	.byte	$10
	.byte	$51
	.byte	$12
	.byte	$D0
	.byte	$22
	.byte	$B0
	.byte	$0A
	.byte	$42
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$0A
	.byte	$10
	.byte	$72
	.byte	$30
	.byte	$52
_scr_2_03:
	.byte	$F2
	.byte	$42
	.byte	$A0
	.byte	$22
	.byte	$C0
	.byte	$12
	.byte	$D0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$31
	.byte	$70
	.byte	$21
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$12
	.byte	$20
	.byte	$0B
	.byte	$50
	.byte	$0B
	.byte	$20
	.byte	$22
	.byte	$C5
	.byte	$F2
_scr_2_04:
	.byte	$F2
	.byte	$B0
	.byte	$32
	.byte	$C0
	.byte	$22
	.byte	$D0
	.byte	$12
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$21
	.byte	$A0
	.byte	$0A
	.byte	$02
	.byte	$D0
	.byte	$12
	.byte	$40
	.byte	$1E
	.byte	$0B
	.byte	$1D
	.byte	$20
	.byte	$0A
	.byte	$12
	.byte	$30
	.byte	$02
	.byte	$40
	.byte	$0D
	.byte	$10
	.byte	$22
	.byte	$35
	.byte	$02
	.byte	$40
	.byte	$0D
	.byte	$0A
	.byte	$92
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$62
_scr_2_08:
	.byte	$F2
	.byte	$12
	.byte	$00
	.byte	$42
	.byte	$10
	.byte	$22
	.byte	$20
	.byte	$02
	.byte	$30
	.byte	$12
	.byte	$30
	.byte	$02
	.byte	$30
	.byte	$0B
	.byte	$30
	.byte	$12
	.byte	$60
	.byte	$2B
	.byte	$40
	.byte	$02
	.byte	$60
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$1D
	.byte	$0E
	.byte	$1D
	.byte	$20
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$0C
	.byte	$00
	.byte	$0B
	.byte	$10
	.byte	$0A
	.byte	$10
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$10
	.byte	$0A
	.byte	$0C
	.byte	$00
	.byte	$62
	.byte	$06
	.byte	$02
	.byte	$06
	.byte	$F2
	.byte	$52
_scr_2_09:
	.byte	$F2
	.byte	$20
	.byte	$52
	.byte	$20
	.byte	$32
	.byte	$30
	.byte	$22
	.byte	$70
	.byte	$02
	.byte	$0B
	.byte	$30
	.byte	$12
	.byte	$90
	.byte	$0B
	.byte	$F0
	.byte	$F0
	.byte	$0E
	.byte	$0D
	.byte	$D0
	.byte	$0D
	.byte	$0E
	.byte	$D0
	.byte	$1D
	.byte	$C0
	.byte	$2D
	.byte	$B0
	.byte	$22
	.byte	$68
	.byte	$30
	.byte	$B2
	.byte	$35
	.byte	$12
_scr_2_0a:
	.byte	$52
	.byte	$30
	.byte	$92
	.byte	$10
	.byte	$0D
	.byte	$40
	.byte	$52
	.byte	$40
	.byte	$0D
	.byte	$40
	.byte	$22
	.byte	$F0
	.byte	$80
	.byte	$0D
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$0D
	.byte	$E0
	.byte	$0E
	.byte	$60
	.byte	$0D
	.byte	$0B
	.byte	$00
	.byte	$0D
	.byte	$20
	.byte	$0E
	.byte	$0D
	.byte	$30
	.byte	$0A
	.byte	$00
	.byte	$2D
	.byte	$0B
	.byte	$7D
	.byte	$00
	.byte	$22
	.byte	$1E
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$3E
	.byte	$0A
	.byte	$0B
	.byte	$82
	.byte	$10
	.byte	$4B
	.byte	$02
_scr_2_0b:
	.byte	$F2
	.byte	$12
	.byte	$30
	.byte	$22
	.byte	$40
	.byte	$22
	.byte	$50
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$90
	.byte	$0B
	.byte	$E0
	.byte	$0B
	.byte	$70
	.byte	$0D
	.byte	$50
	.byte	$0B
	.byte	$1D
	.byte	$40
	.byte	$1D
	.byte	$50
	.byte	$1D
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$02
	.byte	$21
	.byte	$70
	.byte	$21
	.byte	$22
	.byte	$B5
	.byte	$12
_scr_2_0c:
	.byte	$52
	.byte	$20
	.byte	$82
	.byte	$80
	.byte	$52
	.byte	$B0
	.byte	$22
	.byte	$D0
	.byte	$12
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$0B
	.byte	$E0
	.byte	$0F
	.byte	$D0
	.byte	$12
	.byte	$90
	.byte	$1E
	.byte	$0D
	.byte	$0E
	.byte	$22
	.byte	$80
	.byte	$0E
	.byte	$0D
	.byte	$1E
	.byte	$72
	.byte	$20
	.byte	$62
_scr_2_0d:
	.byte	$F2
	.byte	$32
	.byte	$70
	.byte	$52
	.byte	$B0
	.byte	$22
	.byte	$D0
	.byte	$12
	.byte	$D0
	.byte	$12
	.byte	$D0
	.byte	$02
	.byte	$0B
	.byte	$D0
	.byte	$0B
	.byte	$D0
	.byte	$0E
	.byte	$0F
	.byte	$02
	.byte	$C0
	.byte	$32
	.byte	$B0
	.byte	$42
	.byte	$A0
	.byte	$52
	.byte	$85
	.byte	$22
_scr_2_0e:
	.byte	$F2
	.byte	$72
	.byte	$60
	.byte	$42
	.byte	$B0
	.byte	$12
	.byte	$D0
	.byte	$12
	.byte	$D0
	.byte	$02
	.byte	$E0
	.byte	$0B
	.byte	$F0
	.byte	$E0
	.byte	$02
	.byte	$70
	.byte	$5E
	.byte	$00
	.byte	$02
	.byte	$C0
	.byte	$11
	.byte	$12
	.byte	$D0
	.byte	$32
	.byte	$95
	.byte	$12
_scr_2_0f:
	.byte	$B2
	.byte	$3B
	.byte	$32
	.byte	$60
	.byte	$02
	.byte	$0B
	.byte	$09
	.byte	$1B
	.byte	$10
	.byte	$12
	.byte	$0D
	.byte	$60
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$20
	.byte	$02
	.byte	$06
	.byte	$28
	.byte	$30
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$B0
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$A0
	.byte	$0D
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$70
	.byte	$27
	.byte	$06
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$B0
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$20
	.byte	$02
	.byte	$11
	.byte	$50
	.byte	$0B
	.byte	$19
	.byte	$0B
	.byte	$21
	.byte	$02
	.byte	$1E
	.byte	$50
	.byte	$0C
	.byte	$19
	.byte	$0B
	.byte	$20
	.byte	$02
	.byte	$1E
	.byte	$50
	.byte	$0C
	.byte	$19
	.byte	$0B
	.byte	$32
	.byte	$B1
_scr_2_10:
	.byte	$F2
	.byte	$42
	.byte	$50
	.byte	$82
	.byte	$80
	.byte	$52
	.byte	$A0
	.byte	$42
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$21
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$20
	.byte	$07
	.byte	$11
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F5
_scr_2_11:
	.byte	$F2
	.byte	$22
	.byte	$30
	.byte	$22
	.byte	$00
	.byte	$62
	.byte	$50
	.byte	$02
	.byte	$30
	.byte	$32
	.byte	$C0
	.byte	$12
	.byte	$E0
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$11
	.byte	$40
	.byte	$17
	.byte	$F0
	.byte	$90
	.byte	$17
	.byte	$50
	.byte	$17
	.byte	$21
	.byte	$F0
	.byte	$F5
_scr_2_12:
	.byte	$62
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$B2
	.byte	$40
	.byte	$82
	.byte	$20
	.byte	$21
	.byte	$10
	.byte	$52
	.byte	$A0
	.byte	$32
	.byte	$C0
	.byte	$02
	.byte	$90
	.byte	$17
	.byte	$20
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$60
	.byte	$17
	.byte	$50
	.byte	$02
	.byte	$D0
	.byte	$0A
	.byte	$02
	.byte	$21
	.byte	$18
	.byte	$70
	.byte	$0A
	.byte	$12
	.byte	$C0
	.byte	$22
	.byte	$F5
_scr_2_14:
	.byte	$52
	.byte	$20
	.byte	$A2
	.byte	$30
	.byte	$07
	.byte	$0B
	.byte	$32
	.byte	$10
	.byte	$22
	.byte	$50
	.byte	$0E
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$60
	.byte	$0E
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$88
	.byte	$40
	.byte	$12
	.byte	$50
	.byte	$0E
	.byte	$60
	.byte	$12
	.byte	$50
	.byte	$0E
	.byte	$60
	.byte	$12
	.byte	$06
	.byte	$40
	.byte	$67
	.byte	$06
	.byte	$22
	.byte	$B0
	.byte	$0C
	.byte	$00
	.byte	$22
	.byte	$2D
	.byte	$0E
	.byte	$4D
	.byte	$10
	.byte	$0C
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$2D
	.byte	$0E
	.byte	$1D
	.byte	$0B
	.byte	$10
	.byte	$0C
	.byte	$00
	.byte	$42
	.byte	$06
	.byte	$02
	.byte	$06
	.byte	$02
	.byte	$06
	.byte	$52
_scr_2_15:
	.byte	$F2
	.byte	$B0
	.byte	$0D
	.byte	$22
	.byte	$90
	.byte	$2D
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$1E
	.byte	$50
	.byte	$4D
	.byte	$00
	.byte	$12
	.byte	$C1
	.byte	$00
	.byte	$12
	.byte	$D0
	.byte	$12
	.byte	$D0
	.byte	$12
	.byte	$D0
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$B0
	.byte	$11
	.byte	$12
	.byte	$D0
	.byte	$92
	.byte	$55
	.byte	$12
_map_2:
	.word	$0000
	.word	$0000
	.addr	_scr_2_02
	.addr	_scr_2_03
	.addr	_scr_2_04
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_scr_2_08
	.addr	_scr_2_09
	.addr	_scr_2_0a
	.addr	_scr_2_0b
	.addr	_scr_2_0c
	.addr	_scr_2_0d
	.addr	_scr_2_0e
	.addr	_scr_2_0f
	.addr	_scr_2_10
	.addr	_scr_2_11
	.addr	_scr_2_12
	.word	$0000
	.addr	_scr_2_14
	.addr	_scr_2_15
	.word	$0000
	.word	$0000
_map_2_locks:
	.byte	$0C
	.byte	$7F
	.byte	$0D
	.byte	$7F
_scr_3_00:
	.byte	$F7
	.byte	$27
	.byte	$20
	.byte	$2E
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$17
	.byte	$30
	.byte	$2E
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$07
	.byte	$C3
	.byte	$10
	.byte	$07
	.byte	$BA
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$E0
	.byte	$07
	.byte	$E0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$C0
	.byte	$17
	.byte	$09
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$1C
	.byte	$09
	.byte	$1C
	.byte	$29
	.byte	$00
	.byte	$22
	.byte	$0B
	.byte	$12
	.byte	$0B
	.byte	$12
	.byte	$0B
	.byte	$12
	.byte	$0B
	.byte	$22
	.byte	$F4
_scr_3_01:
	.byte	$F7
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$20
	.byte	$09
	.byte	$E0
	.byte	$02
	.byte	$B0
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$50
	.byte	$19
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$14
	.byte	$32
	.byte	$20
	.byte	$42
	.byte	$74
	.byte	$20
	.byte	$44
_scr_3_02:
	.byte	$F7
	.byte	$50
	.byte	$17
	.byte	$30
	.byte	$0D
	.byte	$80
	.byte	$07
	.byte	$40
	.byte	$0E
	.byte	$E0
	.byte	$0E
	.byte	$E0
	.byte	$02
	.byte	$50
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$40
	.byte	$02
	.byte	$04
	.byte	$50
	.byte	$12
	.byte	$0D
	.byte	$30
	.byte	$0E
	.byte	$14
	.byte	$02
	.byte	$30
	.byte	$02
	.byte	$14
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$0E
	.byte	$24
	.byte	$30
	.byte	$24
	.byte	$02
	.byte	$1E
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$24
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$34
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$54
	.byte	$22
	.byte	$44
	.byte	$02
	.byte	$F4
_scr_3_03:
	.byte	$F7
	.byte	$40
	.byte	$17
	.byte	$E0
	.byte	$07
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$F2
	.byte	$F4
_scr_3_04:
	.byte	$F7
	.byte	$40
	.byte	$A7
	.byte	$80
	.byte	$67
	.byte	$80
	.byte	$37
	.byte	$0D
	.byte	$17
	.byte	$90
	.byte	$07
	.byte	$00
	.byte	$1E
	.byte	$17
	.byte	$A0
	.byte	$0D
	.byte	$1E
	.byte	$17
	.byte	$A0
	.byte	$0D
	.byte	$1E
	.byte	$17
	.byte	$A0
	.byte	$1D
	.byte	$27
	.byte	$A0
	.byte	$0D
	.byte	$0E
	.byte	$27
	.byte	$A0
	.byte	$2D
	.byte	$17
	.byte	$02
	.byte	$20
	.byte	$B2
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$B4
_scr_3_05:
	.byte	$F7
	.byte	$17
	.byte	$D0
	.byte	$07
	.byte	$70
	.byte	$09
	.byte	$20
	.byte	$09
	.byte	$10
	.byte	$07
	.byte	$20
	.byte	$B3
	.byte	$07
	.byte	$10
	.byte	$03
	.byte	$5A
	.byte	$00
	.byte	$0E
	.byte	$30
	.byte	$07
	.byte	$90
	.byte	$0E
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$07
	.byte	$29
	.byte	$60
	.byte	$43
	.byte	$07
	.byte	$83
	.byte	$0E
	.byte	$40
	.byte	$07
	.byte	$E0
	.byte	$07
	.byte	$20
	.byte	$09
	.byte	$50
	.byte	$19
	.byte	$20
	.byte	$07
	.byte	$20
	.byte	$B2
	.byte	$07
	.byte	$10
	.byte	$02
	.byte	$B4
_scr_3_06:
	.byte	$F7
	.byte	$D0
	.byte	$17
	.byte	$10
	.byte	$09
	.byte	$B0
	.byte	$07
	.byte	$33
	.byte	$0C
	.byte	$90
	.byte	$07
	.byte	$30
	.byte	$03
	.byte	$0C
	.byte	$80
	.byte	$07
	.byte	$40
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$13
	.byte	$20
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$22
	.byte	$1C
	.byte	$02
	.byte	$30
	.byte	$52
	.byte	$24
	.byte	$12
	.byte	$04
	.byte	$30
	.byte	$54
_scr_3_07:
	.byte	$27
	.byte	$10
	.byte	$27
	.byte	$20
	.byte	$67
	.byte	$30
	.byte	$07
	.byte	$40
	.byte	$47
	.byte	$C0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$0D
	.byte	$80
	.byte	$0D
	.byte	$10
	.byte	$27
	.byte	$1D
	.byte	$60
	.byte	$3D
	.byte	$27
	.byte	$00
	.byte	$0D
	.byte	$07
	.byte	$50
	.byte	$07
	.byte	$0D
	.byte	$00
	.byte	$17
	.byte	$22
	.byte	$0B
	.byte	$12
	.byte	$35
	.byte	$12
	.byte	$0B
	.byte	$22
	.byte	$51
	.byte	$30
	.byte	$51
_scr_3_09:
	.byte	$77
	.byte	$20
	.byte	$47
	.byte	$F0
	.byte	$40
	.byte	$09
	.byte	$E0
	.byte	$12
	.byte	$C0
	.byte	$02
	.byte	$14
	.byte	$C0
	.byte	$24
	.byte	$02
	.byte	$A0
	.byte	$09
	.byte	$34
	.byte	$02
	.byte	$09
	.byte	$70
	.byte	$09
	.byte	$02
	.byte	$44
	.byte	$12
	.byte	$60
	.byte	$02
	.byte	$74
	.byte	$12
	.byte	$09
	.byte	$20
	.byte	$02
	.byte	$A4
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$C4
	.byte	$12
	.byte	$F4
_scr_3_0b:
	.byte	$F7
	.byte	$00
	.byte	$77
	.byte	$40
	.byte	$17
	.byte	$10
	.byte	$57
	.byte	$60
	.byte	$07
	.byte	$10
	.byte	$17
	.byte	$00
	.byte	$17
	.byte	$70
	.byte	$07
	.byte	$10
	.byte	$07
	.byte	$20
	.byte	$07
	.byte	$70
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$20
	.byte	$07
	.byte	$60
	.byte	$17
	.byte	$10
	.byte	$07
	.byte	$20
	.byte	$07
	.byte	$60
	.byte	$17
	.byte	$10
	.byte	$07
	.byte	$20
	.byte	$0F
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$17
	.byte	$20
	.byte	$07
	.byte	$50
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$27
	.byte	$29
	.byte	$10
	.byte	$02
	.byte	$14
	.byte	$C2
	.byte	$F4
	.byte	$24
_scr_3_0c:
	.byte	$07
	.byte	$10
	.byte	$D7
	.byte	$10
	.byte	$93
	.byte	$10
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$07
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$07
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0D
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$07
	.byte	$19
	.byte	$0D
	.byte	$19
	.byte	$03
	.byte	$19
	.byte	$0E
	.byte	$19
	.byte	$03
	.byte	$29
	.byte	$F2
	.byte	$F4
_scr_3_0d:
	.byte	$07
	.byte	$10
	.byte	$D7
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$27
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$17
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$17
	.byte	$00
	.byte	$03
	.byte	$0B
	.byte	$13
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$17
	.byte	$80
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$23
	.byte	$0B
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$00
	.byte	$05
	.byte	$90
	.byte	$03
	.byte	$20
	.byte	$09
	.byte	$05
	.byte	$90
	.byte	$03
	.byte	$29
	.byte	$D2
	.byte	$0B
	.byte	$02
	.byte	$F4
_scr_3_0e:
	.byte	$07
	.byte	$0A
	.byte	$37
	.byte	$30
	.byte	$67
	.byte	$30
	.byte	$0E
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$07
	.byte	$10
	.byte	$09
	.byte	$00
	.byte	$0D
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$07
	.byte	$00
	.byte	$83
	.byte	$40
	.byte	$07
	.byte	$30
	.byte	$0E
	.byte	$90
	.byte	$07
	.byte	$30
	.byte	$0E
	.byte	$20
	.byte	$09
	.byte	$50
	.byte	$07
	.byte	$B3
	.byte	$20
	.byte	$07
	.byte	$20
	.byte	$5E
	.byte	$20
	.byte	$0E
	.byte	$03
	.byte	$40
	.byte	$2E
	.byte	$0D
	.byte	$1E
	.byte	$30
	.byte	$03
	.byte	$00
	.byte	$39
	.byte	$5E
	.byte	$09
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$F2
	.byte	$F4
_scr_3_0f:
	.byte	$57
	.byte	$30
	.byte	$57
	.byte	$30
	.byte	$17
	.byte	$30
	.byte	$17
	.byte	$20
	.byte	$04
	.byte	$40
	.byte	$07
	.byte	$30
	.byte	$07
	.byte	$30
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$D0
	.byte	$09
	.byte	$04
	.byte	$D0
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$19
	.byte	$60
	.byte	$29
	.byte	$14
	.byte	$D2
	.byte	$F4
	.byte	$14
_map_3:
	.addr	_scr_3_00
	.addr	_scr_3_01
	.addr	_scr_3_02
	.addr	_scr_3_03
	.addr	_scr_3_04
	.addr	_scr_3_05
	.addr	_scr_3_06
	.addr	_scr_3_07
	.addr	_scr_3_00
	.addr	_scr_3_09
	.addr	_scr_3_02
	.addr	_scr_3_0b
	.addr	_scr_3_0c
	.addr	_scr_3_0d
	.addr	_scr_3_0e
	.addr	_scr_3_0f
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_map_3_locks:
	.byte	$0B
	.byte	$52
	.byte	$0B
	.byte	$76
_scr_4_00:
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$15
	.byte	$D0
	.byte	$75
	.byte	$70
	.byte	$05
	.byte	$3D
	.byte	$05
	.byte	$0D
	.byte	$15
	.byte	$30
	.byte	$0C
	.byte	$10
	.byte	$05
	.byte	$6D
	.byte	$05
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$15
	.byte	$5D
	.byte	$05
	.byte	$30
	.byte	$0C
	.byte	$10
	.byte	$15
	.byte	$5D
	.byte	$01
	.byte	$20
	.byte	$1B
	.byte	$10
	.byte	$25
	.byte	$4D
	.byte	$01
	.byte	$20
	.byte	$1B
	.byte	$10
	.byte	$53
	.byte	$02
	.byte	$13
	.byte	$1E
	.byte	$43
	.byte	$84
	.byte	$1F
	.byte	$44
_scr_4_01:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$60
	.byte	$0B
	.byte	$D0
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$C0
	.byte	$2B
	.byte	$A0
	.byte	$0B
	.byte	$00
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$08
	.byte	$10
	.byte	$1B
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$8E
	.byte	$33
	.byte	$24
	.byte	$8F
	.byte	$34
_scr_4_02:
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$0C
	.byte	$40
	.byte	$0C
	.byte	$80
	.byte	$0C
	.byte	$40
	.byte	$0B
	.byte	$80
	.byte	$15
	.byte	$20
	.byte	$15
	.byte	$F0
	.byte	$10
	.byte	$15
	.byte	$10
	.byte	$05
	.byte	$0B
	.byte	$D0
	.byte	$15
	.byte	$F0
	.byte	$70
	.byte	$35
	.byte	$40
	.byte	$05
	.byte	$90
	.byte	$43
	.byte	$4E
	.byte	$23
	.byte	$20
	.byte	$44
	.byte	$4F
	.byte	$24
	.byte	$23
_scr_4_03:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$60
	.byte	$0B
	.byte	$0C
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$0C
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$0C
	.byte	$10
	.byte	$1C
	.byte	$30
	.byte	$05
	.byte	$1C
	.byte	$20
	.byte	$1B
	.byte	$10
	.byte	$0B
	.byte	$0C
	.byte	$40
	.byte	$05
	.byte	$0C
	.byte	$20
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$0C
	.byte	$15
	.byte	$10
	.byte	$C5
	.byte	$F0
	.byte	$30
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$20
	.byte	$F3
	.byte	$24
_scr_4_04:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$1C
	.byte	$C0
	.byte	$0B
	.byte	$05
	.byte	$0C
	.byte	$0B
	.byte	$40
	.byte	$25
	.byte	$30
	.byte	$1C
	.byte	$1B
	.byte	$15
	.byte	$90
	.byte	$2B
	.byte	$B0
	.byte	$05
	.byte	$E0
	.byte	$03
	.byte	$B0
	.byte	$23
	.byte	$04
	.byte	$BE
	.byte	$24
	.byte	$05
	.byte	$BF
_scr_4_05:
	.byte	$F0
	.byte	$F0
	.byte	$50
	.byte	$0B
	.byte	$E0
	.byte	$0B
	.byte	$50
	.byte	$05
	.byte	$80
	.byte	$1B
	.byte	$60
	.byte	$25
	.byte	$0C
	.byte	$50
	.byte	$0C
	.byte	$70
	.byte	$0C
	.byte	$50
	.byte	$0C
	.byte	$70
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$90
	.byte	$05
	.byte	$90
	.byte	$CE
	.byte	$23
	.byte	$CF
	.byte	$24
_scr_4_06:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$05
	.byte	$80
	.byte	$25
	.byte	$02
	.byte	$15
	.byte	$80
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$30
	.byte	$25
	.byte	$C0
	.byte	$01
	.byte	$1D
	.byte	$05
	.byte	$B0
	.byte	$01
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$F3
	.byte	$F4
_scr_4_07:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$80
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$1B
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$60
	.byte	$0C
	.byte	$1B
	.byte	$05
	.byte	$1B
	.byte	$05
	.byte	$1B
	.byte	$0C
	.byte	$40
	.byte	$0C
	.byte	$1B
	.byte	$50
	.byte	$1B
	.byte	$0C
	.byte	$30
	.byte	$05
	.byte	$0B
	.byte	$70
	.byte	$0B
	.byte	$05
	.byte	$F0
	.byte	$10
	.byte	$13
	.byte	$BE
	.byte	$13
	.byte	$14
	.byte	$BF
	.byte	$14
_scr_4_08:
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$60
	.byte	$05
	.byte	$60
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$02
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$90
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$1E
	.byte	$23
	.byte	$1E
	.byte	$43
	.byte	$34
	.byte	$1F
	.byte	$24
	.byte	$1F
	.byte	$44
_scr_4_09:
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$40
	.byte	$25
	.byte	$10
	.byte	$15
	.byte	$10
	.byte	$15
	.byte	$F0
	.byte	$10
	.byte	$0C
	.byte	$E0
	.byte	$0B
	.byte	$E0
	.byte	$0C
	.byte	$40
	.byte	$15
	.byte	$10
	.byte	$25
	.byte	$0A
	.byte	$10
	.byte	$0B
	.byte	$B0
	.byte	$53
	.byte	$9E
	.byte	$54
	.byte	$9F
_scr_4_0a:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$A0
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$C0
	.byte	$25
	.byte	$C0
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$45
	.byte	$30
	.byte	$05
	.byte	$50
	.byte	$25
	.byte	$60
	.byte	$15
	.byte	$03
	.byte	$10
	.byte	$35
	.byte	$8E
	.byte	$04
	.byte	$53
	.byte	$8F
	.byte	$05
	.byte	$54
_scr_4_0b:
	.byte	$F0
	.byte	$E0
	.byte	$05
	.byte	$D0
	.byte	$15
	.byte	$D0
	.byte	$25
	.byte	$C0
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$25
	.byte	$30
	.byte	$5C
	.byte	$20
	.byte	$35
	.byte	$20
	.byte	$5C
	.byte	$20
	.byte	$35
	.byte	$20
	.byte	$5C
	.byte	$20
	.byte	$45
	.byte	$10
	.byte	$5C
	.byte	$10
	.byte	$25
	.byte	$63
	.byte	$10
	.byte	$63
	.byte	$64
	.byte	$1E
	.byte	$64
_map_4:
	.addr	_scr_4_00
	.addr	_scr_4_01
	.addr	_scr_4_02
	.addr	_scr_4_03
	.addr	_scr_4_04
	.addr	_scr_4_05
	.addr	_scr_4_06
	.addr	_scr_4_07
	.addr	_scr_4_08
	.addr	_scr_4_09
	.addr	_scr_4_0a
	.addr	_scr_4_0b
_scr_5_00:
	.byte	$42
	.byte	$A1
	.byte	$20
	.byte	$03
	.byte	$70
	.byte	$31
	.byte	$90
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0B
	.byte	$E0
	.byte	$0B
	.byte	$C0
	.byte	$0D
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$0D
	.byte	$00
	.byte	$0B
	.byte	$30
	.byte	$0E
	.byte	$0B
	.byte	$70
	.byte	$1B
	.byte	$30
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$70
	.byte	$1B
	.byte	$10
	.byte	$0B
	.byte	$0E
	.byte	$1D
	.byte	$08
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$A4
	.byte	$10
	.byte	$24
	.byte	$A5
	.byte	$1C
	.byte	$25
_scr_5_01:
	.byte	$F1
	.byte	$F1
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$80
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$20
	.byte	$4B
	.byte	$0D
	.byte	$F0
	.byte	$0B
	.byte	$90
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$10
	.byte	$44
	.byte	$50
	.byte	$44
	.byte	$45
	.byte	$5C
	.byte	$45
_scr_5_02:
	.byte	$C1
	.byte	$22
	.byte	$51
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$E0
	.byte	$0E
	.byte	$D0
	.byte	$16
	.byte	$20
	.byte	$16
	.byte	$40
	.byte	$0E
	.byte	$80
	.byte	$03
	.byte	$40
	.byte	$0D
	.byte	$E0
	.byte	$0D
	.byte	$E0
	.byte	$0B
	.byte	$C0
	.byte	$24
	.byte	$A0
	.byte	$14
	.byte	$25
	.byte	$AC
	.byte	$15
_scr_5_03:
	.byte	$12
	.byte	$51
	.byte	$0B
	.byte	$61
	.byte	$40
	.byte	$21
	.byte	$0B
	.byte	$21
	.byte	$B0
	.byte	$0B
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$70
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$0E
	.byte	$50
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$50
	.byte	$0B
	.byte	$30
	.byte	$0E
	.byte	$20
	.byte	$0B
	.byte	$50
	.byte	$0B
	.byte	$08
	.byte	$20
	.byte	$0E
	.byte	$20
	.byte	$0B
	.byte	$20
	.byte	$84
	.byte	$10
	.byte	$44
	.byte	$85
	.byte	$1C
	.byte	$45
_scr_5_04:
	.byte	$21
	.byte	$12
	.byte	$0B
	.byte	$72
	.byte	$11
	.byte	$40
	.byte	$0D
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$0B
	.byte	$D0
	.byte	$0B
	.byte	$0E
	.byte	$20
	.byte	$0B
	.byte	$0D
	.byte	$1B
	.byte	$1D
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$1E
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$0E
	.byte	$70
	.byte	$0B
	.byte	$0E
	.byte	$00
	.byte	$0B
	.byte	$20
	.byte	$0E
	.byte	$80
	.byte	$2B
	.byte	$1D
	.byte	$5B
	.byte	$80
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$50
	.byte	$14
	.byte	$B0
	.byte	$14
	.byte	$15
	.byte	$BC
	.byte	$15
_scr_5_05:
	.byte	$F1
	.byte	$B0
	.byte	$31
	.byte	$30
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$50
	.byte	$DB
	.byte	$30
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$0B
	.byte	$20
	.byte	$0E
	.byte	$30
	.byte	$0E
	.byte	$60
	.byte	$2B
	.byte	$0D
	.byte	$5B
	.byte	$0D
	.byte	$1B
	.byte	$20
	.byte	$0B
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0E
	.byte	$30
	.byte	$0E
	.byte	$40
	.byte	$1E
	.byte	$0B
	.byte	$10
	.byte	$0E
	.byte	$30
	.byte	$0E
	.byte	$40
	.byte	$1E
	.byte	$0B
	.byte	$24
	.byte	$20
	.byte	$14
	.byte	$20
	.byte	$44
	.byte	$25
	.byte	$2C
	.byte	$15
	.byte	$2C
	.byte	$45
_scr_5_06:
	.byte	$B1
	.byte	$32
	.byte	$51
	.byte	$F0
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$80
	.byte	$0D
	.byte	$70
	.byte	$0B
	.byte	$00
	.byte	$4E
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$56
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$4E
	.byte	$00
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$56
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$40
	.byte	$0D
	.byte	$3E
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$20
	.byte	$66
	.byte	$0B
	.byte	$10
	.byte	$08
	.byte	$00
	.byte	$F4
	.byte	$F5
_scr_5_07:
	.byte	$22
	.byte	$C1
	.byte	$00
	.byte	$03
	.byte	$90
	.byte	$31
	.byte	$60
	.byte	$03
	.byte	$F0
	.byte	$50
	.byte	$03
	.byte	$F0
	.byte	$50
	.byte	$0E
	.byte	$30
	.byte	$0E
	.byte	$90
	.byte	$0D
	.byte	$30
	.byte	$0D
	.byte	$70
	.byte	$06
	.byte	$00
	.byte	$0D
	.byte	$30
	.byte	$0D
	.byte	$00
	.byte	$06
	.byte	$70
	.byte	$0D
	.byte	$30
	.byte	$0D
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$40
	.byte	$14
	.byte	$B0
	.byte	$14
	.byte	$15
	.byte	$BC
	.byte	$15
_scr_5_08:
	.byte	$F1
	.byte	$F1
	.byte	$A0
	.byte	$41
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$F0
	.byte	$30
	.byte	$03
	.byte	$60
	.byte	$0B
	.byte	$D0
	.byte	$0B
	.byte	$0E
	.byte	$E0
	.byte	$0B
	.byte	$0E
	.byte	$D0
	.byte	$0E
	.byte	$0B
	.byte	$D0
	.byte	$0B
	.byte	$0E
	.byte	$10
	.byte	$0B
	.byte	$40
	.byte	$14
	.byte	$20
	.byte	$54
	.byte	$20
	.byte	$14
	.byte	$15
	.byte	$2C
	.byte	$55
	.byte	$2C
	.byte	$15
_scr_5_09:
	.byte	$41
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$B1
	.byte	$40
	.byte	$91
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$41
	.byte	$C0
	.byte	$21
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$03
	.byte	$20
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$60
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$40
	.byte	$14
	.byte	$B0
	.byte	$14
	.byte	$15
	.byte	$BC
	.byte	$15
_scr_5_0a:
	.byte	$71
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$12
	.byte	$81
	.byte	$80
	.byte	$11
	.byte	$0B
	.byte	$11
	.byte	$10
	.byte	$03
	.byte	$40
	.byte	$0B
	.byte	$10
	.byte	$11
	.byte	$0B
	.byte	$20
	.byte	$03
	.byte	$1B
	.byte	$30
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$1B
	.byte	$30
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$60
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$40
	.byte	$14
	.byte	$B0
	.byte	$14
	.byte	$15
	.byte	$BC
	.byte	$15
_scr_5_0b:
	.byte	$F1
	.byte	$40
	.byte	$A1
	.byte	$A0
	.byte	$41
	.byte	$80
	.byte	$03
	.byte	$10
	.byte	$31
	.byte	$A0
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$0B
	.byte	$C0
	.byte	$03
	.byte	$00
	.byte	$0B
	.byte	$E0
	.byte	$0B
	.byte	$40
	.byte	$0E
	.byte	$80
	.byte	$0B
	.byte	$30
	.byte	$2E
	.byte	$40
	.byte	$24
	.byte	$0B
	.byte	$20
	.byte	$4E
	.byte	$30
	.byte	$25
	.byte	$0B
	.byte	$F4
	.byte	$F5
_map_5:
	.addr	_scr_5_00
	.addr	_scr_5_01
	.addr	_scr_5_02
	.addr	_scr_5_03
	.addr	_scr_5_04
	.addr	_scr_5_05
	.addr	_scr_5_06
	.addr	_scr_5_07
	.addr	_scr_5_08
	.addr	_scr_5_09
	.addr	_scr_5_0a
	.addr	_scr_5_0b
_scr_6_00:
	.byte	$F0
	.byte	$07
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$47
	.byte	$30
	.byte	$17
	.byte	$40
	.byte	$37
	.byte	$80
	.byte	$47
	.byte	$30
	.byte	$07
	.byte	$70
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$1C
	.byte	$80
	.byte	$2C
	.byte	$17
	.byte	$22
	.byte	$0C
	.byte	$50
	.byte	$0C
	.byte	$32
	.byte	$07
	.byte	$21
	.byte	$12
	.byte	$30
	.byte	$12
	.byte	$31
_scr_6_01:
	.byte	$E0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$B0
	.byte	$07
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$37
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$17
	.byte	$B0
	.byte	$07
	.byte	$0B
	.byte	$17
	.byte	$0B
	.byte	$07
	.byte	$90
	.byte	$47
	.byte	$70
	.byte	$1E
	.byte	$10
	.byte	$37
	.byte	$00
	.byte	$1D
	.byte	$02
	.byte	$30
	.byte	$0E
	.byte	$1D
	.byte	$00
	.byte	$47
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$35
	.byte	$02
	.byte	$00
	.byte	$1D
	.byte	$17
	.byte	$22
	.byte	$0B
	.byte	$02
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$02
	.byte	$0B
	.byte	$22
	.byte	$51
	.byte	$30
	.byte	$51
_scr_6_04:
	.byte	$57
	.byte	$30
	.byte	$77
	.byte	$A0
	.byte	$37
	.byte	$C0
	.byte	$27
	.byte	$D0
	.byte	$17
	.byte	$E0
	.byte	$07
	.byte	$E0
	.byte	$07
	.byte	$23
	.byte	$B0
	.byte	$07
	.byte	$10
	.byte	$03
	.byte	$B0
	.byte	$07
	.byte	$10
	.byte	$03
	.byte	$1E
	.byte	$90
	.byte	$07
	.byte	$10
	.byte	$0F
	.byte	$2E
	.byte	$39
	.byte	$00
	.byte	$09
	.byte	$20
	.byte	$07
	.byte	$10
	.byte	$C2
	.byte	$07
	.byte	$10
	.byte	$C4
_scr_6_05:
	.byte	$57
	.byte	$30
	.byte	$77
	.byte	$20
	.byte	$07
	.byte	$30
	.byte	$17
	.byte	$20
	.byte	$17
	.byte	$80
	.byte	$07
	.byte	$30
	.byte	$17
	.byte	$F0
	.byte	$F0
	.byte	$50
	.byte	$29
	.byte	$B0
	.byte	$32
	.byte	$A0
	.byte	$02
	.byte	$34
	.byte	$09
	.byte	$90
	.byte	$01
	.byte	$34
	.byte	$02
	.byte	$A0
	.byte	$01
	.byte	$14
	.byte	$11
	.byte	$40
	.byte	$02
	.byte	$50
	.byte	$11
	.byte	$50
	.byte	$02
	.byte	$04
	.byte	$D0
	.byte	$04
_scr_6_06:
	.byte	$F7
	.byte	$17
	.byte	$60
	.byte	$77
	.byte	$80
	.byte	$57
	.byte	$B0
	.byte	$37
	.byte	$C0
	.byte	$27
	.byte	$80
	.byte	$07
	.byte	$00
	.byte	$2E
	.byte	$17
	.byte	$A0
	.byte	$3E
	.byte	$07
	.byte	$60
	.byte	$07
	.byte	$10
	.byte	$3E
	.byte	$17
	.byte	$80
	.byte	$4E
	.byte	$17
	.byte	$20
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$09
	.byte	$4E
	.byte	$27
	.byte	$A2
	.byte	$10
	.byte	$22
	.byte	$A4
	.byte	$02
	.byte	$00
	.byte	$24
_scr_6_07:
	.byte	$F7
	.byte	$57
	.byte	$10
	.byte	$0A
	.byte	$A7
	.byte	$40
	.byte	$2A
	.byte	$77
	.byte	$80
	.byte	$57
	.byte	$43
	.byte	$20
	.byte	$13
	.byte	$47
	.byte	$0A
	.byte	$40
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$1A
	.byte	$27
	.byte	$0A
	.byte	$B0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$D0
	.byte	$17
	.byte	$03
	.byte	$0B
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$0B
	.byte	$03
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$07
_scr_6_08:
	.byte	$07
	.byte	$10
	.byte	$D7
	.byte	$20
	.byte	$1E
	.byte	$A7
	.byte	$20
	.byte	$1E
	.byte	$03
	.byte	$10
	.byte	$27
	.byte	$00
	.byte	$47
	.byte	$10
	.byte	$1E
	.byte	$03
	.byte	$10
	.byte	$17
	.byte	$20
	.byte	$37
	.byte	$10
	.byte	$1E
	.byte	$03
	.byte	$60
	.byte	$27
	.byte	$20
	.byte	$1E
	.byte	$0F
	.byte	$60
	.byte	$27
	.byte	$20
	.byte	$0E
	.byte	$22
	.byte	$50
	.byte	$27
	.byte	$20
	.byte	$02
	.byte	$24
	.byte	$02
	.byte	$50
	.byte	$17
	.byte	$20
	.byte	$44
	.byte	$02
	.byte	$20
	.byte	$42
	.byte	$10
	.byte	$54
	.byte	$20
	.byte	$44
	.byte	$12
	.byte	$54
	.byte	$20
	.byte	$C4
	.byte	$20
	.byte	$24
_scr_6_09:
	.byte	$07
	.byte	$D0
	.byte	$17
	.byte	$00
	.byte	$06
	.byte	$B0
	.byte	$17
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$90
	.byte	$17
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$40
	.byte	$06
	.byte	$30
	.byte	$17
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$20
	.byte	$06
	.byte	$30
	.byte	$17
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$17
	.byte	$A0
	.byte	$1C
	.byte	$00
	.byte	$17
	.byte	$A0
	.byte	$52
	.byte	$90
	.byte	$54
	.byte	$02
	.byte	$89
	.byte	$64
	.byte	$82
	.byte	$F4
	.byte	$34
_scr_6_0a:
	.byte	$B7
	.byte	$00
	.byte	$67
	.byte	$90
	.byte	$37
	.byte	$C0
	.byte	$27
	.byte	$C0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$D9
	.byte	$07
	.byte	$F2
	.byte	$F4
_scr_6_0b:
	.byte	$07
	.byte	$D0
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$A0
	.byte	$57
	.byte	$30
	.byte	$53
	.byte	$67
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$67
	.byte	$30
	.byte	$0F
	.byte	$40
	.byte	$57
	.byte	$73
	.byte	$20
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$C0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$C0
	.byte	$27
	.byte	$A0
	.byte	$37
_scr_6_0c:
	.byte	$84
	.byte	$01
	.byte	$20
	.byte	$11
	.byte	$44
	.byte	$41
	.byte	$50
	.byte	$01
	.byte	$24
	.byte	$01
	.byte	$20
	.byte	$0E
	.byte	$60
	.byte	$03
	.byte	$14
	.byte	$01
	.byte	$30
	.byte	$0E
	.byte	$60
	.byte	$03
	.byte	$11
	.byte	$20
	.byte	$93
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$0E
	.byte	$30
	.byte	$07
	.byte	$10
	.byte	$0C
	.byte	$60
	.byte	$0E
	.byte	$30
	.byte	$07
	.byte	$10
	.byte	$C3
	.byte	$17
	.byte	$D0
	.byte	$17
	.byte	$0C
	.byte	$10
	.byte	$5E
	.byte	$40
	.byte	$27
	.byte	$10
	.byte	$5E
	.byte	$40
	.byte	$F2
_scr_6_0d:
	.byte	$D4
	.byte	$F1
	.byte	$10
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$70
	.byte	$83
	.byte	$F0
	.byte	$03
	.byte	$F0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$00
	.byte	$F2
	.byte	$A4
_scr_6_0e:
	.byte	$F1
	.byte	$20
	.byte	$03
	.byte	$50
	.byte	$0E
	.byte	$70
	.byte	$03
	.byte	$20
	.byte	$0D
	.byte	$33
	.byte	$70
	.byte	$13
	.byte	$0D
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$70
	.byte	$0E
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$70
	.byte	$0E
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$83
	.byte	$20
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$0D
	.byte	$C0
	.byte	$F2
	.byte	$F4
	.byte	$54
_scr_6_0f:
	.byte	$01
	.byte	$A0
	.byte	$37
	.byte	$00
	.byte	$03
	.byte	$90
	.byte	$37
	.byte	$10
	.byte	$03
	.byte	$70
	.byte	$02
	.byte	$27
	.byte	$04
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$20
	.byte	$0D
	.byte	$60
	.byte	$44
	.byte	$20
	.byte	$03
	.byte	$50
	.byte	$02
	.byte	$44
	.byte	$20
	.byte	$03
	.byte	$50
	.byte	$54
	.byte	$10
	.byte	$03
	.byte	$0E
	.byte	$40
	.byte	$02
	.byte	$54
	.byte	$00
	.byte	$03
	.byte	$1E
	.byte	$10
	.byte	$22
	.byte	$64
	.byte	$52
	.byte	$F4
	.byte	$F4
	.byte	$94
_map_6:
	.addr	_scr_6_00
	.addr	_scr_6_01
	.word	$0000
	.word	$0000
	.addr	_scr_6_04
	.addr	_scr_6_05
	.addr	_scr_6_06
	.addr	_scr_6_07
	.addr	_scr_6_08
	.addr	_scr_6_09
	.addr	_scr_6_0a
	.addr	_scr_6_0b
	.addr	_scr_6_0c
	.addr	_scr_6_0d
	.addr	_scr_6_0e
	.addr	_scr_6_0f
_map_6_locks:
	.byte	$04
	.byte	$93
	.byte	$08
	.byte	$56
	.byte	$0B
	.byte	$58
_scr_7_01:
	.byte	$23
	.byte	$00
	.byte	$23
	.byte	$10
	.byte	$23
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$C0
	.byte	$01
	.byte	$13
	.byte	$01
	.byte	$90
	.byte	$21
	.byte	$73
	.byte	$19
	.byte	$63
_scr_7_05:
	.byte	$63
	.byte	$10
	.byte	$73
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$50
	.byte	$13
	.byte	$40
	.byte	$01
	.byte	$70
	.byte	$13
	.byte	$30
	.byte	$21
	.byte	$60
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$0A
	.byte	$13
	.byte	$1A
	.byte	$13
	.byte	$0A
	.byte	$03
	.byte	$10
	.byte	$23
	.byte	$B0
	.byte	$23
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$60
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$40
	.byte	$8C
	.byte	$13
	.byte	$09
	.byte	$10
	.byte	$B3
_scr_7_06:
	.byte	$03
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$F3
	.byte	$03
_scr_7_07:
	.byte	$63
	.byte	$10
	.byte	$73
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$50
	.byte	$13
	.byte	$40
	.byte	$01
	.byte	$70
	.byte	$13
	.byte	$30
	.byte	$21
	.byte	$60
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$0A
	.byte	$13
	.byte	$1A
	.byte	$13
	.byte	$0A
	.byte	$03
	.byte	$10
	.byte	$23
	.byte	$B0
	.byte	$23
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$70
	.byte	$21
	.byte	$13
	.byte	$31
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$21
	.byte	$73
	.byte	$10
	.byte	$43
	.byte	$00
	.byte	$03
_scr_7_08:
	.byte	$21
	.byte	$B0
	.byte	$03
	.byte	$11
	.byte	$C0
	.byte	$03
	.byte	$11
	.byte	$C0
	.byte	$03
	.byte	$01
	.byte	$D0
	.byte	$03
	.byte	$01
	.byte	$D0
	.byte	$03
	.byte	$01
	.byte	$2E
	.byte	$A0
	.byte	$03
	.byte	$11
	.byte	$1E
	.byte	$80
	.byte	$23
	.byte	$11
	.byte	$0E
	.byte	$2D
	.byte	$60
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$0D
	.byte	$2E
	.byte	$0D
	.byte	$80
	.byte	$03
	.byte	$01
	.byte	$6D
	.byte	$60
	.byte	$03
	.byte	$11
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$2D
	.byte	$70
	.byte	$C1
	.byte	$23
_scr_7_09:
	.byte	$03
	.byte	$09
	.byte	$10
	.byte	$C3
	.byte	$09
	.byte	$C0
	.byte	$13
	.byte	$09
	.byte	$C0
	.byte	$13
	.byte	$09
	.byte	$C0
	.byte	$33
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$06
	.byte	$10
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$70
	.byte	$06
	.byte	$40
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$03
	.byte	$0F
	.byte	$40
	.byte	$05
	.byte	$70
	.byte	$23
	.byte	$20
	.byte	$73
	.byte	$1C
	.byte	$03
_scr_7_0b:
	.byte	$63
	.byte	$10
	.byte	$43
	.byte	$00
	.byte	$13
	.byte	$60
	.byte	$13
	.byte	$3E
	.byte	$00
	.byte	$13
	.byte	$70
	.byte	$03
	.byte	$3E
	.byte	$00
	.byte	$13
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$13
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$33
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$23
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$13
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$13
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$13
	.byte	$09
	.byte	$C0
	.byte	$13
	.byte	$20
	.byte	$7C
	.byte	$20
	.byte	$13
	.byte	$00
	.byte	$A3
	.byte	$10
	.byte	$03
_scr_7_0d:
	.byte	$13
	.byte	$20
	.byte	$D3
	.byte	$B0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$1A
	.byte	$00
	.byte	$2A
	.byte	$70
	.byte	$13
	.byte	$40
	.byte	$0E
	.byte	$80
	.byte	$03
	.byte	$40
	.byte	$0E
	.byte	$80
	.byte	$03
	.byte	$40
	.byte	$0E
	.byte	$80
	.byte	$23
	.byte	$07
	.byte	$B3
_scr_7_0e:
	.byte	$03
	.byte	$30
	.byte	$04
	.byte	$80
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$70
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$33
	.byte	$80
	.byte	$04
	.byte	$20
	.byte	$33
	.byte	$20
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$B0
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$B0
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$B0
	.byte	$0F
	.byte	$00
	.byte	$33
	.byte	$08
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$1C
	.byte	$23
_scr_7_0f:
	.byte	$03
	.byte	$00
	.byte	$A3
	.byte	$10
	.byte	$13
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$23
	.byte	$A0
	.byte	$04
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$A0
	.byte	$23
	.byte	$0A
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$00
	.byte	$23
	.byte	$C0
	.byte	$23
	.byte	$C0
	.byte	$23
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$23
	.byte	$C0
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$50
	.byte	$1A
	.byte	$3E
	.byte	$0A
	.byte	$03
	.byte	$00
	.byte	$0F
	.byte	$50
	.byte	$2E
	.byte	$0A
	.byte	$03
	.byte	$0E
	.byte	$00
	.byte	$43
	.byte	$20
	.byte	$03
	.byte	$08
	.byte	$33
	.byte	$08
	.byte	$13
_scr_7_10:
	.byte	$F3
	.byte	$03
	.byte	$60
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$30
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$A0
	.byte	$2A
	.byte	$13
	.byte	$A0
	.byte	$0A
	.byte	$0E
	.byte	$0A
	.byte	$0F
	.byte	$03
	.byte	$90
	.byte	$19
	.byte	$33
	.byte	$C0
	.byte	$23
	.byte	$80
	.byte	$0C
	.byte	$30
	.byte	$13
	.byte	$60
	.byte	$23
	.byte	$30
	.byte	$13
	.byte	$1C
	.byte	$50
	.byte	$04
	.byte	$40
	.byte	$53
	.byte	$90
	.byte	$03
_scr_7_11:
	.byte	$F3
	.byte	$03
	.byte	$30
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$30
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$F0
	.byte	$E0
	.byte	$03
	.byte	$09
	.byte	$20
	.byte	$63
	.byte	$30
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$90
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$90
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$90
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$90
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$4C
	.byte	$43
_scr_7_12:
	.byte	$F3
	.byte	$50
	.byte	$04
	.byte	$0E
	.byte	$0A
	.byte	$04
	.byte	$10
	.byte	$03
	.byte	$90
	.byte	$1A
	.byte	$20
	.byte	$03
	.byte	$80
	.byte	$13
	.byte	$07
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$09
	.byte	$03
	.byte	$40
	.byte	$09
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$50
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$50
	.byte	$33
	.byte	$30
	.byte	$09
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$21
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$01
	.byte	$73
	.byte	$1C
	.byte	$13
	.byte	$1C
	.byte	$11
_scr_7_13:
	.byte	$33
	.byte	$20
	.byte	$83
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$A0
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$A0
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$06
	.byte	$50
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$13
	.byte	$20
	.byte	$09
	.byte	$40
	.byte	$13
	.byte	$20
	.byte	$13
	.byte	$16
	.byte	$20
	.byte	$15
	.byte	$20
	.byte	$03
	.byte	$20
	.byte	$13
	.byte	$90
	.byte	$03
	.byte	$20
	.byte	$13
	.byte	$9C
	.byte	$03
	.byte	$10
	.byte	$13
_scr_7_14:
	.byte	$43
	.byte	$00
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$13
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$30
	.byte	$0A
	.byte	$03
	.byte	$1A
	.byte	$03
	.byte	$0A
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$0A
	.byte	$0E
	.byte	$1A
	.byte	$0E
	.byte	$0A
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$0A
	.byte	$0E
	.byte	$1A
	.byte	$0E
	.byte	$0A
	.byte	$40
	.byte	$53
	.byte	$08
	.byte	$1C
	.byte	$08
	.byte	$F3
	.byte	$53
_scr_7_15:
	.byte	$13
	.byte	$10
	.byte	$B3
	.byte	$F0
	.byte	$D0
	.byte	$13
	.byte	$10
	.byte	$A9
	.byte	$00
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$90
	.byte	$04
	.byte	$20
	.byte	$13
	.byte	$10
	.byte	$04
	.byte	$A0
	.byte	$13
	.byte	$30
	.byte	$04
	.byte	$80
	.byte	$13
	.byte	$70
	.byte	$04
	.byte	$40
	.byte	$0B
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$13
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$F3
	.byte	$23
_scr_7_16:
	.byte	$F3
	.byte	$20
	.byte	$04
	.byte	$10
	.byte	$14
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$13
	.byte	$09
	.byte	$C0
	.byte	$13
	.byte	$90
	.byte	$03
	.byte	$20
	.byte	$13
	.byte	$90
	.byte	$03
	.byte	$20
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$60
	.byte	$23
	.byte	$09
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$60
	.byte	$04
	.byte	$10
	.byte	$09
	.byte	$43
	.byte	$10
	.byte	$13
	.byte	$50
	.byte	$09
	.byte	$03
	.byte	$50
	.byte	$13
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$03
	.byte	$50
	.byte	$13
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$23
	.byte	$C0
	.byte	$23
	.byte	$CC
	.byte	$03
_scr_7_17:
	.byte	$B3
	.byte	$10
	.byte	$23
	.byte	$20
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$09
	.byte	$00
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$13
	.byte	$B0
	.byte	$11
	.byte	$13
	.byte	$80
	.byte	$0C
	.byte	$31
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$0A
	.byte	$13
	.byte	$0A
	.byte	$13
	.byte	$0A
	.byte	$53
	.byte	$D0
	.byte	$13
	.byte	$D0
	.byte	$21
	.byte	$80
	.byte	$71
	.byte	$A0
	.byte	$41
	.byte	$AC
	.byte	$11
_map_7:
	.word	$0000
	.addr	_scr_7_01
	.word	$0000
	.addr	_scr_7_01
	.word	$0000
	.addr	_scr_7_05
	.addr	_scr_7_06
	.addr	_scr_7_07
	.addr	_scr_7_08
	.addr	_scr_7_09
	.word	$0000
	.addr	_scr_7_0b
	.word	$0000
	.addr	_scr_7_0d
	.addr	_scr_7_0e
	.addr	_scr_7_0f
	.addr	_scr_7_10
	.addr	_scr_7_11
	.addr	_scr_7_12
	.addr	_scr_7_13
	.addr	_scr_7_14
	.addr	_scr_7_15
	.addr	_scr_7_16
	.addr	_scr_7_17
_map_7_locks:
	.byte	$09
	.byte	$A0
	.byte	$0E
	.byte	$AE
	.byte	$0F
	.byte	$A1
	.byte	$10
	.byte	$5F
_scr_8_00:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$A0
	.byte	$0C
	.byte	$20
	.byte	$05
	.byte	$A0
	.byte	$0B
	.byte	$0C
	.byte	$10
	.byte	$15
	.byte	$30
	.byte	$08
	.byte	$40
	.byte	$1C
	.byte	$10
	.byte	$25
	.byte	$10
	.byte	$08
	.byte	$29
	.byte	$0A
	.byte	$10
	.byte	$0B
	.byte	$0C
	.byte	$10
	.byte	$F3
	.byte	$F4
_scr_8_01:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$0C
	.byte	$E0
	.byte	$0C
	.byte	$C0
	.byte	$23
	.byte	$2E
	.byte	$0B
	.byte	$2E
	.byte	$0B
	.byte	$1E
	.byte	$23
	.byte	$24
	.byte	$2F
	.byte	$0B
	.byte	$2F
	.byte	$0B
	.byte	$1F
	.byte	$24
_scr_8_02:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$C0
	.byte	$0C
	.byte	$60
	.byte	$05
	.byte	$60
	.byte	$2B
	.byte	$F0
	.byte	$20
	.byte	$05
	.byte	$60
	.byte	$05
	.byte	$90
	.byte	$05
	.byte	$50
	.byte	$0C
	.byte	$E0
	.byte	$25
	.byte	$30
	.byte	$05
	.byte	$A0
	.byte	$13
	.byte	$DE
	.byte	$14
	.byte	$DF
_scr_8_03:
	.byte	$F0
	.byte	$F0
	.byte	$00
	.byte	$0C
	.byte	$E0
	.byte	$0C
	.byte	$D0
	.byte	$1B
	.byte	$30
	.byte	$0C
	.byte	$D0
	.byte	$0C
	.byte	$0B
	.byte	$60
	.byte	$15
	.byte	$30
	.byte	$45
	.byte	$70
	.byte	$0C
	.byte	$90
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$90
	.byte	$15
	.byte	$F0
	.byte	$10
	.byte	$FE
	.byte	$FF
_scr_8_04:
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$0C
	.byte	$E0
	.byte	$0C
	.byte	$A0
	.byte	$0C
	.byte	$20
	.byte	$0C
	.byte	$90
	.byte	$15
	.byte	$0C
	.byte	$10
	.byte	$15
	.byte	$20
	.byte	$0C
	.byte	$50
	.byte	$15
	.byte	$60
	.byte	$0C
	.byte	$60
	.byte	$15
	.byte	$50
	.byte	$05
	.byte	$E0
	.byte	$0C
	.byte	$20
	.byte	$15
	.byte	$80
	.byte	$15
	.byte	$40
	.byte	$FE
	.byte	$FF
_scr_8_05:
	.byte	$F0
	.byte	$F0
	.byte	$60
	.byte	$25
	.byte	$B0
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$90
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$80
	.byte	$15
	.byte	$20
	.byte	$05
	.byte	$D0
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$70
	.byte	$0B
	.byte	$05
	.byte	$80
	.byte	$08
	.byte	$90
	.byte	$4E
	.byte	$23
	.byte	$7E
	.byte	$4F
	.byte	$24
	.byte	$7F
_scr_8_06:
	.byte	$F0
	.byte	$F0
	.byte	$A0
	.byte	$0C
	.byte	$D0
	.byte	$1B
	.byte	$20
	.byte	$05
	.byte	$20
	.byte	$0C
	.byte	$90
	.byte	$55
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$40
	.byte	$05
	.byte	$60
	.byte	$15
	.byte	$C0
	.byte	$15
	.byte	$80
	.byte	$15
	.byte	$80
	.byte	$CE
	.byte	$05
	.byte	$1E
	.byte	$FF
_scr_8_07:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$25
	.byte	$80
	.byte	$0C
	.byte	$20
	.byte	$05
	.byte	$A0
	.byte	$0B
	.byte	$F0
	.byte	$F0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$90
	.byte	$08
	.byte	$10
	.byte	$08
	.byte	$10
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$05
	.byte	$4E
	.byte	$83
	.byte	$6F
	.byte	$84
_scr_8_08:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$1C
	.byte	$C0
	.byte	$0C
	.byte	$1B
	.byte	$0C
	.byte	$A0
	.byte	$0C
	.byte	$3B
	.byte	$0C
	.byte	$90
	.byte	$1B
	.byte	$00
	.byte	$25
	.byte	$30
	.byte	$05
	.byte	$40
	.byte	$55
	.byte	$90
	.byte	$55
	.byte	$20
	.byte	$13
	.byte	$CE
	.byte	$03
	.byte	$14
	.byte	$CF
	.byte	$04
_scr_8_09:
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$70
	.byte	$08
	.byte	$40
	.byte	$15
	.byte	$A3
	.byte	$20
	.byte	$15
	.byte	$A4
	.byte	$03
	.byte	$10
	.byte	$15
_scr_8_0a:
	.byte	$F5
	.byte	$A5
	.byte	$40
	.byte	$65
	.byte	$80
	.byte	$45
	.byte	$A0
	.byte	$45
	.byte	$A0
	.byte	$35
	.byte	$B0
	.byte	$05
	.byte	$1C
	.byte	$30
	.byte	$1C
	.byte	$60
	.byte	$05
	.byte	$1C
	.byte	$30
	.byte	$1C
	.byte	$40
	.byte	$25
	.byte	$3C
	.byte	$10
	.byte	$1C
	.byte	$60
	.byte	$05
	.byte	$3C
	.byte	$08
	.byte	$0A
	.byte	$1C
	.byte	$60
	.byte	$83
	.byte	$05
	.byte	$5E
	.byte	$84
	.byte	$15
	.byte	$4F
_scr_8_0b:
	.byte	$F5
	.byte	$20
	.byte	$45
	.byte	$20
	.byte	$25
	.byte	$50
	.byte	$25
	.byte	$40
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$B0
	.byte	$0C
	.byte	$50
	.byte	$0C
	.byte	$50
	.byte	$25
	.byte	$0C
	.byte	$40
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$20
	.byte	$25
	.byte	$20
	.byte	$15
	.byte	$20
	.byte	$15
	.byte	$F0
	.byte	$FE
	.byte	$FF
_scr_8_0c:
	.byte	$F5
	.byte	$20
	.byte	$25
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$0C
	.byte	$D0
	.byte	$1C
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$20
	.byte	$1C
	.byte	$05
	.byte	$70
	.byte	$15
	.byte	$10
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$20
	.byte	$15
	.byte	$F0
	.byte	$FE
	.byte	$FF
_scr_8_0d:
	.byte	$F5
	.byte	$20
	.byte	$75
	.byte	$80
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$15
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$20
	.byte	$45
	.byte	$F0
	.byte	$15
	.byte	$B0
	.byte	$FE
	.byte	$FF
_scr_8_0e:
	.byte	$F5
	.byte	$60
	.byte	$55
	.byte	$A0
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$A0
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$45
	.byte	$80
	.byte	$15
	.byte	$80
	.byte	$15
	.byte	$F0
	.byte	$40
	.byte	$FE
	.byte	$FF
_scr_8_0f:
	.byte	$F5
	.byte	$50
	.byte	$25
	.byte	$D0
	.byte	$05
	.byte	$70
	.byte	$25
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$0B
	.byte	$80
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$30
	.byte	$05
	.byte	$10
	.byte	$25
	.byte	$20
	.byte	$05
	.byte	$0B
	.byte	$05
	.byte	$40
	.byte	$15
	.byte	$50
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$25
	.byte	$60
	.byte	$FE
	.byte	$FF
_scr_8_10:
	.byte	$F5
	.byte	$70
	.byte	$45
	.byte	$B0
	.byte	$25
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$0C
	.byte	$10
	.byte	$05
	.byte	$B0
	.byte	$05
	.byte	$70
	.byte	$0B
	.byte	$60
	.byte	$15
	.byte	$20
	.byte	$35
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$FE
	.byte	$FF
_scr_8_11:
	.byte	$F5
	.byte	$00
	.byte	$25
	.byte	$20
	.byte	$25
	.byte	$00
	.byte	$25
	.byte	$30
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$0C
	.byte	$30
	.byte	$0C
	.byte	$90
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$70
	.byte	$15
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$35
	.byte	$20
	.byte	$15
	.byte	$F0
	.byte	$FE
	.byte	$FF
_scr_8_12:
	.byte	$F5
	.byte	$45
	.byte	$00
	.byte	$25
	.byte	$10
	.byte	$25
	.byte	$20
	.byte	$25
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$00
	.byte	$0C
	.byte	$30
	.byte	$0C
	.byte	$90
	.byte	$0B
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$0B
	.byte	$50
	.byte	$05
	.byte	$10
	.byte	$0B
	.byte	$05
	.byte	$30
	.byte	$0B
	.byte	$05
	.byte	$F0
	.byte	$40
	.byte	$DE
	.byte	$15
	.byte	$CF
	.byte	$25
_scr_8_13:
	.byte	$B5
	.byte	$10
	.byte	$15
	.byte	$10
	.byte	$45
	.byte	$00
	.byte	$25
	.byte	$20
	.byte	$15
	.byte	$10
	.byte	$35
	.byte	$20
	.byte	$05
	.byte	$20
	.byte	$25
	.byte	$10
	.byte	$25
	.byte	$60
	.byte	$35
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$35
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$35
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$1C
	.byte	$05
	.byte	$10
	.byte	$01
	.byte	$90
	.byte	$1C
	.byte	$05
	.byte	$10
	.byte	$01
	.byte	$90
	.byte	$65
	.byte	$02
	.byte	$15
	.byte	$02
	.byte	$15
	.byte	$02
	.byte	$F5
	.byte	$45
_map_8:
	.addr	_scr_8_00
	.addr	_scr_8_01
	.addr	_scr_8_02
	.addr	_scr_8_03
	.addr	_scr_8_04
	.addr	_scr_8_05
	.addr	_scr_8_06
	.addr	_scr_8_07
	.addr	_scr_8_08
	.addr	_scr_8_09
	.addr	_scr_8_0a
	.addr	_scr_8_0b
	.addr	_scr_8_0c
	.addr	_scr_8_0d
	.addr	_scr_8_0e
	.addr	_scr_8_0f
	.addr	_scr_8_10
	.addr	_scr_8_11
	.addr	_scr_8_12
	.addr	_scr_8_13
_scr_9_00:
	.byte	$F0
	.byte	$F0
	.byte	$08
	.byte	$C0
	.byte	$18
	.byte	$05
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$60
	.byte	$18
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$28
	.byte	$1B
	.byte	$18
	.byte	$15
	.byte	$60
	.byte	$25
	.byte	$10
	.byte	$15
	.byte	$A0
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$2D
	.byte	$40
	.byte	$15
	.byte	$70
	.byte	$0D
	.byte	$E0
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$10
	.byte	$19
	.byte	$05
	.byte	$29
	.byte	$05
	.byte	$59
	.byte	$05
	.byte	$10
_scr_9_01:
	.byte	$10
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$90
	.byte	$09
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$80
	.byte	$A5
	.byte	$70
	.byte	$7E
	.byte	$70
	.byte	$95
	.byte	$F0
	.byte	$30
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$E0
	.byte	$19
	.byte	$C0
_scr_9_02:
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$70
	.byte	$05
	.byte	$10
	.byte	$0D
	.byte	$E0
	.byte	$0D
	.byte	$E0
	.byte	$0D
	.byte	$E0
	.byte	$05
	.byte	$A0
	.byte	$2D
	.byte	$15
	.byte	$F0
	.byte	$20
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$09
	.byte	$20
_scr_9_03:
	.byte	$A0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$09
	.byte	$D0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$09
	.byte	$D0
	.byte	$05
	.byte	$B0
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$09
	.byte	$A0
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$09
	.byte	$70
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$F0
	.byte	$10
	.byte	$19
	.byte	$30
	.byte	$29
	.byte	$B0
_scr_9_04:
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$03
	.byte	$40
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$90
	.byte	$09
	.byte	$F0
	.byte	$E0
	.byte	$09
	.byte	$F0
	.byte	$E0
	.byte	$09
	.byte	$20
_scr_9_05:
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$80
	.byte	$05
	.byte	$F0
	.byte	$20
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$D0
	.byte	$09
	.byte	$D0
_scr_9_06:
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$30
	.byte	$15
	.byte	$F0
	.byte	$F0
	.byte	$00
	.byte	$25
	.byte	$F0
	.byte	$30
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$B0
	.byte	$05
	.byte	$F0
	.byte	$20
	.byte	$05
	.byte	$F0
	.byte	$D0
	.byte	$05
	.byte	$F0
	.byte	$05
	.byte	$30
_scr_9_08:
	.byte	$60
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$D0
	.byte	$15
	.byte	$10
	.byte	$0D
	.byte	$90
	.byte	$0D
	.byte	$30
	.byte	$0E
	.byte	$80
	.byte	$25
	.byte	$20
	.byte	$25
	.byte	$F0
	.byte	$90
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$19
	.byte	$20
_scr_9_09:
	.byte	$20
	.byte	$03
	.byte	$80
	.byte	$05
	.byte	$C0
	.byte	$25
	.byte	$F0
	.byte	$F0
	.byte	$B0
	.byte	$05
	.byte	$F0
	.byte	$F0
	.byte	$C0
	.byte	$08
	.byte	$10
	.byte	$0E
	.byte	$B0
	.byte	$05
	.byte	$08
	.byte	$2E
	.byte	$80
	.byte	$18
	.byte	$15
	.byte	$2E
	.byte	$20
	.byte	$28
	.byte	$0A
	.byte	$18
	.byte	$15
	.byte	$78
	.byte	$25
	.byte	$07
	.byte	$B5
_map_9:
	.addr	_scr_9_00
	.addr	_scr_9_01
	.addr	_scr_9_02
	.addr	_scr_9_03
	.addr	_scr_9_04
	.addr	_scr_9_05
	.addr	_scr_9_06
	.addr	_scr_9_03
	.addr	_scr_9_08
	.addr	_scr_9_09
_scr_A_00:
	.byte	$F5
	.byte	$F5
	.byte	$15
	.byte	$03
	.byte	$E5
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$25
	.byte	$00
	.byte	$35
	.byte	$01
	.byte	$70
	.byte	$13
	.byte	$00
	.byte	$25
	.byte	$11
	.byte	$00
	.byte	$0E
	.byte	$80
	.byte	$25
	.byte	$11
	.byte	$1E
	.byte	$00
	.byte	$1E
	.byte	$50
	.byte	$13
	.byte	$05
	.byte	$11
	.byte	$1E
	.byte	$00
	.byte	$1E
	.byte	$80
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$00
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$01
_scr_A_02:
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$11
	.byte	$18
	.byte	$B0
	.byte	$11
	.byte	$15
	.byte	$B0
	.byte	$11
	.byte	$00
	.byte	$03
	.byte	$B0
	.byte	$11
	.byte	$20
	.byte	$18
	.byte	$80
	.byte	$11
	.byte	$20
	.byte	$15
	.byte	$80
	.byte	$11
	.byte	$D0
	.byte	$11
	.byte	$50
	.byte	$48
	.byte	$00
	.byte	$18
	.byte	$11
	.byte	$50
	.byte	$45
	.byte	$04
	.byte	$15
	.byte	$11
	.byte	$50
	.byte	$03
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$11
	.byte	$A0
	.byte	$04
	.byte	$10
	.byte	$11
	.byte	$80
	.byte	$49
	.byte	$01
_scr_A_04:
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$11
	.byte	$90
	.byte	$05
	.byte	$20
	.byte	$11
	.byte	$90
	.byte	$15
	.byte	$10
	.byte	$11
	.byte	$B0
	.byte	$05
	.byte	$00
	.byte	$11
	.byte	$60
	.byte	$05
	.byte	$30
	.byte	$15
	.byte	$11
	.byte	$20
	.byte	$05
	.byte	$90
	.byte	$11
	.byte	$D0
	.byte	$11
	.byte	$D0
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$10
	.byte	$11
	.byte	$50
	.byte	$05
	.byte	$60
	.byte	$11
	.byte	$D0
	.byte	$11
	.byte	$B0
	.byte	$19
	.byte	$01
_scr_A_06:
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$13
	.byte	$30
	.byte	$05
	.byte	$01
	.byte	$B0
	.byte	$25
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$60
	.byte	$05
	.byte	$60
	.byte	$01
	.byte	$15
	.byte	$40
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$25
	.byte	$40
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$30
	.byte	$05
	.byte	$90
	.byte	$01
	.byte	$60
	.byte	$2E
	.byte	$40
	.byte	$01
	.byte	$60
	.byte	$2E
	.byte	$40
	.byte	$01
	.byte	$30
	.byte	$A8
	.byte	$01
	.byte	$10
	.byte	$19
	.byte	$A5
_scr_A_07:
	.byte	$F5
	.byte	$05
	.byte	$60
	.byte	$0E
	.byte	$20
	.byte	$35
	.byte	$70
	.byte	$0E
	.byte	$20
	.byte	$35
	.byte	$70
	.byte	$0E
	.byte	$20
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$70
	.byte	$08
	.byte	$04
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$04
	.byte	$55
	.byte	$70
	.byte	$05
	.byte	$04
	.byte	$55
	.byte	$60
	.byte	$08
	.byte	$05
	.byte	$04
	.byte	$40
	.byte	$05
	.byte	$40
	.byte	$18
	.byte	$15
	.byte	$04
	.byte	$40
	.byte	$05
	.byte	$10
	.byte	$28
	.byte	$35
	.byte	$04
	.byte	$40
	.byte	$05
	.byte	$18
	.byte	$65
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$F5
	.byte	$05
_scr_A_08:
	.byte	$01
	.byte	$30
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$19
	.byte	$15
	.byte	$00
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$01
	.byte	$30
	.byte	$05
	.byte	$90
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$D0
	.byte	$01
	.byte	$19
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$10
	.byte	$19
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$19
	.byte	$C0
_scr_A_0a:
	.byte	$01
	.byte	$60
	.byte	$13
	.byte	$10
	.byte	$13
	.byte	$10
	.byte	$01
	.byte	$19
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$10
	.byte	$19
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$19
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$F8
	.byte	$F5
_scr_A_0b:
	.byte	$40
	.byte	$A5
	.byte	$A0
	.byte	$45
	.byte	$80
	.byte	$15
	.byte	$20
	.byte	$15
	.byte	$50
	.byte	$1E
	.byte	$25
	.byte	$30
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$40
	.byte	$15
	.byte	$04
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$40
	.byte	$15
	.byte	$04
	.byte	$0E
	.byte	$50
	.byte	$05
	.byte	$30
	.byte	$0E
	.byte	$15
	.byte	$78
	.byte	$05
	.byte	$50
	.byte	$95
	.byte	$E0
	.byte	$05
	.byte	$08
	.byte	$39
	.byte	$90
	.byte	$15
	.byte	$D0
	.byte	$05
_scr_A_0d:
	.byte	$05
	.byte	$D0
	.byte	$25
	.byte	$C0
	.byte	$15
	.byte	$D0
	.byte	$15
	.byte	$20
	.byte	$0D
	.byte	$05
	.byte	$80
	.byte	$15
	.byte	$20
	.byte	$15
	.byte	$80
	.byte	$15
	.byte	$D0
	.byte	$15
	.byte	$10
	.byte	$0E
	.byte	$80
	.byte	$0D
	.byte	$25
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$35
	.byte	$60
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$60
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$10
	.byte	$49
	.byte	$05
	.byte	$20
	.byte	$38
	.byte	$70
	.byte	$05
	.byte	$20
	.byte	$35
_scr_A_0e:
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$70
	.byte	$1E
	.byte	$40
	.byte	$01
	.byte	$70
	.byte	$0E
	.byte	$58
	.byte	$01
	.byte	$10
	.byte	$68
	.byte	$55
	.byte	$01
	.byte	$10
	.byte	$C5
_scr_A_0f:
	.byte	$70
	.byte	$05
	.byte	$20
	.byte	$35
	.byte	$70
	.byte	$05
	.byte	$39
	.byte	$25
	.byte	$80
	.byte	$4E
	.byte	$15
	.byte	$80
	.byte	$4E
	.byte	$00
	.byte	$05
	.byte	$70
	.byte	$69
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$E0
	.byte	$05
	.byte	$38
	.byte	$A0
	.byte	$45
	.byte	$A0
	.byte	$45
	.byte	$A0
	.byte	$05
_scr_A_10:
	.byte	$01
	.byte	$10
	.byte	$C5
	.byte	$01
	.byte	$00
	.byte	$15
	.byte	$A0
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$C0
	.byte	$01
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$01
	.byte	$58
	.byte	$60
	.byte	$18
	.byte	$01
	.byte	$55
	.byte	$09
	.byte	$50
	.byte	$15
	.byte	$01
	.byte	$15
	.byte	$A0
	.byte	$15
	.byte	$01
	.byte	$05
	.byte	$D0
	.byte	$01
	.byte	$70
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$10
	.byte	$25
	.byte	$30
	.byte	$01
	.byte	$20
	.byte	$25
	.byte	$80
	.byte	$01
	.byte	$E0
_scr_A_11:
	.byte	$35
	.byte	$A0
	.byte	$45
	.byte	$A0
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$C0
	.byte	$05
	.byte	$00
	.byte	$0B
	.byte	$C0
	.byte	$05
	.byte	$28
	.byte	$30
	.byte	$09
	.byte	$0A
	.byte	$19
	.byte	$0A
	.byte	$19
	.byte	$0A
	.byte	$35
	.byte	$B0
	.byte	$35
	.byte	$B0
	.byte	$05
	.byte	$00
	.byte	$15
	.byte	$10
	.byte	$19
	.byte	$70
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$B0
	.byte	$05
	.byte	$20
	.byte	$08
	.byte	$A0
	.byte	$05
	.byte	$20
	.byte	$05
	.byte	$48
	.byte	$40
	.byte	$08
	.byte	$05
	.byte	$20
	.byte	$55
	.byte	$40
	.byte	$15
_scr_A_12:
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$38
	.byte	$B0
	.byte	$35
	.byte	$18
	.byte	$90
	.byte	$55
	.byte	$08
	.byte	$80
	.byte	$65
	.byte	$08
	.byte	$60
	.byte	$08
	.byte	$75
	.byte	$68
	.byte	$F5
	.byte	$F5
	.byte	$F5
	.byte	$05
_scr_A_13:
	.byte	$20
	.byte	$55
	.byte	$40
	.byte	$15
	.byte	$20
	.byte	$05
	.byte	$80
	.byte	$08
	.byte	$15
	.byte	$20
	.byte	$05
	.byte	$08
	.byte	$70
	.byte	$25
	.byte	$20
	.byte	$15
	.byte	$28
	.byte	$40
	.byte	$25
	.byte	$10
	.byte	$0D
	.byte	$45
	.byte	$30
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$25
	.byte	$50
	.byte	$35
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$70
	.byte	$35
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$08
	.byte	$55
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$08
	.byte	$65
	.byte	$28
	.byte	$15
	.byte	$20
	.byte	$C5
	.byte	$28
	.byte	$F5
	.byte	$55
_map_A:
	.addr	_scr_A_00
	.word	$0000
	.addr	_scr_A_02
	.word	$0000
	.addr	_scr_A_04
	.word	$0000
	.addr	_scr_A_06
	.addr	_scr_A_07
	.addr	_scr_A_08
	.word	$0000
	.addr	_scr_A_0a
	.addr	_scr_A_0b
	.word	$0000
	.addr	_scr_A_0d
	.addr	_scr_A_0e
	.addr	_scr_A_0f
	.addr	_scr_A_10
	.addr	_scr_A_11
	.addr	_scr_A_12
	.addr	_scr_A_13
_enems_0_01:
	.byte	$01
	.byte	$97
	.byte	$99
	.byte	$01
	.byte	$00
_enems_0_02:
	.byte	$02
	.byte	$9D
	.byte	$93
	.byte	$02
	.byte	$03
	.byte	$66
	.byte	$8A
	.byte	$01
	.byte	$00
_enems_0_03:
	.byte	$01
	.byte	$95
	.byte	$98
	.byte	$01
	.byte	$00
_enems_0_05:
	.byte	$03
	.byte	$6C
	.byte	$69
	.byte	$01
	.byte	$00
_enems_0_06:
	.byte	$03
	.byte	$55
	.byte	$97
	.byte	$02
	.byte	$00
_enems_0_07:
	.byte	$03
	.byte	$49
	.byte	$AA
	.byte	$02
	.byte	$00
_enems_0_08:
	.byte	$02
	.byte	$9D
	.byte	$9A
	.byte	$01
	.byte	$00
_enems_0_09:
	.byte	$01
	.byte	$92
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_0_0d:
	.byte	$04
	.byte	$5C
	.byte	$58
	.byte	$01
	.byte	$03
	.byte	$14
	.byte	$54
	.byte	$01
	.byte	$00
_enems_0_0e:
	.byte	$04
	.byte	$8D
	.byte	$87
	.byte	$01
	.byte	$00
_enems_0_0f:
	.byte	$01
	.byte	$9D
	.byte	$98
	.byte	$02
	.byte	$03
	.byte	$41
	.byte	$71
	.byte	$02
	.byte	$00
_enems_0:
	.word	$0000
	.addr	_enems_0_01
	.addr	_enems_0_02
	.addr	_enems_0_03
	.word	$0000
	.addr	_enems_0_05
	.addr	_enems_0_06
	.addr	_enems_0_07
	.addr	_enems_0_08
	.addr	_enems_0_09
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_0_0d
	.addr	_enems_0_0e
	.addr	_enems_0_0f
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$56
	.byte	$01
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_1_00:
	.byte	$02
	.byte	$A8
	.byte	$AA
	.byte	$01
	.byte	$00
_enems_1_01:
	.byte	$03
	.byte	$4B
	.byte	$6B
	.byte	$01
	.byte	$00
_enems_1_02:
	.byte	$02
	.byte	$9C
	.byte	$97
	.byte	$02
	.byte	$00
_enems_1_03:
	.byte	$02
	.byte	$7D
	.byte	$76
	.byte	$02
	.byte	$01
	.byte	$34
	.byte	$39
	.byte	$01
	.byte	$02
	.byte	$AB
	.byte	$A4
	.byte	$01
_enems_1_04:
	.byte	$02
	.byte	$46
	.byte	$4B
	.byte	$01
	.byte	$01
	.byte	$A7
	.byte	$A2
	.byte	$01
	.byte	$00
_enems_1_0a:
	.byte	$03
	.byte	$13
	.byte	$75
	.byte	$02
	.byte	$03
	.byte	$2C
	.byte	$6B
	.byte	$01
	.byte	$00
_enems_1_0b:
	.byte	$02
	.byte	$94
	.byte	$9B
	.byte	$02
	.byte	$00
_enems_1_0c:
	.byte	$03
	.byte	$3B
	.byte	$6B
	.byte	$01
	.byte	$01
	.byte	$9A
	.byte	$93
	.byte	$01
	.byte	$00
_enems_1_0d:
	.byte	$02
	.byte	$64
	.byte	$6C
	.byte	$02
	.byte	$00
_enems_1_0f:
	.byte	$03
	.byte	$5A
	.byte	$9B
	.byte	$02
	.byte	$01
	.byte	$3B
	.byte	$34
	.byte	$02
	.byte	$00
_enems_1_10:
	.byte	$02
	.byte	$97
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_1_11:
	.byte	$03
	.byte	$75
	.byte	$A8
	.byte	$02
	.byte	$00
_enems_1_13:
	.byte	$03
	.byte	$56
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_1:
	.addr	_enems_1_00
	.addr	_enems_1_01
	.addr	_enems_1_02
	.addr	_enems_1_03
	.addr	_enems_1_04
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_1_0a
	.addr	_enems_1_0b
	.addr	_enems_1_0c
	.addr	_enems_1_0d
	.word	$0000
	.addr	_enems_1_0f
	.addr	_enems_1_10
	.addr	_enems_1_11
	.word	$0000
	.addr	_enems_1_13
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$2E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_2_02:
	.byte	$03
	.byte	$46
	.byte	$69
	.byte	$02
	.byte	$00
_enems_2_03:
	.byte	$04
	.byte	$8C
	.byte	$85
	.byte	$02
	.byte	$00
_enems_2_08:
	.byte	$03
	.byte	$56
	.byte	$6A
	.byte	$02
	.byte	$00
_enems_2_09:
	.byte	$02
	.byte	$99
	.byte	$94
	.byte	$01
	.byte	$00
_enems_2_0a:
	.byte	$01
	.byte	$8A
	.byte	$88
	.byte	$01
	.byte	$03
	.byte	$28
	.byte	$3C
	.byte	$01
	.byte	$00
_enems_2_0b:
	.byte	$04
	.byte	$AB
	.byte	$A4
	.byte	$01
	.byte	$00
_enems_2_0c:
	.byte	$04
	.byte	$17
	.byte	$A7
	.byte	$02
	.byte	$00
_enems_2_0d:
	.byte	$04
	.byte	$A3
	.byte	$A9
	.byte	$02
	.byte	$00
_enems_2_0e:
	.byte	$04
	.byte	$9D
	.byte	$91
	.byte	$02
	.byte	$00
_enems_2_0f:
	.byte	$03
	.byte	$3D
	.byte	$AD
	.byte	$02
	.byte	$01
	.byte	$AB
	.byte	$A4
	.byte	$02
	.byte	$03
	.byte	$43
	.byte	$73
	.byte	$02
_enems_2_12:
	.byte	$04
	.byte	$95
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_2_14:
	.byte	$02
	.byte	$32
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$6E
	.byte	$68
	.byte	$01
	.byte	$00
_enems_2_15:
	.byte	$04
	.byte	$4E
	.byte	$8E
	.byte	$02
	.byte	$02
	.byte	$34
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$A7
	.byte	$A1
	.byte	$02
_enems_2:
	.word	$0000
	.word	$0000
	.addr	_enems_2_02
	.addr	_enems_2_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_enems_2_08
	.addr	_enems_2_09
	.addr	_enems_2_0a
	.addr	_enems_2_0b
	.addr	_enems_2_0c
	.addr	_enems_2_0d
	.addr	_enems_2_0e
	.addr	_enems_2_0f
	.word	$0000
	.word	$0000
	.addr	_enems_2_12
	.word	$0000
	.addr	_enems_2_14
	.addr	_enems_2_15
	.word	$0000
	.word	$0000
_hotspots_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$52
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$2D
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_3_00:
	.byte	$11
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$00
_enems_3_02:
	.byte	$03
	.byte	$56
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_3_03:
	.byte	$13
	.byte	$33
	.byte	$97
	.byte	$01
	.byte	$00
_enems_3_04:
	.byte	$02
	.byte	$9A
	.byte	$94
	.byte	$02
	.byte	$00
_enems_3_05:
	.byte	$01
	.byte	$6A
	.byte	$61
	.byte	$02
	.byte	$01
	.byte	$94
	.byte	$9D
	.byte	$02
	.byte	$00
_enems_3_06:
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$01
	.byte	$00
_enems_3_07:
	.byte	$03
	.byte	$95
	.byte	$9A
	.byte	$02
	.byte	$00
_enems_3_08:
	.byte	$12
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$00
_enems_3_0a:
	.byte	$13
	.byte	$18
	.byte	$98
	.byte	$01
	.byte	$00
_enems_3_0b:
	.byte	$13
	.byte	$1B
	.byte	$9B
	.byte	$01
	.byte	$00
_enems_3_0c:
	.byte	$03
	.byte	$27
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$94
	.byte	$25
	.byte	$01
	.byte	$00
_enems_3_0d:
	.byte	$02
	.byte	$68
	.byte	$64
	.byte	$02
	.byte	$01
	.byte	$92
	.byte	$9B
	.byte	$02
	.byte	$00
_enems_3_0e:
	.byte	$03
	.byte	$46
	.byte	$5A
	.byte	$01
	.byte	$00
_enems_3_0f:
	.byte	$13
	.byte	$1E
	.byte	$7E
	.byte	$01
	.byte	$00
_enems_3:
	.addr	_enems_3_00
	.word	$0000
	.addr	_enems_3_02
	.addr	_enems_3_03
	.addr	_enems_3_04
	.addr	_enems_3_05
	.addr	_enems_3_06
	.addr	_enems_3_07
	.addr	_enems_3_08
	.word	$0000
	.addr	_enems_3_0a
	.addr	_enems_3_0b
	.addr	_enems_3_0c
	.addr	_enems_3_0d
	.addr	_enems_3_0e
	.addr	_enems_3_0f
_hotspots_3:
	.byte	$02
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$9C
	.byte	$00
	.byte	$00
_enems_4_00:
	.byte	$03
	.byte	$65
	.byte	$97
	.byte	$01
	.byte	$00
_enems_4_01:
	.byte	$03
	.byte	$55
	.byte	$95
	.byte	$02
	.byte	$03
	.byte	$99
	.byte	$59
	.byte	$02
	.byte	$00
_enems_4_02:
	.byte	$27
	.byte	$0F
	.byte	$0E
	.byte	$01
	.byte	$00
_enems_4_03:
	.byte	$27
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$00
_enems_4_04:
	.byte	$03
	.byte	$36
	.byte	$35
	.byte	$01
	.byte	$00
_enems_4_05:
	.byte	$03
	.byte	$14
	.byte	$75
	.byte	$01
	.byte	$00
_enems_4_06:
	.byte	$02
	.byte	$38
	.byte	$33
	.byte	$01
	.byte	$00
_enems_4_07:
	.byte	$03
	.byte	$46
	.byte	$49
	.byte	$01
	.byte	$00
_enems_4_08:
	.byte	$02
	.byte	$4E
	.byte	$4C
	.byte	$01
	.byte	$01
	.byte	$26
	.byte	$28
	.byte	$01
	.byte	$00
_enems_4_09:
	.byte	$01
	.byte	$38
	.byte	$36
	.byte	$01
	.byte	$00
_enems_4_0a:
	.byte	$02
	.byte	$87
	.byte	$89
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$58
	.byte	$02
	.byte	$00
_enems_4_0b:
	.byte	$27
	.byte	$0E
	.byte	$1E
	.byte	$01
	.byte	$00
_enems_4:
	.addr	_enems_4_00
	.addr	_enems_4_01
	.addr	_enems_4_02
	.addr	_enems_4_03
	.addr	_enems_4_04
	.addr	_enems_4_05
	.addr	_enems_4_06
	.addr	_enems_4_07
	.addr	_enems_4_08
	.addr	_enems_4_09
	.addr	_enems_4_0a
	.addr	_enems_4_0b
_hotspots_4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$01
	.byte	$6C
_enems_5_00:
	.byte	$03
	.byte	$8D
	.byte	$5D
	.byte	$01
	.byte	$00
_enems_5_01:
	.byte	$01
	.byte	$65
	.byte	$61
	.byte	$01
	.byte	$02
	.byte	$9B
	.byte	$9E
	.byte	$01
	.byte	$00
_enems_5_02:
	.byte	$04
	.byte	$A3
	.byte	$AD
	.byte	$01
	.byte	$02
	.byte	$4C
	.byte	$4B
	.byte	$01
	.byte	$00
_enems_5_03:
	.byte	$04
	.byte	$92
	.byte	$32
	.byte	$01
	.byte	$02
	.byte	$94
	.byte	$97
	.byte	$01
	.byte	$00
_enems_5_04:
	.byte	$04
	.byte	$AD
	.byte	$A2
	.byte	$02
	.byte	$53
	.byte	$07
	.byte	$17
	.byte	$80
	.byte	$00
_enems_5_05:
	.byte	$52
	.byte	$4D
	.byte	$7D
	.byte	$80
	.byte	$01
	.byte	$53
	.byte	$56
	.byte	$02
	.byte	$00
_enems_5_06:
	.byte	$12
	.byte	$34
	.byte	$35
	.byte	$00
	.byte	$00
_enems_5_07:
	.byte	$04
	.byte	$56
	.byte	$59
	.byte	$01
	.byte	$00
_enems_5_08:
	.byte	$04
	.byte	$A4
	.byte	$64
	.byte	$01
	.byte	$03
	.byte	$16
	.byte	$46
	.byte	$02
	.byte	$00
_enems_5_09:
	.byte	$04
	.byte	$A2
	.byte	$AD
	.byte	$01
	.byte	$00
_enems_5_0a:
	.byte	$04
	.byte	$A2
	.byte	$AD
	.byte	$01
	.byte	$00
_enems_5_0b:
	.byte	$51
	.byte	$15
	.byte	$65
	.byte	$70
	.byte	$00
_enems_5:
	.addr	_enems_5_00
	.addr	_enems_5_01
	.addr	_enems_5_02
	.addr	_enems_5_03
	.addr	_enems_5_04
	.addr	_enems_5_05
	.addr	_enems_5_06
	.addr	_enems_5_07
	.addr	_enems_5_08
	.addr	_enems_5_09
	.addr	_enems_5_0a
	.addr	_enems_5_0b
_hotspots_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$97
	.byte	$01
	.byte	$5C
_enems_6_00:
	.byte	$53
	.byte	$15
	.byte	$25
	.byte	$00
	.byte	$00
_enems_6_01:
	.byte	$01
	.byte	$36
	.byte	$39
	.byte	$01
	.byte	$00
_enems_6_04:
	.byte	$02
	.byte	$14
	.byte	$2B
	.byte	$01
	.byte	$00
_enems_6_05:
	.byte	$41
	.byte	$7A
	.byte	$7B
	.byte	$60
	.byte	$00
_enems_6_06:
	.byte	$74
	.byte	$46
	.byte	$56
	.byte	$40
	.byte	$00
_enems_6_07:
	.byte	$01
	.byte	$8E
	.byte	$8C
	.byte	$01
	.byte	$02
	.byte	$81
	.byte	$83
	.byte	$01
	.byte	$00
_enems_6_08:
	.byte	$03
	.byte	$47
	.byte	$5D
	.byte	$02
	.byte	$00
_enems_6_0a:
	.byte	$11
	.byte	$51
	.byte	$52
	.byte	$00
	.byte	$11
	.byte	$6E
	.byte	$6D
	.byte	$00
	.byte	$11
	.byte	$71
	.byte	$72
	.byte	$00
_enems_6_0b:
	.byte	$01
	.byte	$54
	.byte	$57
	.byte	$01
	.byte	$02
	.byte	$59
	.byte	$5B
	.byte	$01
	.byte	$00
_enems_6_0c:
	.byte	$01
	.byte	$38
	.byte	$3E
	.byte	$02
	.byte	$02
	.byte	$6A
	.byte	$64
	.byte	$02
	.byte	$00
_enems_6_0d:
	.byte	$12
	.byte	$29
	.byte	$59
	.byte	$01
	.byte	$00
_enems_6_0e:
	.byte	$06
	.byte	$47
	.byte	$58
	.byte	$01
	.byte	$00
_enems_6_0f:
	.byte	$14
	.byte	$4A
	.byte	$44
	.byte	$60
	.byte	$00
_enems_6:
	.addr	_enems_6_00
	.addr	_enems_6_01
	.word	$0000
	.word	$0000
	.addr	_enems_6_04
	.addr	_enems_6_05
	.addr	_enems_6_06
	.addr	_enems_6_07
	.addr	_enems_6_08
	.word	$0000
	.addr	_enems_6_0a
	.addr	_enems_6_0b
	.addr	_enems_6_0c
	.addr	_enems_6_0d
	.addr	_enems_6_0e
	.addr	_enems_6_0f
_hotspots_6:
	.byte	$02
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$82
	.byte	$02
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$38
	.byte	$00
	.byte	$00
_enems_7_01:
	.byte	$06
	.byte	$1E
	.byte	$2E
	.byte	$00
	.byte	$06
	.byte	$11
	.byte	$21
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$25
	.byte	$00
_enems_7_03:
	.byte	$06
	.byte	$11
	.byte	$21
	.byte	$02
	.byte	$06
	.byte	$1E
	.byte	$2E
	.byte	$00
	.byte	$06
	.byte	$1A
	.byte	$2A
	.byte	$01
_enems_7_05:
	.byte	$04
	.byte	$96
	.byte	$9E
	.byte	$02
	.byte	$00
_enems_7_08:
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$01
	.byte	$00
_enems_7_09:
	.byte	$06
	.byte	$2D
	.byte	$2C
	.byte	$01
	.byte	$00
_enems_7_0b:
	.byte	$04
	.byte	$9E
	.byte	$92
	.byte	$01
	.byte	$00
_enems_7_0d:
	.byte	$04
	.byte	$B3
	.byte	$13
	.byte	$02
	.byte	$06
	.byte	$A1
	.byte	$A2
	.byte	$00
	.byte	$00
_enems_7_0e:
	.byte	$27
	.byte	$17
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$58
	.byte	$A8
	.byte	$01
	.byte	$00
_enems_7_0f:
	.byte	$06
	.byte	$23
	.byte	$24
	.byte	$03
	.byte	$06
	.byte	$3C
	.byte	$3B
	.byte	$03
	.byte	$04
	.byte	$4B
	.byte	$44
	.byte	$02
_enems_7_10:
	.byte	$06
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$00
_enems_7_12:
	.byte	$06
	.byte	$57
	.byte	$58
	.byte	$00
	.byte	$00
_enems_7_13:
	.byte	$09
	.byte	$0B
	.byte	$BB
	.byte	$08
	.byte	$00
_enems_7_14:
	.byte	$01
	.byte	$66
	.byte	$69
	.byte	$02
	.byte	$09
	.byte	$04
	.byte	$B4
	.byte	$08
	.byte	$00
_enems_7_15:
	.byte	$52
	.byte	$22
	.byte	$2C
	.byte	$32
	.byte	$00
_enems_7_16:
	.byte	$04
	.byte	$A2
	.byte	$AE
	.byte	$02
	.byte	$06
	.byte	$62
	.byte	$52
	.byte	$03
	.byte	$00
_enems_7_17:
	.byte	$04
	.byte	$A3
	.byte	$AD
	.byte	$02
	.byte	$00
_enems_7:
	.word	$0000
	.addr	_enems_7_01
	.word	$0000
	.addr	_enems_7_03
	.word	$0000
	.addr	_enems_7_05
	.word	$0000
	.word	$0000
	.addr	_enems_7_08
	.addr	_enems_7_09
	.word	$0000
	.addr	_enems_7_0b
	.word	$0000
	.addr	_enems_7_0d
	.addr	_enems_7_0e
	.addr	_enems_7_0f
	.addr	_enems_7_10
	.word	$0000
	.addr	_enems_7_12
	.addr	_enems_7_13
	.addr	_enems_7_14
	.addr	_enems_7_15
	.addr	_enems_7_16
	.addr	_enems_7_17
_hotspots_7:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$A2
	.byte	$03
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$4D
	.byte	$02
	.byte	$8D
_enems_8_00:
	.byte	$01
	.byte	$9B
	.byte	$94
	.byte	$02
	.byte	$00
_enems_8_01:
	.byte	$03
	.byte	$63
	.byte	$9C
	.byte	$02
	.byte	$00
_enems_8_02:
	.byte	$03
	.byte	$84
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$66
	.byte	$02
	.byte	$00
_enems_8_03:
	.byte	$06
	.byte	$78
	.byte	$77
	.byte	$01
	.byte	$00
_enems_8_04:
	.byte	$57
	.byte	$18
	.byte	$28
	.byte	$41
	.byte	$00
_enems_8_05:
	.byte	$06
	.byte	$72
	.byte	$82
	.byte	$01
	.byte	$06
	.byte	$73
	.byte	$83
	.byte	$03
	.byte	$00
_enems_8_06:
	.byte	$03
	.byte	$24
	.byte	$75
	.byte	$02
	.byte	$03
	.byte	$29
	.byte	$78
	.byte	$02
	.byte	$00
_enems_8_07:
	.byte	$57
	.byte	$1D
	.byte	$2D
	.byte	$31
	.byte	$00
_enems_8_08:
	.byte	$57
	.byte	$1D
	.byte	$2D
	.byte	$31
	.byte	$04
	.byte	$82
	.byte	$86
	.byte	$01
	.byte	$00
_enems_8_0a:
	.byte	$03
	.byte	$29
	.byte	$99
	.byte	$04
	.byte	$06
	.byte	$73
	.byte	$74
	.byte	$01
	.byte	$00
_enems_8_0b:
	.byte	$06
	.byte	$32
	.byte	$33
	.byte	$01
	.byte	$00
_enems_8_0c:
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$03
	.byte	$04
	.byte	$9E
	.byte	$91
	.byte	$02
	.byte	$00
_enems_8_0d:
	.byte	$06
	.byte	$27
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$45
	.byte	$6B
	.byte	$02
	.byte	$00
_enems_8_0e:
	.byte	$02
	.byte	$64
	.byte	$61
	.byte	$02
	.byte	$00
_enems_8_0f:
	.byte	$06
	.byte	$67
	.byte	$77
	.byte	$03
	.byte	$04
	.byte	$8E
	.byte	$81
	.byte	$02
	.byte	$00
_enems_8_10:
	.byte	$06
	.byte	$23
	.byte	$33
	.byte	$01
	.byte	$06
	.byte	$73
	.byte	$83
	.byte	$01
	.byte	$00
_enems_8_11:
	.byte	$03
	.byte	$32
	.byte	$52
	.byte	$02
	.byte	$02
	.byte	$78
	.byte	$7A
	.byte	$02
	.byte	$00
_enems_8_12:
	.byte	$03
	.byte	$1A
	.byte	$7A
	.byte	$02
	.byte	$00
_enems_8_13:
	.byte	$06
	.byte	$17
	.byte	$27
	.byte	$01
	.byte	$06
	.byte	$43
	.byte	$53
	.byte	$03
	.byte	$00
_enems_8:
	.addr	_enems_8_00
	.addr	_enems_8_01
	.addr	_enems_8_02
	.addr	_enems_8_03
	.addr	_enems_8_04
	.addr	_enems_8_05
	.addr	_enems_8_06
	.addr	_enems_8_07
	.addr	_enems_8_08
	.word	$0000
	.addr	_enems_8_0a
	.addr	_enems_8_0b
	.addr	_enems_8_0c
	.addr	_enems_8_0d
	.addr	_enems_8_0e
	.addr	_enems_8_0f
	.addr	_enems_8_10
	.addr	_enems_8_11
	.addr	_enems_8_12
	.addr	_enems_8_13
_hotspots_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$76
	.byte	$03
	.byte	$9D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_9_00:
	.byte	$01
	.byte	$44
	.byte	$4A
	.byte	$02
	.byte	$00
_enems_9_02:
	.byte	$06
	.byte	$58
	.byte	$59
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$84
	.byte	$01
	.byte	$00
_enems_9_03:
	.byte	$04
	.byte	$AA
	.byte	$A4
	.byte	$02
	.byte	$00
_enems_9_04:
	.byte	$04
	.byte	$7B
	.byte	$79
	.byte	$02
	.byte	$04
	.byte	$41
	.byte	$47
	.byte	$02
	.byte	$04
	.byte	$48
	.byte	$78
	.byte	$01
_enems_9_05:
	.byte	$06
	.byte	$69
	.byte	$68
	.byte	$01
	.byte	$00
_enems_9_06:
	.byte	$02
	.byte	$23
	.byte	$25
	.byte	$01
	.byte	$00
_enems_9_07:
	.byte	$04
	.byte	$A3
	.byte	$AA
	.byte	$01
	.byte	$00
_enems_9_08:
	.byte	$06
	.byte	$36
	.byte	$37
	.byte	$01
	.byte	$00
_enems_9_09:
	.byte	$01
	.byte	$95
	.byte	$91
	.byte	$01
	.byte	$00
_enems_9:
	.addr	_enems_9_00
	.word	$0000
	.addr	_enems_9_02
	.addr	_enems_9_03
	.addr	_enems_9_04
	.addr	_enems_9_05
	.addr	_enems_9_06
	.addr	_enems_9_07
	.addr	_enems_9_08
	.addr	_enems_9_09
_hotspots_9:
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_enems_A_02:
	.byte	$02
	.byte	$67
	.byte	$6B
	.byte	$02
	.byte	$00
_enems_A_04:
	.byte	$03
	.byte	$83
	.byte	$8B
	.byte	$02
	.byte	$00
_enems_A_06:
	.byte	$06
	.byte	$49
	.byte	$39
	.byte	$01
	.byte	$00
_enems_A_08:
	.byte	$01
	.byte	$74
	.byte	$73
	.byte	$01
	.byte	$00
_enems_A_0a:
	.byte	$01
	.byte	$61
	.byte	$62
	.byte	$01
	.byte	$02
	.byte	$34
	.byte	$33
	.byte	$01
	.byte	$00
_enems_A_0b:
	.byte	$06
	.byte	$2C
	.byte	$3C
	.byte	$03
	.byte	$00
_enems_A_0d:
	.byte	$02
	.byte	$97
	.byte	$93
	.byte	$02
	.byte	$00
_enems_A_0e:
	.byte	$06
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$06
	.byte	$1E
	.byte	$1D
	.byte	$00
	.byte	$00
_enems_A_0f:
	.byte	$04
	.byte	$47
	.byte	$97
	.byte	$01
	.byte	$00
_enems_A_10:
	.byte	$01
	.byte	$7B
	.byte	$79
	.byte	$01
	.byte	$00
_enems_A:
	.word	$0000
	.word	$0000
	.addr	_enems_A_02
	.word	$0000
	.addr	_enems_A_04
	.word	$0000
	.addr	_enems_A_06
	.word	$0000
	.addr	_enems_A_08
	.word	$0000
	.addr	_enems_A_0a
	.addr	_enems_A_0b
	.word	$0000
	.addr	_enems_A_0d
	.addr	_enems_A_0e
	.addr	_enems_A_0f
	.addr	_enems_A_10
	.word	$0000
	.word	$0000
	.word	$0000
_hotspots_A:
	.byte	$01
	.byte	$8A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$32
	.byte	$03
	.byte	$26
_rlets_0:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0E
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$0D
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$CC
	.byte	$C3
	.byte	$CC
	.byte	$CC
	.byte	$C3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$CC
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$F0
	.byte	$00
	.byte	$30
	.byte	$F0
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_rlets_1:
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$AF
	.byte	$04
	.byte	$01
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_tsmap0:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap1:
	.byte	$20
	.byte	$10
	.byte	$11
	.byte	$14
	.byte	$28
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1E
	.byte	$24
	.byte	$0A
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap2:
	.byte	$00
	.byte	$06
	.byte	$16
	.byte	$17
	.byte	$09
	.byte	$1A
	.byte	$1B
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap3:
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$11
	.byte	$16
	.byte	$24
	.byte	$23
	.byte	$1C
	.byte	$1B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap4:
	.byte	$00
	.byte	$0A
	.byte	$1B
	.byte	$04
	.byte	$05
	.byte	$16
	.byte	$17
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0D
	.byte	$0E
	.byte	$28
	.byte	$1A
	.byte	$29
_tsmap5:
	.byte	$00
	.byte	$16
	.byte	$0A
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$24
	.byte	$1B
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap6:
	.byte	$20
	.byte	$0A
	.byte	$1B
	.byte	$04
	.byte	$05
	.byte	$16
	.byte	$17
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$0D
	.byte	$0E
	.byte	$28
	.byte	$1A
	.byte	$29
_tsmap7:
	.byte	$28
	.byte	$10
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$06
	.byte	$1B
	.byte	$0A
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_tsmap8:
	.byte	$20
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$15
	.byte	$16
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$09
	.byte	$0A
	.byte	$1B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
_enems_ssmap0:
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap1:
	.byte	$24
	.byte	$25
	.byte	$32
	.byte	$33
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap2:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$16
	.byte	$17
_enems_ssmap3:
	.byte	$24
	.byte	$25
	.byte	$12
	.byte	$13
	.byte	$34
	.byte	$35
	.byte	$26
	.byte	$27
_enems_ssmap4:
	.byte	$34
	.byte	$35
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
_enems_ssmap5:
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$36
	.byte	$37
	.byte	$16
	.byte	$17
_l_map:
	.addr	_map_0
	.addr	_map_1
	.addr	_map_4
	.addr	_map_3
	.addr	_map_2
	.addr	_map_5
	.addr	_map_6
	.addr	_map_7
	.addr	_map_8
	.addr	_map_9
	.addr	_map_A
_l_map_size:
	.byte	$14
	.byte	$18
	.byte	$0C
	.byte	$18
	.byte	$18
	.byte	$0C
	.byte	$10
	.byte	$18
	.byte	$14
	.byte	$0A
	.byte	$14
_l_map_w:
	.byte	$0A
	.byte	$08
	.byte	$0C
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$04
	.byte	$04
	.byte	$0A
	.byte	$01
	.byte	$02
_l_locks:
	.word	$0000
	.addr	_map_1_locks
	.word	$0000
	.addr	_map_3_locks
	.addr	_map_2_locks
	.word	$0000
	.addr	_map_6_locks
	.addr	_map_7_locks
	.word	$0000
	.word	$0000
	.word	$0000
_l_enems:
	.addr	_enems_0
	.addr	_enems_1
	.addr	_enems_4
	.addr	_enems_3
	.addr	_enems_2
	.addr	_enems_5
	.addr	_enems_6
	.addr	_enems_7
	.addr	_enems_8
	.addr	_enems_9
	.addr	_enems_A
_l_hotspots:
	.addr	_hotspots_0
	.addr	_hotspots_1
	.addr	_hotspots_4
	.addr	_hotspots_3
	.addr	_hotspots_2
	.addr	_hotspots_5
	.addr	_hotspots_6
	.addr	_hotspots_7
	.addr	_hotspots_8
	.addr	_hotspots_9
	.addr	_hotspots_A
_l_pal_bg:
	.addr	_mypal_game_bg0
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg4
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg2
	.addr	_mypal_game_bg5
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg6
	.addr	_mypal_game_bg7
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg8
_l_pal_spr:
	.addr	_mypal_game_fg0
	.addr	_mypal_game_fg1
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg0
	.addr	_mypal_game_fg2
	.addr	_mypal_game_fg4
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg5
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg1
	.addr	_mypal_game_fg3
_l_bolts_max:
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
_l_tsmap:
	.addr	_tsmap0
	.addr	_tsmap1
	.addr	_tsmap4
	.addr	_tsmap3
	.addr	_tsmap2
	.addr	_tsmap0
	.addr	_tsmap3
	.addr	_tsmap5
	.addr	_tsmap6
	.addr	_tsmap7
	.addr	_tsmap7
_l_enems_ssmap:
	.addr	_enems_ssmap0
	.addr	_enems_ssmap1
	.addr	_enems_ssmap4
	.addr	_enems_ssmap3
	.addr	_enems_ssmap2
	.addr	_enems_ssmap0
	.addr	_enems_ssmap3
	.addr	_enems_ssmap5
	.addr	_enems_ssmap4
	.addr	_enems_ssmap1
	.addr	_enems_ssmap2
_l_alt_bg:
	.byte	$2A
	.byte	$22
	.byte	$22
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$00
_l_scr_ini:
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$12
_l_ini_x:
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$0C
_l_ini_y:
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$07
_l_pfacing:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_l_ppu_mask:
	.byte	$1E
	.byte	$1E
	.byte	$5E
	.byte	$1E
	.byte	$9E
	.byte	$9E
	.byte	$9E
	.byte	$3E
	.byte	$3E
	.byte	$5E
	.byte	$5E
_hud_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$06
	.byte	$0B
	.byte	$01
	.byte	$1D
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$03
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$05
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$1C
	.byte	$09
	.byte	$0B
	.byte	$01
	.byte	$1D
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$01
	.byte	$00
_alm0:
	.byte	$34
	.byte	$30
	.byte	$38
	.byte	$30
	.byte	$3B
	.byte	$30
	.byte	$9E
	.byte	$00
	.byte	$AE
	.byte	$00
	.byte	$FF
_alm1:
	.byte	$57
	.byte	$30
	.byte	$54
	.byte	$30
	.byte	$FF
_level_names:
	.byte	$54,$48,$45,$20,$42,$4F,$53,$51,$55,$45,$00,$54,$48,$45,$20,$44
	.byte	$45,$53,$45,$52,$54,$00,$47,$4F,$4F,$44,$20,$4D,$41,$52,$53,$48
	.byte	$00,$44,$45,$20,$4E,$41,$44,$41,$4C,$20,$31,$00,$43,$55,$45,$56
	.byte	$41,$20,$43,$41,$56,$45,$00,$4E,$4F,$53,$48,$45,$20,$57,$4F,$4F
	.byte	$44,$00,$44,$45,$20,$4E,$41,$44,$41,$4C,$20,$32,$00,$45,$4C,$20
	.byte	$43,$41,$53,$54,$4C,$45,$52,$00,$4D,$41,$52,$53,$48,$59,$20,$47
	.byte	$4F,$4F,$00,$4C,$41,$56,$41,$20,$50,$49,$54,$21,$21,$00,$48,$45
	.byte	$4C,$4C,$20,$50,$49,$54,$21,$21,$00,$00
_lava_top:
	.byte	$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9
	.byte	$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9,$A8,$A9
	.byte	$00
_lava_body:
	.byte	$E4,$E5,$E6,$E7,$AA,$AB,$E5,$AB,$E6,$AA,$AB,$E4,$E5,$E6,$AB,$E5
	.byte	$AA,$AB,$AA,$E6,$E5,$E4,$AB,$E6,$AA,$AB,$E5,$E4,$E6,$AA,$AB,$AA
	.byte	$E5,$E6,$E4,$E5,$AB,$E6,$AA,$E5,$AB,$E4,$E6,$E5,$AB,$AA,$E5,$AB
	.byte	$E4,$E6,$E5,$AA,$AB,$E5,$E4,$E6,$E5,$AA,$AB,$E5,$E4,$E6,$E5,$E4
	.byte	$00
_jitter:
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
_shl5:
	.word	$0000
	.word	$0020
	.word	$0040
	.word	$0060
	.word	$0080
	.word	$00A0
	.word	$00C0
	.word	$00E0
	.word	$0100
	.word	$0120
	.word	$0140
	.word	$0160
	.word	$0180
	.word	$01A0
	.word	$01C0
	.word	$01E0
	.word	$0200
	.word	$0220
	.word	$0240
	.word	$0260
	.word	$0280
	.word	$02A0
	.word	$02C0
	.word	$02E0
	.word	$0300
	.word	$0320
	.word	$0340
	.word	$0360
	.word	$0380
	.word	$03A0
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_hitter_offs:
	.byte	$0C
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$0C
__mx:
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$FC
	.byte	$FC
__my:
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$FC
_player_frames:
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$03
__pgtmx:
	.byte	$F0
	.byte	$10
L0001:
	.byte	$4D,$4F,$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$22,$00,$53,$54,$41
	.byte	$52,$54,$3D,$4E,$4F,$52,$4D,$41,$4C,$25,$53,$45,$4C,$45,$43,$54
	.byte	$3D,$4B,$49,$44,$53,$21,$00,$47,$41,$4D,$45,$20,$4F,$56,$45,$52
	.byte	$21,$00,$53,$54,$41,$52,$54,$3D,$43,$4F,$4E,$54,$49,$4E,$55,$45
	.byte	$00,$50,$4C,$41,$43,$45,$48,$4F,$4C,$44,$45,$52,$20,$45,$4E,$44
	.byte	$49,$4E,$47,$00,$20,$20,$53,$4F,$52,$52,$59,$20,$4E,$49,$4E,$4A
	.byte	$41,$4A,$41,$52,$25,$25,$20,$42,$55,$54,$20,$59,$45,$52,$20,$4E
	.byte	$4F,$56,$49,$41,$20,$49,$53,$25,$25,$49,$4E,$20,$41,$4E,$4F,$54
	.byte	$48,$45,$52,$20,$43,$41,$53,$54,$4C,$45,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpaux:
	.res	1,$00
_pad:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_half_life:
	.res	1,$00
_game_over:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_level:
	.res	1,$00
_gp_gen:
	.res	2,$00
_gp_map:
	.res	2,$00
_ul:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdct:
	.res	1,$00
_rdi:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rdn:
	.res	1,$00
_rlem:
	.res	1,$00
_rleb:
	.res	1,$00
_rler:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_t1:
	.res	1,$00
_t2:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_touched:
	.res	1,$00
__en_cttouched:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_maxct:
	.res	1,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_status:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_life:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_fr:
	.res	1,$00
_en_sprid:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_touched:
	.res	1,$00
_en_touched:
	.res	3,$00
_en_cttouched:
	.res	3,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	1,$00
_pvy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pkeys:
	.res	1,$00
_pkilled:
	.res	1,$00
_pneedsreset:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_player_ax:
	.res	1,$00
_player_rx:
	.res	1,$00
_player_vx_max:
	.res	1,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_enems_offset:
	.res	1,$00
_c_player_offset:
	.res	1,$00
_ts_offs:
	.res	1,$00
_c_alt_bg:
	.res	1,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_map_w:
	.res	1,$00
_c_tsmap:
	.res	2,$00
_c_enems_ssmap:
	.res	2,$00
__x:
	.res	1,$00
__y:
	.res	1,$00
__t:
	.res	1,$00
__n:
	.res	1,$00
__x1:
	.res	1,$00
__y1:
	.res	1,$00
__x2:
	.res	1,$00
__y2:
	.res	1,$00
__s:
	.res	2,$00
_f_zone_ac:
	.res	1,$00
_fzx1:
	.res	1,$00
_fzx2:
	.res	1,$00
_fzy1:
	.res	1,$00
_fzy2:
	.res	1,$00
_firezoned:
	.res	1,$00
_hitter_on:
	.res	1,$00
_hitter_x:
	.res	1,$00
_hitter_y:
	.res	1,$00
_hitter_frame:
	.res	1,$00
_hitter_hit_x:
	.res	1,$00
_hitter_hit_y:
	.res	1,$00
__coco_x:
	.res	1,$00
__coco_y:
	.res	1,$00
_coco_it:
	.res	1,$00
.segment	"BSS"
_update_index:
	.res	1,$00
_update_list:
	.res	90,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_attr_table:
	.res	64,$00
_kids_mode:
	.res	1,$00
_c_ppu_mask:
	.res	1,$00
_ppu_mask_xor_bits_fiddle:
	.res	1,$00
_brkf:
	.res	4,$00
_brkx:
	.res	4,$00
_brky:
	.res	4,$00
_fade_delay:
	.res	1,$00
_hyx:
	.res	25,$00
_ht:
	.res	25,$00
_hact:
	.res	25,$00
_scrpixoffset:
	.res	2,$00
_lkyx:
	.res	16,$00
_lknp:
	.res	16,$00
_lkact:
	.res	16,$00
_yx:
	.res	1,$00
_win_game:
	.res	1,$00
_flags:
	.res	8,$00
_script_something_done:
	.res	1,$00
_c_baddies_count:
	.res	1,$00
_en_maxct:
	.res	3,$00
_en_cur_d:
	.res	3,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_psafe:
	.res	1,$00
_pscreenissafe:
	.res	1,$00
_c_bolts_max:
	.res	1,$00
_paused:
	.res	1,$00
_coco_slots_i:
	.res	1,$00
_coco_slots:
	.res	3,$00
_coco_x:
	.res	3,$00
_coco_y:
	.res	3,$00
_coco_mx:
	.res	3,$00
_coco_my:
	.res	3,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_phit:
	.res	1,$00
_pslippery:
	.res	1,$00
_pquicksanded:
	.res	1,$00
_opcoins:
	.res	1,$00
_pcoins:
	.res	1,$00
_screen_clear_list:
	.res	24,$00
_ray_tiles:
	.res	1,$00
_face_tiles:
	.res	1,$00
_face_count:
	.res	1,$00
_face_cleared:
	.res	1,$00
_f0:
	.res	1,$00
_f1:
	.res	1,$00
_f2:
	.res	1,$00
_deco_flags:
	.res	1,$00
_lava_delay:
	.res	1,$00
_lava_ticker:
	.res	1,$00
_lava_height:
	.res	1,$00
_lava_cur_height:
	.res	1,$00
_lava_on_screen:
	.res	1,$00
_lava_height_pixels:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (gpit = 4; gpit != 0xff; -- gpit) {
;
	lda     #$04
	sta     _gpit
L2533:	lda     _gpit
	cmp     #$FF
	beq     L2534
;
; pal_bright (gpit); delay (fade_delay);
;
	lda     _gpit
	jsr     _pal_bright
	lda     _fade_delay
	jsr     _delay
;
; for (gpit = 4; gpit != 0xff; -- gpit) {
;
	dec     _gpit
	jmp     L2533
;
; }
;
L2534:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (gpit = 0; gpit < 5; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L2540:	lda     _gpit
	cmp     #$05
	bcs     L2541
;
; pal_bright (gpit); delay (fade_delay);
;
	lda     _gpit
	jsr     _pal_bright
	lda     _fade_delay
	jsr     _delay
;
; for (gpit = 0; gpit < 5; ++ gpit) {
;
	inc     _gpit
	jmp     L2540
;
; }
;
L2541:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("and #2");
;
	and     #2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda %v, y", tileset_pals);
;
	lda     _tileset_pals,y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L256B
;
; __asm__ ("asl a");
;
L256C:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L256C
;
; __asm__ ("sta %v", i);   // i = (c_ts_pals [_t] << (rdb << 1));
;
L256B:	sta     _i
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", i);
;
	ora     _i
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rdc);
;
	ldx     _rdc
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_tile: near

.segment	"CODE"

;
; _t = (16 + _t) << 2;
;
	lda     __t
	clc
	adc     #$10
	asl     a
	asl     a
	sta     __t
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_gp_addr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_gp_addr: near

.segment	"CODE"

;
; gp_addr = (((_y << 5) | _x) | NAMETABLE_A);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	sta     _gp_addr
	lda     tmp1
	ora     #$20
	sta     _gp_addr+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; do_attr_table ();
;
	jsr     _do_attr_table
;
; calc_tile ();
;
	jsr     _calc_tile
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; vram_adr (gp_addr);
;
	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; VRAM_PUT (_t); ++ _t;
;
	lda     __t
	sta     $2007
	inc     __t
;
; VRAM_PUT (_t); ++ _t;
;
	lda     __t
	sta     $2007
	inc     __t
;
; gp_addr += 32;
;
	lda     #$20
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L2592
	inc     _gp_addr+1
;
; vram_adr (gp_addr);
;
L2592:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; VRAM_PUT (_t); ++ _t; 
;
	lda     __t
	sta     $2007
	inc     __t
;
; VRAM_PUT (_t); 
;
	lda     __t
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ul_put2c_hrd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_put2c_hrd: near

.segment	"CODE"

;
; __asm__ ("lda %v+1", gp_addr);
;
	lda     _gp_addr+1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #2");
;
	lda     #2
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ul_put_t_inc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_put_t_inc: near

.segment	"CODE"

;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("inc %v", _t);
;
	inc     __t
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L25AE
	inx
L25AE:	sta     _ul
	stx     _ul+1
;
; do_attr_table ();
;
	jsr     _do_attr_table
;
; gp_addr = 0x23c0 + rdc; 
;
	ldx     #$00
	lda     _rdc
	clc
	adc     #$C0
	pha
	txa
	adc     #$23
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; __asm__ ("ldy #10");
;
	ldy     #10
;
; __asm__ ("lda %v+1", gp_addr);
;
	lda     _gp_addr+1
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; calc_tile ();
;
	jsr     _calc_tile
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; __asm__ ("ldy #0");  
;
	ldy     #0
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; ul_put_t_inc ();
;
	jsr     _ul_put_t_inc
;
; ul_put_t_inc ();  
;
	jsr     _ul_put_t_inc
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #32");
;
	adc     #32
;
; __asm__ ("sta %v", gp_addr);
;
	sta     _gp_addr
;
; __asm__ ("bcc %g", ult_incsk2);
;
	bcc     L25C6
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("iny");  
;
L25C6:	iny
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; ul_put_t_inc ();
;
	jsr     _ul_put_t_inc
;
; ul_put_t_inc (); 
;
	jsr     _ul_put_t_inc
;
; update_index += 13;
;
	ldx     #$00
	lda     #$0D
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L25D2:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L25D2
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L25DD
	inx
L25DD:	sta     _ul
	stx     _ul+1
;
; __asm__ ("ldy #0");  
;
	ldy     #0
;
; ul_put2c_hrd ();
;
	jsr     _ul_put2c_hrd
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");
;
	adc     #16
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");  
;
	adc     #16
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; update_index += 5;
;
	ldx     #$00
	lda     #$05
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; _t = rdt;
;
	lda     _rdt
	sta     __t
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; rdb = rand8 ();
;
	jsr     _rand8
	sta     _rdb
;
; if (level == 9) {
;
	lda     _level
	cmp     #$09
	bne     L25F8
;
; rda = rdm & 0xf; if (rda == 0 || rda == 0xf || (rda == 0xd && n_pant && n_pant < 9)) _t = 22;
;
	lda     _rdm
	and     #$0F
	sta     _rda
	lda     _rda
	beq     L25F9
	lda     _rda
	cmp     #$0F
	beq     L25F9
	lda     _rda
	cmp     #$0D
	bne     L25F8
	lda     _n_pant
	beq     L25F8
	lda     _n_pant
	cmp     #$09
	bcs     L25F8
L25F9:	lda     #$16
	sta     __t
;
; if (rdt == 0) {
;
L25F8:	lda     _rdt
	jne     L2600
;
; if (rdm > 15) {
;
	lda     _rdm
	cmp     #$10
	bcc     L2622
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 3 || rda == 17) {
;
	cmp     #$03
	beq     L260B
	lda     _rda
	cmp     #$11
	bne     L260A
;
; _t = rda;
;
L260B:	lda     _rda
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L260F
;
; } else if (rda == 22 || rda == 23) {
;
L260A:	lda     _rda
	cmp     #$16
	beq     L2612
	lda     _rda
	cmp     #$17
	bne     L2611
;
; if ((deco_flags & DECO_STALACTITES) && (rdb & 1)) _t = 9;
;
L2612:	lda     _deco_flags
	and     #$01
	jeq     L260F
	lda     _rdb
	and     #$01
	jeq     L260F
	lda     #$09
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L260F
;
; } else if (rda == 1) {
;
L2611:	lda     _rda
	cmp     #$01
	bne     L261D
;
; _t = 2;
;
	lda     #$02
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L260F
;
; } else if (rda == 2 || rda == 16) {
;
L261D:	lda     _rda
	cmp     #$02
	beq     L2623
	lda     _rda
	cmp     #$10
	bne     L2622
;
; if ((rdb & 7) == 1) _t = 31;
;
L2623:	lda     _rdb
	and     #$07
	cmp     #$01
	jne     L260F
	lda     #$1F
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L260F
;
; if (rdm) {
;
L2622:	lda     _rdm
	beq     L2633
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #1");
;
	sbc     #1
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 37 || rda == 38) {
;
	cmp     #$25
	beq     L2634
	lda     _rda
	cmp     #$26
	bne     L2633
;
; __asm__ ("inc %v", rda);
;
L2634:	inc     _rda
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; goto custom_renderer_done;
;
	jmp     L260F
;
; if (c_alt_bg && (rdb & 0x1f) <2) {
;
L2633:	lda     _c_alt_bg
	jeq     L260F
	lda     _rdb
	and     #$1F
	cmp     #$02
	bcs     L260F
;
; if (c_alt_bg == 34) { 
;
	lda     _c_alt_bg
	cmp     #$22
	bne     L263F
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("dec %v", rda);
;
	dec     _rda
;
; __asm__ ("ldx %v", rda);
;
	ldx     _rda
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("cmp (%v), y", c_tsmap);
;
	cmp     (_c_tsmap),y
;
; __asm__ ("bne %g", custom_renderer_done);
;
	bne     L260F
;
; __asm__ ("lda #33");
;
	lda     #33
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("lda #34");
;
	lda     #34
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; } else _t = c_alt_bg;
;
	jmp     L260F
L263F:	lda     _c_alt_bg
	sta     __t
;
; } else if (_t == 22) {
;
	jmp     L260F
L2600:	lda     __t
	cmp     #$16
	bne     L2651
;
; _t += (rdb & 1);
;
	lda     _rdb
	and     #$01
	clc
	adc     __t
	sta     __t
;
; if (rdm > 15) {
;
	lda     _rdm
	cmp     #$10
	bcc     L260F
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_buff);
;
	lda     _map_buff,y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda == 25) _t = 24;
;
	cmp     #$19
	bne     L260F
	lda     #$18
	sta     __t
;
; } else if (_t == TILE_RAY) {
;
	jmp     L260F
L2651:	lda     __t
	cmp     #$1B
	bne     L2663
;
; ++ ray_tiles;
;
	inc     _ray_tiles
;
; } else if (_t == TILE_FACE) {
;
	jmp     L260F
L2663:	lda     __t
	cmp     #$24
	bne     L260F
;
; ++ face_tiles;
;
	inc     _face_tiles
;
; map_buff [rdm] = _t;  
;
L260F:	ldy     _rdm
	lda     __t
	sta     _map_buff,y
;
; map_attr [rdm] = behs [_t];    
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L2670
	inx
L2670:	sta     ptr1
	stx     ptr1+1
	ldy     __t
	lda     _behs,y
	ldy     #$00
	sta     (ptr1),y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; _x = 0; _y = TOP_ADJUST;
;
	lda     #$00
	sta     __x
	sta     __y
;
; gp_map = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L3488
	inx
	clc
L3488:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_map+1
	dey
	lda     (ptr1),y
	sta     _gp_map
;
; rdm = 0; while (rdm < 192) {
;
	sty     _rdm
L267F:	lda     _rdm
	cmp     #$C0
	bcs     L2680
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", gp_map);
;
	lda     (_gp_map),y
;
; __asm__ ("inc %v", gp_map);
;
	inc     _gp_map
;
; __asm__ ("bne %g", ds_incd);
;
	bne     L2686
;
; __asm__ ("inc %v+1", gp_map);
;
	inc     _gp_map+1
;
; __asm__ ("sta %v", rdct);    
;
L2686:	sta     _rdct
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("sta %v", rdt);
;
	sta     _rdt
;
; while (rdct >= 16) {
;
L268B:	lda     _rdct
	cmp     #$10
	bcc     L268C
;
; add_tile ();
;
	jsr     _add_tile
;
; rdct -= 16; 
;
	lda     _rdct
	sec
	sbc     #$10
	sta     _rdct
;
; } add_tile ();
;
	jmp     L268B
L268C:	jsr     _add_tile
;
; }
;
	jmp     L267F
;
; __asm__ ("ldx #0");
;
L2680:	ldx     #0
;
; __asm__ ("lda %v, x", map_buff);
;
L2693:	lda     _map_buff,x
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", rdm);
;
	stx     _rdm
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("beq %g", map_custom_renderer_done);
;
	beq     L269C
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("and #31");
;
	and     #31
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("bne %g", map_custom_renderer_loop);
;
	bne     L2693
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("jmp %g", map_custom_renderer_loop);
;
	jmp     L2693
;
; if (c_bolts_max) {
;
L269C:	lda     _c_bolts_max
	beq     L26A8
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("lda %v, x", lknp);
;
L26AB:	lda     _lknp,x
;
; __asm__ ("cmp %v", n_pant);
;
	cmp     _n_pant
;
; __asm__ ("bne %g", clear_open_locks_continue);
;
	bne     L26AF
;
; __asm__ ("lda %v, x", lkact);
;
	lda     _lkact,x
;
; __asm__ ("bne %g", clear_open_locks_continue);
;
	bne     L26AF
;
; __asm__ ("lda %v, x", lkyx);  
;
	lda     _lkyx,x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #$fe");
;
	and     #$fe
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda %v, x", lkyx);
;
	lda     _lkyx,x
;
; __asm__ ("and #$0f");
;
	and     #$0f
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", gpit);
;
	stx     _gpit
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("ldy %v, x", lkyx);
;
	ldy     _lkyx,x
;
; __asm__ ("sta %v, y", map_attr);
;
	sta     _map_attr,y
;
; __asm__ ("sta %v, y", map_buff);
;
	sta     _map_buff,y
;
; __asm__ ("inx");
;
L26AF:	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", clear_open_locks_loop);
;
	bne     L26AB
;
; do_process_breakable = 0;
;
L26A8:	lda     #$00
	sta     _do_process_breakable
;
; memfill (brkf, 0, BREAKABLE_MAX);
;
	jsr     decsp3
	lda     #<(_brkf)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_brkf)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$04
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; calc_gp_addr ();
;
	jsr     _calc_gp_addr
;
; vram_adr (gp_addr);
;
L348B:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
;
; while (gpit = *_s ++) {
;
L26D5:	lda     __s
	ldx     __s+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L26D9
	inx
L26D9:	sta     __s
	stx     __s+1
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	beq     L26D6
;
; if (gpit == '%') { gp_addr += 32; vram_adr (gp_addr); }
;
	lda     _gpit
	cmp     #$25
	bne     L26DA
	lda     #$20
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L348B
	inc     _gp_addr+1
;
; else { 
;
	jmp     L348B
;
; __asm__ ("lda %v", gpit);
;
L26DA:	lda     _gpit
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #32");
;
	sbc     #32
;
; __asm__ ("sta $2007");
;
	sta     $2007
;
; }
;
	jmp     L26D5
;
; }
;
L26D6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ un_rle_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_un_rle_paint: near

.segment	"CODE"

;
; if (rdm == 0) {
;
	lda     _rdm
	bne     L26E7
;
; _t = rleb; draw_tile ();
;
	lda     _rleb
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 31; if (!_x) _y +=2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L26F0
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; ++ gpit; if (gpit == 240) {
;
L26F0:	inc     _gpit
	lda     _gpit
	cmp     #$F0
	bne     L26FB
;
; rdm = 1; vram_adr (0x23c0);
;
	lda     #$01
	sta     _rdm
	ldx     #$23
	lda     #$C0
	jmp     _vram_adr
;
; VRAM_PUT (rleb);
;
L26E7:	lda     _rleb
	sta     $2007
;
; }
;
L26FB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ un_rle_screen2 (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_un_rle_screen2: near

.segment	"CODE"

;
; gp_map = rle;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _gp_map
	stx     _gp_map+1
;
; rlem = *gp_map; ++ gp_map; // Read marker
;
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _rlem
	inc     _gp_map
	bne     L2704
	inc     _gp_map+1
;
; rdm = _x = _y = gpit = 0;
;
L2704:	tya
	sta     _gpit
	sta     __y
	sta     __x
	sta     _rdm
;
; rda = *gp_map; ++ gp_map;
;
L270A:	lda     _gp_map
	sta     ptr1
	lda     _gp_map+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _rda
	inc     _gp_map
	bne     L2710
	inc     _gp_map+1
;
; if (rda == rlem) {
;
L2710:	lda     _rlem
	cmp     _rda
	bne     L2711
;
; rler = *gp_map; ++ gp_map;
;
	lda     _gp_map
	sta     ptr1
	lda     _gp_map+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rler
	inc     _gp_map
	bne     L2716
	inc     _gp_map+1
;
; if (rler == 0) break;
;
L2716:	lda     _rler
	jeq     incsp2
;
; while (rler --) un_rle_paint ();
;
L2717:	lda     _rler
	pha
	sec
	sbc     #$01
	sta     _rler
	pla
	tax
	beq     L270A
	jsr     _un_rle_paint
	jmp     L2717
;
; rleb = rda; un_rle_paint ();
;
L2711:	lda     _rda
	sta     _rleb
	jsr     _un_rle_paint
;
; }
;
	jmp     L270A

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad;
;
	lda     _pad
	sta     _pad_this_frame
;
; pad = pad_poll (0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; pad_this_frame = (pad_this_frame ^ pad) & pad;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ attr (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_attr: near

.segment	"CODE"

;
; _x = x; _y = y;
;
	ldy     #$01
	lda     (sp),y
	sta     __x
	dey
	lda     (sp),y
	sta     __y
;
; if (_x > 15 || _y > 11) return 0;
;
	lda     __x
	cmp     #$10
	bcs     L2730
	lda     __y
	cmp     #$0C
	bcc     L272F
L2730:	ldx     #$00
	txa
	jmp     incsp2
;
; return map_attr [COORDS(_x,_y)];
;
L272F:	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ qtile (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_qtile: near

.segment	"CODE"

;
; return map_buff [COORDS(x,y)];
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	bpl     L273E
	dex
L273E:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp,x)
	bpl     L2741
	dex
L2741:	jsr     aslax4
	ora     ptr1
	sta     ptr1
	txa
	ora     ptr1+1
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; rdd = COORDS(_x,_y);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _rdd
;
; map_buff [rdd] = _t;
;
	ldy     _rdd
	lda     __t
	sta     _map_buff,y
;
; map_attr [rdd] = behs [_t];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdd
	bcc     L274F
	inx
L274F:	sta     ptr1
	stx     ptr1+1
	ldy     __t
	lda     _behs,y
	ldy     #$00
	sta     (ptr1),y
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	sta     __y
;
; update_list_tile ();
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x1);
;
	lda     __x1
;
; __asm__ ("cmp %v", _x2);
;
	cmp     __x2
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L275D
;
; __asm__ ("lda %v", _x2);
;
	lda     __x2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("cmp %v", _x1);
;
	cmp     __x1
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L275D
;
; __asm__ ("lda %v", _y1);
;
	lda     __y1
;
; __asm__ ("cmp %v", _y2);
;
	cmp     __y2
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L275D
;
; __asm__ ("lda %v", _y2);
;
	lda     __y2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("cmp %v", _y1);
;
	cmp     __y1
;
; __asm__ ("bcc %g", collide_in_no);
;
	bcc     L275D
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; return 0;
;
L275D:	ldx     #$00
	txa
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x1);
;
	lda     __x1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _x2);
;
	cmp     __x2
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L2774
;
; __asm__ ("lda %v", _x2);
;
	lda     __x2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _x1);
;
	cmp     __x1
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L2774
;
; __asm__ ("lda %v", _y1);
;
	lda     __y1
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _y2);
;
	cmp     __y2
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L2774
;
; __asm__ ("lda %v", _y2);
;
	lda     __y2
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", _y1);
;
	cmp     __y1
;
; __asm__ ("bcc %g", collide_no);
;
	bcc     L2774
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; return 0; 
;
L2774:	ldx     #$00
	txa
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ add_sign (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$01
	lda     (sp),y
	bne     L2789
	tax
	jmp     incsp2
L2789:	lda     (sp),y
	asl     a
	bcc     L278E
	ldx     #$00
	lda     (sp,x)
	bpl     L2790
	dex
L2790:	jsr     negax
L2794:	ldx     #$00
	cmp     #$80
	jcc     incsp2
	jmp     L348D
L278E:	dey
	lda     (sp),y
	cmp     #$80
	bcc     L2794
L348D:	ldx     #$FF
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) cy2 = 0; 
;
	lda     _cy1
	cmp     #$0D
	bcs     L2798
	lda     _cy2
	cmp     #$0D
	bcc     L2797
L2798:	lda     #$00
	sta     _cy2
;
; else if (cy1 > 11 || cy2 > 11) { at1 = at2 = 0; return; }
;
	jmp     L279D
L2797:	lda     _cy1
	cmp     #$0C
	bcs     L279E
	lda     _cy2
	cmp     #$0C
	bcc     L279D
L279E:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; __asm__ ("lda %v", cy1);
;
L279D:	lda     _cy1
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("ora %v", cx1);
;
	ora     _cx1
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", t1);
;
	sta     _t1
;
; __asm__ ("lda %v, x", map_attr);
;
	lda     _map_attr,x
;
; __asm__ ("sta %v", at1);
;
	sta     _at1
;
; __asm__ ("lda %v", cy2);
;
	lda     _cy2
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("ora %v", cx2);
;
	ora     _cx2
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", t2);
;
	sta     _t2
;
; __asm__ ("lda %v, x", map_attr);
;
	lda     _map_attr,x
;
; __asm__ ("sta %v", at2);  
;
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ close_update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_close_update_cycle: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda #$ff");
;
	lda     #$ff
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; ppu_waitnmi ();
;
	jmp     _ppu_waitnmi

.endproc

; ---------------------------------------------------------------
; void __near__ attr_list_mod (__near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_attr_list_mod: near

.segment	"CODE"

;
; gp_map = l;
;
	ldy     #$01
	lda     (sp),y
	sta     _gp_map+1
	dey
	lda     (sp),y
	sta     _gp_map
;
; __asm__ ("lda (%v), y", gp_map);
;
L27C2:	lda     (_gp_map),y
;
; __asm__ ("cmp #$ff");
;
	cmp     #$ff
;
; __asm__ ("beq %g", attr_list_mod_done);
;
	jeq     incsp2
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_map);
;
	lda     (_gp_map),y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("jmp %g", attr_list_mod_loop);
;
	jmp     L27C2

.endproc

; ---------------------------------------------------------------
; void __near__ clear_tile_rdn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_tile_rdn: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
L27D2:	lda     _map_buff,x
;
; __asm__ ("cmp %v", rdn);
;
	cmp     _rdn
;
; __asm__ ("bne %g", substitute_10_continue);
;
	bne     L27D6
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", rdy);
;
	lda     _rdy
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("stx %v", rdm);
;
	stx     _rdm
;
; map_set ();
;
	jsr     _map_set
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("inc %v", rdx);
;
L27D6:	inc     _rdx
;
; __asm__ ("lda %v", rdx);
;
	lda     _rdx
;
; __asm__ ("cmp #16");
;
	cmp     #16
;
; __asm__ ("bne %g", substitute_10_noincy);
;
	bne     L27E5
;
; __asm__ ("inc %v", rdy);
;
	inc     _rdy
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("inx");
;
L27E5:	inx
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("bne %g", substitute_10_loop);
;
	bne     L27D2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_launch (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_launch: near

.segment	"CODE"

;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; f1 = 1;
;
	lda     #$01
	sta     _f1
;
; pal_bg (mypal_game_bg8);
;
	lda     #<(_mypal_game_bg8)
	ldx     #>(_mypal_game_bg8)
	jsr     _pal_bg
;
; lava_ticker = lava_delay;
;
	lda     _lava_delay
	sta     _lava_ticker
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_draw_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_draw_off: near

.segment	"CODE"

;
; rdy = lava_cur_height + TOP_ADJUST;
;
	lda     _lava_cur_height
	sta     _rdy
;
; vram_write ((unsigned char *) lava_top, NAMETABLE_A + shl5 [rdy], 32);
;
	jsr     decsp4
	lda     #<(_lava_top)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_lava_top)
	sta     (sp),y
	ldx     #$00
	lda     _rdy
	asl     a
	bcc     L3490
	inx
	clc
L3490:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	txa
	clc
	adc     #$20
	tax
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _vram_write
;
; for (gpit = lava_cur_height + 1; gpit < 24; gpit ++)
;
	lda     _lava_cur_height
L3494:	clc
	adc     #$01
	sta     _gpit
	cmp     #$18
	bcs     L27FF
;
; vram_write ((unsigned char *) lava_body + (rand8 () & 0x1f), NAMETABLE_A + shl5 [gpit + TOP_ADJUST], 32);
;
	jsr     decsp4
	jsr     _rand8
	and     #$1F
	clc
	adc     #<(_lava_body)
	tay
	lda     #$00
	adc     #>(_lava_body)
	tax
	tya
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L3491
	inx
	clc
L3491:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	txa
	clc
	adc     #$20
	tax
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _vram_write
;
; for (gpit = lava_cur_height + 1; gpit < 24; gpit ++)
;
	lda     _gpit
	jmp     L3494
;
; __asm__ ("lda %v", rdy);
;
L27FF:	lda     _rdy
;
; __asm__ ("and #$fc");
;
	and     #$fc
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; memfill (attr_table + rdy, 0xaa, 64-rdy); 
;
	jsr     decsp3
	lda     _rdy
	clc
	adc     #<(_attr_table)
	tay
	lda     #$00
	adc     #>(_attr_table)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$AA
	ldy     #$00
	sta     (sp),y
	lda     #$40
	sec
	sbc     _rdy
	ldx     #$00
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ lava_draw_buff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_draw_buff: near

.segment	"CODE"

;
; if (lava_cur_height == 23) return;
;
	lda     _lava_cur_height
	cmp     #$17
	bne     L3499
;
; }
;
	rts
;
; rdy = lava_cur_height + TOP_ADJUST;
;
L3499:	lda     _lava_cur_height
	sta     _rdy
;
; gp_addr = NAMETABLE_A + shl5 [rdy];
;
	ldx     #$00
	lda     _rdy
	asl     a
	bcc     L3497
	inx
	clc
L3497:	adc     #<(_shl5)
	sta     ptr1
	txa
	adc     #>(_shl5)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L2820
	inx
L2820:	sta     _ul
	stx     _ul+1
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #64");
;
	lda     #64
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; memcpy (ul + 3, lava_top, 32);
;
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$03
	bcc     L282E
	inx
L282E:	jsr     pushax
	lda     #<(_lava_top)
	ldx     #>(_lava_top)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
;
; memcpy (ul + 35, lava_body + (rand8 () & 0x1f), 32);
;
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$23
	bcc     L2833
	inx
L2833:	jsr     pushax
	jsr     _rand8
	and     #$1F
	clc
	adc     #<(_lava_body)
	tay
	lda     #$00
	adc     #>(_lava_body)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
;
; update_index += (3 + 64);
;
	lda     #$43
	clc
	adc     _update_index
	sta     _update_index
;
; gp_addr = NAMETABLE_A + 0x3c0 + ((rdy & 0xfc) << 1);
;
	lda     _rdy
	ldx     #$00
	and     #$FC
	asl     a
	bcc     L3498
	inx
	clc
L3498:	adc     #$C0
	sta     _gp_addr
	txa
	adc     #$23
	sta     _gp_addr+1
;
; ul = &update_list [update_index];
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	clc
	adc     _update_index
	bcc     L2841
	inx
L2841:	sta     _ul
	stx     _ul+1
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("ora #%b", NT_UPD_HORZ);
;
	ora     #$40
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda #8");
;
	lda     #8
;
; __asm__ ("sta (%v), y", ul);
;
	sta     (_ul),y
;
; memfill (ul + 3, 0xAA, 8);
;
	jsr     decsp3
	lda     _ul
	ldx     _ul+1
	clc
	adc     #$03
	bcc     L284F
	inx
L284F:	dey
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$AA
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$08
	jsr     _memfill
;
; update_index += (3 + 8);
;
	lda     #$0B
	clc
	adc     _update_index
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ lava_calc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lava_calc: near

.segment	"CODE"

;
; rdb = (level == 10 ? (n_pant >> 1) : n_pant);
;
	lda     _level
	cmp     #$0A
	bne     L2859
	ldx     #$00
	lda     _n_pant
	jsr     asrax1
	jmp     L285C
L2859:	lda     _n_pant
L285C:	sta     _rdb
;
; __asm__ ("lda %v", lava_height);
;
	lda     _lava_height
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("ror");
;
	ror     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("ror");
;
	ror     a
;
; __asm__ ("lsr");
;
	lsr     a
;
; __asm__ ("cmp %v", rdb);
;
	cmp     _rdb
;
; __asm__ ("bne %g", lava_off_screen);
;
	bne     L286D
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", rda); // rda = v*8
;
	sta     _rda
;
; __asm__ ("asl a");   // A = v*16
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rda);
;
	adc     _rda
;
; __asm__ ("sta %v", rda); // rda = v*8+v*16 = v*24
;
	sta     _rda
;
; __asm__ ("lda %v", lava_height);
;
	lda     _lava_height
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", rda);
;
	sbc     _rda
;
; __asm__ ("sta %v", lava_cur_height);
;
	sta     _lava_cur_height
;
; lava_height_pixels = lava_height << 3;
;
	ldx     #$00
	lda     _lava_height
	jsr     aslax3
	sta     _lava_height_pixels
	stx     _lava_height_pixels+1
;
; lava_on_screen = 1;
;
	lda     #$01
;
; return;
;
	jmp     L349A
;
; lava_on_screen = 0;
;
L286D:	lda     #$00
L349A:	sta     _lava_on_screen
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_game: near

.segment	"CODE"

;
; pcoins = 0; 
;
	lda     #$00
	sta     _pcoins
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_level: near

.segment	"CODE"

;
; vram_adr (MAP_CLEAR_LIST_ADDRESS);
;
	ldx     #$2C
	lda     #$00
	jsr     _vram_adr
;
; vram_fill (0, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; memfill (screen_clear_list, 0, 24); 
;
	jsr     decsp3
	lda     #<(_screen_clear_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$18
	jsr     _memfill
;
; (c_tsmap == tsmap2 || c_tsmap == tsmap8) ? 
;
	lda     #<(_tsmap2)
	ldx     #>(_tsmap2)
	cpx     _c_tsmap+1
	bne     L349D
	cmp     _c_tsmap
	beq     L2897
L349D:	lda     #<(_tsmap8)
	ldx     #>(_tsmap8)
	cpx     _c_tsmap+1
	bne     L2899
	cmp     _c_tsmap
	bne     L2899
;
; DECO_STALACTITES : 
;
L2897:	lda     #$01
;
; 0;
;
	jmp     L289B
L2899:	lda     #$00
L289B:	sta     _deco_flags
;
; opcoins = 0xff;
;
	lda     #$FF
	sta     _opcoins
;
; f1 = 0;
;
	lda     #$00
	sta     _f1
;
; lava_height = (level == 9 ? 240 : 255);
;
	lda     _level
	cmp     #$09
	bne     L28A4
	lda     #$F0
	jmp     L28A6
L28A4:	lda     #$FF
L28A6:	sta     _lava_height
;
; lava_height_pixels = 240 << 3;
;
	ldx     #$07
	lda     #$80
	sta     _lava_height_pixels
	stx     _lava_height_pixels+1
;
; lava_delay = (level == 9 ? 30 : 40);
;
	lda     _level
	cmp     #$09
	bne     L28AD
	lda     #$1E
	jmp     L28AF
L28AD:	lda     #$28
L28AF:	sta     _lava_delay
;
; if (level == 10) lava_launch ();
;
	lda     _level
	cmp     #$0A
	jeq     _lava_launch
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flick_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flick_screen: near

.segment	"CODE"

;
; rdb = (level == 10) ? (n_pant >> 1) : n_pant;
;
	lda     _level
	cmp     #$0A
	bne     L28B8
	ldx     #$00
	lda     _n_pant
	jsr     asrax1
	jmp     L28BB
L28B8:	lda     _n_pant
L28BB:	sta     _rdb
;
; scrpixoffset = (rdb << 7) + (rdb << 6);
;
	ldx     #$00
	lda     _rdb
	jsr     aslax4
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdb
	jsr     aslax4
	jsr     aslax2
	clc
	adc     ptr1
	sta     _scrpixoffset
	txa
	adc     ptr1+1
	sta     _scrpixoffset+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ exiting_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exiting_screen: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L28C2
;
; rda = on_pant << 3;
;
	lda     _on_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_write (screen_clear_list, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_screen_clear_list)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L34A0
	inx
L34A0:	pha
	txa
	clc
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L349F
	inx
L349F:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_write
;
; ray_tiles = face_tiles = face_count = 0;
;
L28C2:	lda     #$00
	sta     _face_count
	sta     _face_tiles
	sta     _ray_tiles
;
; rda = 0;
;
	sta     _rda
;
; if (level == 3 || level == 6) {
;
	lda     _level
	cmp     #$03
	beq     L28D2
	lda     _level
	cmp     #$06
	jne     L28D1
;
; if (level == 3) {
;
L28D2:	lda     _level
	cmp     #$03
	bne     L28D4
;
; if (n_pant == 7) {
;
	lda     _n_pant
	cmp     #$07
	bne     L28D6
;
; rdi = 1;
;
	lda     #$01
	sta     _rdi
;
; if (on_pant == 15) { rda = 1; pvy = -64;} 
;
	lda     _on_pant
	cmp     #$0F
	bne     L28FA
	lda     #$01
	sta     _rda
	lda     #$C0
;
; } else {
;
	jmp     L34A2
;
; rdi = 0;
;
L28D6:	lda     #$00
	sta     _rdi
;
; if (n_pant == 15 && on_pant == 7) { rda = 1; pvy = 48; }
;
	lda     _n_pant
	cmp     #$0F
	bne     L28FA
	lda     _on_pant
	cmp     #$07
	bne     L28FA
;
; } else  {
;
	jmp     L34A5
;
; if (n_pant < 2) {
;
L28D4:	lda     _n_pant
	cmp     #$02
	bcs     L28EC
;
; rdi = 1;
;
	lda     #$01
	sta     _rdi
;
; if (on_pant == n_pant + 4) { rda = 1; pvy = -64; }
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     #$04
	bcc     L28F2
	inx
L28F2:	cpx     #$00
	bne     L28FA
	cmp     _on_pant
	bne     L28FA
	lda     #$01
	sta     _rda
	lda     #$C0
;
; } else {
;
	jmp     L34A2
;
; rdi = 0;
;
L28EC:	lda     #$00
	sta     _rdi
;
; if (on_pant < 2) { rda = 1; pvy = 48; }
;
	lda     _on_pant
	cmp     #$02
	bcs     L28FA
L34A5:	lda     #$01
	sta     _rda
	lda     #$30
L34A2:	sta     _pvy
;
; if (rda) sfx_play (SFX_FLOAT, 0);
;
L28FA:	lda     _rda
	beq     L2900
	lda     #$10
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (rdi) {
;
L2900:	lda     _rdi
	beq     L2905
;
; c_ppu_mask = 0x1e;
;
	lda     #$1E
	sta     _c_ppu_mask
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$01
	sta     _vertical_engine_type
;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; c_alt_bg = 34;
;
	lda     #$22
	sta     _c_alt_bg
;
; } else {
;
	rts
;
; c_ppu_mask = 0x9e;
;
L2905:	lda     #$9E
	sta     _c_ppu_mask
;
; vertical_engine_type = ENGINE_TYPE_SWIM;
;
	lda     #$03
	sta     _vertical_engine_type
;
; pal_bg (mypal_game_bg3);
;
	lda     #<(_mypal_game_bg3)
	ldx     #>(_mypal_game_bg3)
	jsr     _pal_bg
;
; c_alt_bg = 42;
;
	lda     #$2A
	sta     _c_alt_bg
;
; } else if (level == 7) {
;
	rts
L28D1:	lda     _level
	cmp     #$07
	bne     L2919
;
; c_alt_bg = ((n_pant & 1) == 0 && n_pant < 16) ? 34 : 0;
;
	lda     _n_pant
	and     #$01
	bne     L2922
	lda     _n_pant
	cmp     #$10
	bcs     L2922
	lda     #$22
	jmp     L2924
L2922:	lda     #$00
L2924:	sta     _c_alt_bg
;
; } else if (level == 8) {
;
	rts
L2919:	lda     _level
	cmp     #$08
	bne     L2927
;
; deco_flags = n_pant < 10 ? 0 : DECO_STALACTITES;
;
	lda     _n_pant
	cmp     #$0A
	bcs     L292B
	lda     #$00
	jmp     L292D
L292B:	lda     #$01
L292D:	sta     _deco_flags
;
; }
;
L2927:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entering_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entering_screen: near

.segment	"CODE"

;
; rda = n_pant << 3;
;
	lda     _n_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_read (screen_clear_list, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_screen_clear_list)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_screen_clear_list)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L34A7
	inx
L34A7:	pha
	txa
	clc
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L34A6
	inx
L34A6:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_read
;
; rdd = _x = 0; _y = TOP_ADJUST;
;
	lda     #$00
	sta     __x
	sta     _rdd
	sta     __y
;
; __asm__ ("ldx #0");
;
	tax
;
; __asm__ ("stx %v", rdm);
;
	sta     _rdm
;
; __asm__ ("txa");
;
L293E:	txa
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("ldx %v", rdd);
;
	ldx     _rdd
;
; __asm__ ("lda %v, x", screen_clear_list);
;
	lda     _screen_clear_list,x
;
; __asm__ ("and %v, y", bits);
;
	and     _bits,y
;
; __asm__ ("beq %g", es_modify_screen_skip);
;
	beq     L2946
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_tsmap);
;
	lda     (_c_tsmap),y
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", behs);
;
	lda     _behs,y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; draw_tile ();
;
	jsr     _draw_tile
;
; __asm__ ("lda %v", rdm);
;
L2946:	lda     _rdm
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("cmp #7");
;
	cmp     #7
;
; __asm__ ("bne %g", es_inc_index_skip);
;
	bne     L2954
;
; __asm__ ("inc %v", rdd);
;
	inc     _rdd
;
; __asm__ ("lda %v", _x);
;
L2954:	lda     __x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("and #31");
;
	and     #31
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("bne %g", es_inc_y_skip);
;
	bne     L295C
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #2");
;
	adc     #2
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("inc %v", rdm);
;
L295C:	inc     _rdm
;
; __asm__ ("ldx %v", rdm);
;
	ldx     _rdm
;
; __asm__ ("cpx #192");
;
	cpx     #192
;
; __asm__ ("bne %g", es_modify_screen_loop);
;
	bne     L293E
;
; switch (level) {
;
	lda     _level
;
; }
;
	cmp     #$07
	beq     L2969
	cmp     #$09
	beq     L2997
	cmp     #$0A
	jeq     L2998
	jmp     L2967
;
; switch (n_pant) {
;
L2969:	lda     _n_pant
;
; }
;
	cmp     #$01
	beq     L296E
	cmp     #$03
	beq     L296E
	cmp     #$05
	beq     L2974
	cmp     #$07
	beq     L2974
	cmp     #$0D
	beq     L297A
	cmp     #$0F
	beq     L297F
	cmp     #$11
	beq     L2988
	cmp     #$17
	beq     L2993
	jmp     L2967
;
; pscreenissafe = 0;
;
L296E:	lda     #$00
	sta     _pscreenissafe
;
; break;
;
	jmp     L2967
;
; attr_list_mod (alm0);
;
L2974:	lda     #<(_alm0)
	ldx     #>(_alm0)
	jsr     pushax
	jsr     _attr_list_mod
;
; break;
;
	jmp     L2967
;
; en_t [0] = 0;
;
L297A:	lda     #$00
	sta     _en_t
;
; break;
;
	jmp     L2967
;
; map_attr [COORDS (2,3)] = 48;   // Set spring trap!
;
L297F:	lda     #$30
	sta     _map_attr+50
;
; break;
;
	jmp     L2967
;
; fzx1 = 80; fzx2 = fzy2 = 95; fzy1 = 16; f_zone_ac = 1;
;
L2988:	lda     #$50
	sta     _fzx1
	lda     #$5F
	sta     _fzy2
	sta     _fzx2
	lda     #$10
	sta     _fzy1
	lda     #$01
	sta     _f_zone_ac
;
; break;
;
	jmp     L2967
;
; attr_list_mod (alm1);
;
L2993:	lda     #<(_alm1)
	ldx     #>(_alm1)
	jsr     pushax
	jsr     _attr_list_mod
;
; break;
;
	jmp     L2967
;
; if (n_pant == 0 && f1) {
;
L2997:	lda     _n_pant
	bne     L2998
	lda     _f1
	beq     L2998
;
; _x = 7; _y = 5; _t = 0; draw_tile ();
;
	lda     #$07
	sta     __x
	lda     #$05
	sta     __y
	lda     #$00
	sta     __t
	jsr     _draw_tile
;
; _x = 8; _y = 5; _t = 0; draw_tile ();
;
	lda     #$08
	sta     __x
	lda     #$05
	sta     __y
	lda     #$00
	sta     __t
	jsr     _draw_tile
;
; lava_calc ();
;
L2998:	jsr     _lava_calc
;
; if (lava_on_screen) lava_draw_off ();
;
	lda     _lava_on_screen
	beq     L2967
	jsr     _lava_draw_off
;
; f0 = 0;
;
L2967:	lda     #$00
	sta     _f0
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ press_fire_at_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_press_fire_at_screen: near

.segment	"CODE"

;
; rdx = (prx + 8) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L29B6
	inx
L29B6:	jsr     shrax4
	sta     _rdx
;
; rdy = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L29BA
	inx
L29BA:	jsr     shrax4
	sta     _rdy
;
; if (firezoned) {
;
	lda     _firezoned
	beq     L29BB
;
; if (level == 7) {
;
	lda     _level
	cmp     #$07
	jne     L29DE
;
; switch (n_pant) {
;
	lda     _n_pant
;
; }
;
	cmp     #$11
	jne     L29DE
;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; close_update_cycle (); update_index = 0; 
;
	jsr     _close_update_cycle
	lda     #$00
	sta     _update_index
;
; for (gpit = 6; gpit < 11; ++ gpit) {      
;
	lda     #$06
	sta     _gpit
L29CA:	lda     _gpit
	cmp     #$0B
	bcs     L29CB
;
; _y = 6; _x = gpit; _t = 0; map_set ();
;
	lda     #$06
	sta     __y
	lda     _gpit
	sta     __x
	lda     #$00
	sta     __t
	jsr     _map_set
;
; for (gpit = 6; gpit < 11; ++ gpit) {      
;
	inc     _gpit
	jmp     L29CA
;
; f_zone_ac = 0;
;
L29CB:	lda     #$00
	sta     _f_zone_ac
;
; return;
;
	rts
;
; switch (level) {
;
L29BB:	lda     _level
;
; }
;
	cmp     #$07
	beq     L29E0
	cmp     #$09
	jeq     L2A1A
	jmp     L29DE
;
; switch (n_pant) {
;
L29E0:	lda     _n_pant
;
; }
;
	cmp     #$0D
	beq     L29E6
	cmp     #$12
	jne     L29DE
;
; if (PLAYER_TOUCHES (8, 2) && f0 == 0) {
;
	lda     _rdx
	cmp     #$08
	bne     L29E6
	lda     _rdy
	cmp     #$02
	bne     L29E6
	lda     _f0
	bne     L29E6
;
; sfx_play (SFX_BREAKH, 0);
;
	lda     #$0D
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; close_update_cycle (); update_index = 0;
;
	jsr     _close_update_cycle
	lda     #$00
	sta     _update_index
;
; for (gpit = 4; gpit < 7; ++ gpit) {
;
	lda     #$04
	sta     _gpit
L29F5:	lda     _gpit
	cmp     #$07
	bcs     L29F6
;
; _y = gpit; _x = 9; _t = 29; map_set ();
;
	lda     _gpit
	sta     __y
	lda     #$09
	sta     __x
	lda     #$1D
	sta     __t
	jsr     _map_set
;
; for (gpit = 4; gpit < 7; ++ gpit) {
;
	inc     _gpit
	jmp     L29F5
;
; f0 = 1;
;
L29F6:	lda     #$01
	sta     _f0
;
; return;
;
	rts
;
; if (PLAYER_TOUCHES (3, 10) && f0 == 0) {
;
L29E6:	lda     _rdx
	cmp     #$03
	bne     L29DE
	lda     _rdy
	cmp     #$0A
	bne     L29DE
	lda     _f0
	bne     L29DE
;
; sfx_play (SFX_START, 0);
;
	jsr     pusha
	jsr     _sfx_play
;
; en_t [0] = 4;
;
	lda     #$04
	sta     _en_t
;
; f0 = 1;
;
	lda     #$01
	sta     _f0
;
; break;
;
	jmp     L29DE
;
; if (n_pant == 9) {
;
L2A1A:	lda     _n_pant
	cmp     #$09
	bne     L29DE
;
; if (PLAYER_TOUCHES (3, 9) && f1 == 0) {
;
	lda     _rdx
	cmp     #$03
	bne     L29DE
	lda     _rdy
	cmp     #$09
	bne     L29DE
	lda     _f1
	bne     L29DE
;
; lava_launch ();
;
	jsr     _lava_launch
;
; __asm__ ("lda %v", prx);
;
L29DE:	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #8");
;
	adc     #8
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #16");
;
	adc     #16
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ora %v", _x);
;
	ora     __x
;
; __asm__ ("sta %v", rdi);
;
	sta     _rdi
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("sta %v", rdt);
;
	sta     _rdt
;
; __asm__ ("lda %v", cy1);
;
	lda     _cy1
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; if (rdt == TILE_RAY) {
;
	lda     _rdt
	cmp     #$1B
	bne     L2A61
;
; pad_this_frame = 0;  // so Ninjajar doesn't punch!
;
	lda     #$00
	sta     _pad_this_frame
;
; _t = 46; map_set ();
;
	lda     #$2E
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_OBJECT, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; -- ray_tiles;
;
	dec     _ray_tiles
;
; if (ray_tiles == 0) {
;
	lda     _ray_tiles
	bne     L2A61
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (level == 7 && n_pant == 20) {
;
	lda     _level
	cmp     #$07
	bne     L2A4F
	lda     _n_pant
	cmp     #$14
	bne     L2A4F
;
; _t = 16; _y = 5; _x = 9; map_set ();
;
	lda     #$10
	sta     __t
	lda     #$05
	sta     __y
	lda     #$09
	sta     __x
	jsr     _map_set
;
; _t = 16; _y = 2; _x = 6; map_set ();
;
	lda     #$10
	sta     __t
	lda     #$02
	sta     __y
	lda     #$06
	sta     __x
	jsr     _map_set
;
; } else {
;
	jmp     L2A61
;
; rdn = TILE_FENCE; clear_tile_rdn ();
;
L2A4F:	lda     #$0A
	sta     _rdn
	jsr     _clear_tile_rdn
;
; if (rdt == TILE_FACE) {
;
L2A61:	lda     _rdt
	cmp     #$24
	beq     L34AB
;
; }
;
	rts
;
; pad_this_frame = 0;  // so Ninjajar doesn't punch!
;
L34AB:	lda     #$00
	sta     _pad_this_frame
;
; rda = 0;
;
	sta     _rda
;
; __asm__ ("ldx %v", rdi);
;
	ldx     _rdi
;
; __asm__ ("txa");
;
L2A6C:	txa
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #16");
;
	sbc     #16
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", map_buff);
;
	lda     _map_buff,x
;
; __asm__ ("cmp #%b", TILE_CHAIN);
;
	cmp     #$11
;
; __asm__ ("bne %g", count_tiles_done);
;
	bne     L2A75
;
; __asm__ ("inc %v", rda);
;
	inc     _rda
;
; __asm__ ("jmp %g", count_tiles_loop);
;
	jmp     L2A6C
;
; if (rda == 0) {
;
L2A75:	lda     _rda
	bne     L2A78
;
; face_count = 0;
;
	sta     _face_count
;
; face_cleared = 1;
;
	lda     #$01
	sta     _face_cleared
;
; rdi = SFX_OBJECT;
;
	lda     #$02
;
; } else if (rda == face_count + 1) {
;
	jmp     L34AA
L2A78:	ldx     #$00
	lda     _face_count
	clc
	adc     #$01
	bcc     L2A83
	inx
L2A83:	cpx     #$00
	bne     L2A81
	cmp     _rda
	bne     L2A81
;
; face_count = rda;
;
	lda     _rda
	sta     _face_count
;
; face_cleared ++;
;
	lda     _face_cleared
	clc
	adc     #$01
	sta     _face_cleared
;
; if (face_cleared == face_tiles) {
;
	lda     _face_tiles
	cmp     _face_cleared
	bne     L2A87
;
; rdi = SFX_FANFARE;
;
	lda     #$13
	sta     _rdi
;
; rdn = TILE_SPIKES; clear_tile_rdn ();
;
	lda     #$0C
	sta     _rdn
	jsr     _clear_tile_rdn
;
; } else rdi = SFX_OBJECT;
;
	jmp     L2A91
L2A87:	lda     #$02
;
; } else {
;
	jmp     L34AA
;
; face_count = face_cleared = 0;
;
L2A81:	lda     #$00
	sta     _face_cleared
	sta     _face_count
;
; rdi = SFX_ENHIT;   
;
	lda     #$06
L34AA:	sta     _rdi
;
; sfx_play (rdi, 0);
;
L2A91:	lda     _rdi
	jsr     pusha
	lda     #$00
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ custom_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_custom_hud: near

.segment	"CODE"

;
; if (pcoins != opcoins) {
;
	lda     _opcoins
	cmp     _pcoins
	beq     L2A9B
;
; P_T (16, 26, pcoins);
;
	lda     #$10
	sta     __x
	lda     #$1A
	sta     __y
	lda     _pcoins
	sta     __t
	jsr     _p_t
;
; opcoins = pcoins;
;
	lda     _pcoins
	sta     _opcoins
;
; }
;
L2A9B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_tile_break (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_tile_break: near

.segment	"CODE"

;
; rdt = map_buff [COORDS(_x,_y)];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rdt
;
; if (rdt == 14 && (rand8 () & 7) < 6) _t = 47;
;
	cmp     #$0E
	bne     L2AB1
	jsr     _rand8
	and     #$07
	cmp     #$06
	bcs     L2AB1
	lda     #$2F
	sta     __t
;
; screen_clear_list [(_y << 1) | (_x > 7)] |= bits [_x & 7];
;
L2AB1:	ldx     #$00
	lda     __y
	asl     a
	bcc     L34AD
	inx
L34AD:	sta     ptr1
	stx     ptr1+1
	lda     __x
	cmp     #$08
	lda     #$00
	rol     a
	ora     ptr1
	clc
	adc     #<(_screen_clear_list)
	tay
	lda     ptr1+1
	adc     #>(_screen_clear_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     __x
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ on_tile_get (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_tile_get: near

.segment	"CODE"

;
; ++ pcoins;
;
	inc     _pcoins
;
; if (pcoins == (kids_mode ? 25 : 50)) {
;
	lda     _kids_mode
	beq     L2AC4
	lda     #$19
	jmp     L2AC6
L2AC4:	lda     #$32
L2AC6:	cmp     _pcoins
	bne     L2AC1
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pcoins = 0;
;
	lda     #$00
	sta     _pcoins
;
; ++ plife;
;
	inc     _plife
;
; }
;
L2AC1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_obj_got (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_obj_got: near

.segment	"CODE"

;
; win_game = (pobjs == 1);
;
	lda     _pobjs
	cmp     #$01
	jsr     booleq
	sta     _win_game
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ on_enem_killed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_on_enem_killed: near

.segment	"CODE"

;
; if (level == 7 && n_pant < 4) {
;
	lda     _level
	cmp     #$07
	bne     L2AD5
	lda     _n_pant
	cmp     #$04
	bcc     L2AD4
L2AD5:	rts
;
; ++ f0; 
;
L2AD4:	inc     _f0
;
; if (f0 == 3) {
;
	lda     _f0
	cmp     #$03
	bne     L2AD8
;
; sfx_play (SFX_FANFARE, 0);
;
	lda     #$13
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; _x = 7; _y = 11; _t = 0; map_set ();
;
	lda     #$07
	sta     __x
	lda     #$0B
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; _x = 8; _y = 11; _t = 0; map_set ();
;
	lda     #$08
	sta     __x
	lda     #$0B
	sta     __y
	lda     #$00
	sta     __t
	jmp     _map_set
;
; }
;
L2AD8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_load: near

.segment	"CODE"

;
; if (c_locks == 0) { c_bolts_max = 0;  return; }
;
	lda     _c_locks
	ora     _c_locks+1
	bne     L2AEC
	sta     _c_bolts_max
	rts
;
; __asm__ ("ldx #0");
;
L2AEC:	ldx     #0
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_locks);
;
L2AF3:	lda     (_c_locks),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", lknp);
;
	sta     _lknp,x
;
; __asm__ ("lda (%v), y", c_locks);
;
	lda     (_c_locks),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", lkyx);
;
	sta     _lkyx,x
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, x", lkact);
;
	sta     _lkact,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", bolts_load_loop);
;
	bne     L2AF3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolt_clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolt_clear: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("lda %v, x", lknp);
;
L2B01:	lda     _lknp,x
;
; __asm__ ("cmp %v", n_pant);
;
	cmp     _n_pant
;
; __asm__ ("bne %g", bolt_clear_loop_continue);
;
	bne     L2B05
;
; __asm__ ("lda %v, x", lkyx);
;
	lda     _lkyx,x
;
; __asm__ ("cmp %v", rdd);
;
	cmp     _rdd
;
; __asm__ ("bne %g", bolt_clear_loop_continue);
;
	bne     L2B05
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", lkact);
;
	sta     _lkact,x
;
; __asm__ ("inx");
;
L2B05:	inx
;
; __asm__ ("cpx %v", c_bolts_max);
;
	cpx     _c_bolts_max
;
; __asm__ ("bne %g", bolt_clear_loop);
;
	bne     L2B01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("ldx #0");
;
	tax
;
; __asm__ ("stx %v", gpit);
;
L2B12:	stx     _gpit
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("beq %g", breakable_do_anim_continue);
;
	beq     L2B16
;
; __asm__ ("inc %v, x", brkf);
;
	inc     _brkf,x
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("cmp #%b", BREAKABLE_MAX_FRAMES);
;
	cmp     #$0C
;
; __asm__ ("bne %g", breakable_do_anim_set_flag);
;
	bne     L2B1C
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", brkf);
;
	sta     _brkf,x
;
; __asm__ ("lda %v, x", brkx);
;
	lda     _brkx,x
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v, x", brky);
;
	lda     _brky,x
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; _t = BREAKABLE_ERASE;
;
	lda     _c_tsmap
	sta     ptr1
	lda     _c_tsmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __t
;
; on_tile_break ();
;
	jsr     _on_tile_break
;
; map_set ();
;
	jsr     _map_set
;
; __asm__ ("jmp %g", breakable_do_anim_continue);
;
	jmp     L2B16
;
; __asm__ ("lda #1");
;
L2B1C:	lda     #1
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("ldx %v", gpit);
;
L2B16:	ldx     _gpit
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", BREAKABLE_MAX);
;
	cpx     #$04
;
; __asm__ ("bne %g", breakable_do_anim_loop);
;
	bne     L2B12
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ break_wall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_break_wall: near

.segment	"CODE"

;
; rdm = _x | (_y << 4);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _rdm
;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("stx %v", gpit);
;
L2B36:	stx     _gpit
;
; __asm__ ("lda %v, x", brkf);
;
	lda     _brkf,x
;
; __asm__ ("bne %g", break_wall_anim_create_continue);
;
	bne     L2B3A
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v", do_process_breakable);
;
	sta     _do_process_breakable
;
; __asm__ ("sta %v, x", brkf);
;
	sta     _brkf,x
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("sta %v, x", brkx);
;
	sta     _brkx,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("sta %v, x", brky);
;
	sta     _brky,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda #%b", BREAKABLE_BREAKING);
;
	lda     #$2E
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; update_list_tile ();
;
	jsr     _update_list_tile
;
; map_attr [rdm] = 8;
;
	ldy     _rdm
	lda     #$08
	sta     _map_attr,y
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jmp     _sfx_play
;
; __asm__ ("ldx %v", gpit);
;
L2B3A:	ldx     _gpit
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", BREAKABLE_MAX);
;
	cpx     #$04
;
; __asm__ ("bne %g", break_wall_anim_create_loop);
;
	bne     L2B36
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("ldy #0");
;
	ldy     #0
;
; __asm__ ("lda (%v), y", c_hotspots);
;
L2B5E:	lda     (_c_hotspots),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", ht);
;
	sta     _ht,x
;
; __asm__ ("lda (%v), y", c_hotspots);
;
	lda     (_c_hotspots),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("sta %v, x", hyx);
;
	sta     _hyx,x
;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v, x", hact);
;
	sta     _hact,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", MAP_W * MAP_H);
;
	cpx     #$19
;
; __asm__ ("bne %g", hotspots_load_loop);
;
	bne     L2B5E
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", hrt);
;
	sta     _hrt
;
; __asm__ ("ldx %v", n_pant);
;
	ldx     _n_pant
;
; __asm__ ("lda %v, x", hact);
;
	lda     _hact,x
;
; __asm__ ("beq %g", hotspots_create_done);
;
	beq     L2B71
;
; __asm__ ("lda %v, x", ht);
;
	lda     _ht,x
;
; __asm__ ("beq %g", hotspots_create_done);
;
	beq     L2B71
;
; __asm__ ("sta %v", hrt);
;
	sta     _hrt
;
; __asm__ ("lda %v, x", hyx);
;
	lda     _hyx,x
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v", hry);
;
	sta     _hry
;
; __asm__ ("lda %v, x", hyx);
;
	lda     _hyx,x
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", hrx);
;
	sta     _hrx
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", _x);
;
	sta     __x
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", TOP_ADJUST);
;
	adc     #$00
;
; __asm__ ("sta %v", _y);
;
	sta     __y
;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", HOTSPOTS_TILE_BASE);
;
	adc     #$2A
;
; __asm__ ("sta %v", _t);
;
	sta     __t
;
; draw_tile ();
;
	jmp     _draw_tile
;
; }
;
L2B71:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hitter_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hitter_do: near

.segment	"CODE"

;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", HITTER_Y_OFFS);
;
	adc     #$06
;
; __asm__ ("sta %v", hitter_y);
;
	sta     _hitter_y
;
; __asm__ ("adc #4");
;
	adc     #4
;
; __asm__ ("sta %v", hitter_hit_y);
;
	sta     _hitter_hit_y
;
; __asm__ ("ldx %v", hitter_frame);
;
	ldx     _hitter_frame
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("beq %g", hitter_facing_left);
;
	beq     L2BA0
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("adc %v, x", hitter_offs);
;
	adc     _hitter_offs,x
;
; __asm__ ("sta %v", hitter_x);
;
	sta     _hitter_x
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("jmp %g", hitter_facing_done);
;
	jmp     L2BA6
;
; __asm__ ("lda %v", prx);
;
L2BA0:	lda     _prx
;
; __asm__ ("adc #8");
;
	adc     #8
;
; __asm__ ("sbc %v, x", hitter_offs);
;
	sbc     _hitter_offs,x
;
; __asm__ ("sta %v", hitter_x);
;
	sta     _hitter_x
;
; __asm__ ("sta %v", hitter_hit_x);
;
L2BA6:	sta     _hitter_hit_x
;
; __asm__ ("lda %v", hitter_frame);
;
	lda     _hitter_frame
;
; __asm__ ("cmp #%b", HITTER_ACTIVE_FRAME_A);
;
	cmp     #$02
;
; __asm__ ("bcc %g", hitter_inactive);
;
	bcc     L2BB0
;
; __asm__ ("cmp #%b", HITTER_ACTIVE_FRAME_B);
;
	cmp     #$03
;
; __asm__ ("beq %g", hitter_active);
;
	beq     L2BB4
;
; __asm__ ("bcc %g", hitter_active);
;
	bcc     L2BB4
;
; __asm__ ("lda #0");
;
L2BB0:	lda     #0
;
; __asm__ ("sta %v", hitter_hit_y);
;
	sta     _hitter_hit_y
;
; hitter_x, hitter_y + SPRITE_ADJUST, 
;
L2BB4:	jsr     decsp4
	lda     _hitter_x
	ldy     #$03
	sta     (sp),y
	lda     _hitter_y
	clc
	adc     #$07
	dey
	sta     (sp),y
;
; 0xf9 - pfacing, 1, 252
;
	lda     #$F9
	sec
	sbc     _pfacing
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
;
; );
;
	lda     #$FC
	jsr     _oam_spr
;
; if (hitter_hit_y) {
;
	lda     _hitter_hit_y
	beq     L2BC5
;
; _x = hitter_hit_x >> 4;
;
	ldx     #$00
	lda     _hitter_hit_x
	jsr     asrax4
	sta     __x
;
; _y = hitter_hit_y >> 4;
;
	ldx     #$00
	lda     _hitter_hit_y
	jsr     asrax4
	sta     __y
;
; if (map_attr [_x | (hitter_hit_y & 0xf0)] == 24) {
;
	lda     _hitter_hit_y
	and     #$F0
	ora     __x
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	cmp     #$18
	bne     L2BC5
;
; break_wall ();
;
	jsr     _break_wall
;
; hitter_on = 0;
;
	lda     #$00
	sta     _hitter_on
;
; if (half_life) { ++ hitter_frame; if (hitter_frame == HITTER_FRAMES) hitter_on = 0; }
;
L2BC5:	lda     _half_life
	beq     L2BCF
	inc     _hitter_frame
	lda     _hitter_frame
	cmp     #$05
	bne     L2BCF
	lda     #$00
	sta     _hitter_on
;
; }
;
L2BCF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("txa");
;
L2BE5:	txa
;
; __asm__ ("sta %v, x", coco_slots);
;
	sta     _coco_slots,x
;
; __asm__ ("lda #$ff");
;
	lda     #$ff
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("cpx #%b", COCOS_MAX);
;
	cpx     #$03
;
; __asm__ ("bne %g", cocos_init_loop);
;
	bne     L2BE5
;
; __asm__ ("sta %v", coco_slots_i);
;
	stx     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_add: near

.segment	"CODE"

;
; __asm__ ("lda %v", coco_slots_i);
;
	lda     _coco_slots_i
;
; __asm__ ("bne %g", cocos_add_do);
;
	bne     L2BF4
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("dec %v", coco_slots_i);
;
L2BF4:	dec     _coco_slots_i
;
; __asm__ ("ldx %v", coco_slots_i);
;
	ldx     _coco_slots_i
;
; __asm__ ("lda %v, x", coco_slots);
;
	lda     _coco_slots,x
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("sta %v, x", coco_x);
;
	sta     _coco_x,x
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda %v, y", _mx);
;
	lda     __mx,y
;
; __asm__ ("sta %v, x", coco_mx);
;
	sta     _coco_mx,x
;
; __asm__ ("lda %v, y", _my);
;
	lda     __my,y
;
; __asm__ ("sta %v, x", coco_my);
;
	sta     _coco_my,x
;
; sfx_play (SFX_COCO, 1);
;
	lda     #$0A
	jsr     pusha
	lda     #$01
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; __asm__ ("ldx #0");
;
	ldx     #0
;
; __asm__ ("stx %v", coco_it);
;
L2C08:	stx     _coco_it
;
; __asm__ ("lda %v, x", coco_y);
;
	lda     _coco_y,x
;
; __asm__ ("cmp #$ff");
;
	cmp     #$ff
;
; __asm__ ("beq %g", cocos_do_nococo);
;
	jeq     L2C0D
;
; __asm__ ("lda %v, x", coco_x);
;
	lda     _coco_x,x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, x", coco_mx);
;
	adc     _coco_mx,x
;
; __asm__ ("sta %v, x", coco_x);
;
	sta     _coco_x,x
;
; __asm__ ("sta %v", _coco_x);
;
	sta     __coco_x
;
; __asm__ ("lda %v, x", coco_y);
;
	lda     _coco_y,x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, x", coco_my);
;
	adc     _coco_my,x
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("sta %v", _coco_y);
;
	sta     __coco_y
;
; _coco_x, _coco_y + SPRITE_ADJUST,
;
	jsr     decsp4
	lda     __coco_x
	ldy     #$03
	sta     (sp),y
	lda     __coco_y
	clc
	adc     #$07
	dey
	sta     (sp),y
;
; COCOS_PATTERN, COCOS_PALETTE, 236 + (coco_it << 2)
;
	lda     #$FA
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	ldx     #$00
	lda     _coco_it
	jsr     aslax2
;
; );
;
	clc
	adc     #$EC
	jsr     _oam_spr
;
; IF_COLLIDE_IN ((_coco_x + 4), (_coco_y + 4), prx, pry) {
;
	lda     __coco_x
	clc
	adc     #$04
	sta     __x1
	lda     __coco_y
	clc
	adc     #$04
	sta     __y1
	lda     _prx
	sta     __x2
	lda     _pry
	sta     __y2
	jsr     _collide_in
	tax
	beq     L2C31
;
; if (kids_mode) {
;
	lda     _kids_mode
	beq     L2C33
;
; pstate = EST_PARALYZED;
;
	lda     #$08
	sta     _pstate
;
; pctstate = 100;
;
	lda     #$64
	sta     _pctstate
;
; } else phit = 1;
;
	jmp     L2C39
L2C33:	lda     #$01
	sta     _phit
;
; __asm__ ("ldx %v", coco_it);
;
L2C39:	ldx     _coco_it
;
; __asm__ ("jmp %g", cocos_do_destroy);
;
	jmp     L2C3E
;
; __asm__ ("ldx %v", coco_it);
;
L2C31:	ldx     _coco_it
;
; __asm__ ("lda #%b", (COCOS_V - 1));
;
	lda     #$03
;
; __asm__ ("cmp %v", _coco_x);
;
	cmp     __coco_x
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L2C3E
;
; __asm__ ("lda %v", _coco_x);
;
	lda     __coco_x
;
; __asm__ ("cmp #%w", (249 - COCOS_V));
;
	cmp     #$00F5
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L2C3E
;
; __asm__ ("lda #%b", (COCOS_V - 1));
;
	lda     #$03
;
; __asm__ ("cmp %v", _coco_y);
;
	cmp     __coco_y
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L2C3E
;
; __asm__ ("lda %v", _coco_y);
;
	lda     __coco_y
;
; __asm__ ("cmp #%w", (185 - COCOS_V));
;
	cmp     #$00B5
;
; __asm__ ("bcs %g", cocos_do_destroy);
;
	bcs     L2C3E
;
; __asm__ ("lda %v", _coco_x);
;
	lda     __coco_x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _coco_y);
;
	lda     __coco_y
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("ora %v", cx1);
;
	ora     _cx1
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", map_attr);
;
	lda     _map_attr,y
;
; __asm__ ("and #8");
;
	and     #8
;
; __asm__ ("bne %g", cocos_do_destroy);
;
	bne     L2C3E
;
; __asm__ ("jmp %g", cocos_do_continue);
;
	jmp     L2C62
;
; 0, 240,
;
L2C0D:	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
;
; 0xfa, 1, 236 + (coco_it << 2)
;
	lda     #$FA
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	ldx     #$00
	lda     _coco_it
	jsr     aslax2
;
; );
;
	clc
	adc     #$EC
	jsr     _oam_spr
;
; __asm__ ("ldx %v", coco_it);
;
	ldx     _coco_it
;
; __asm__ ("jmp %g", cocos_do_continue);
;
	jmp     L2C62
;
; __asm__ ("lda #$ff");
;
L2C3E:	lda     #$ff
;
; __asm__ ("sta %v, x", coco_y);
;
	sta     _coco_y,x
;
; __asm__ ("ldy %v", coco_slots_i);
;
	ldy     _coco_slots_i
;
; __asm__ ("txa");
;
	txa
;
; __asm__ ("sta %v, y", coco_slots);
;
	sta     _coco_slots,y
;
; __asm__ ("inc %v", coco_slots_i);
;
	inc     _coco_slots_i
;
; __asm__ ("inx");
;
L2C62:	inx
;
; __asm__ ("cpx #%b", COCOS_MAX);
;
	cpx     #$03
;
; __asm__ ("bne %g", cocos_do_loop);
;
	jne     L2C08
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_set_safe (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_set_safe: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; px = (signed int) (l_ini_x [level] << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; py = (signed int) (l_ini_y [level] << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; player_set_safe ();
;
	jsr     _player_set_safe
;
; pfacing = l_pfacing [level];
;
	ldy     _level
	lda     _l_pfacing,y
	sta     _pfacing
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$01
	sta     _vertical_engine_type
;
; pvx = pvy = pfr = pctfr = pj = pctj = pobjs = pkeys = pkilled = 0;
;
	lda     #$00
	sta     _pkilled
	sta     _pkeys
	sta     _pobjs
	sta     _pctj
	sta     _pj
	sta     _pctfr
	sta     _pfr
	sta     _pvy
	sta     _pvx
;
; hitter_on = 0;
;
	sta     _hitter_on
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; if (plife) --plife; else game_over = 1;
;
	lda     _plife
	beq     L2CAB
	dec     _plife
	jmp     L2CAE
L2CAB:	lda     #$01
	sta     _game_over
;
; pstate = EST_FLICKERING;
;
L2CAE:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; pvx = pvy = pj = 0;
;
	lda     #$00
	sta     _pj
	sta     _pvy
	sta     _pvx
;
; if (!game_over) {
;
	lda     _game_over
	bne     L2CC2
;
; px = px_safe;
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe;
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; }
;
L2CC2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ process_tile (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_process_tile: near

.segment	"CODE"

;
; _x = x0; _y = y0;
;
	ldy     #$01
	lda     (sp),y
	sta     __x
	dey
	lda     (sp),y
	sta     __y
;
; if (qt == LOCK_TILE && pkeys) {
;
	ldy     #$02
	lda     (sp),y
	cmp     #$0F
	jne     incsp3
	lda     _pkeys
	jeq     incsp3
;
; _t = 0; map_set (); // rdd == YX
;
	lda     #$00
	sta     __t
	jsr     _map_set
;
; bolt_clear ();
;
	jsr     _bolt_clear
;
; -- pkeys;
;
	dec     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pstate != EST_NORMAL) {
;
	lda     _pstate
	beq     L2CDF
;
; -- pctstate;
;
	dec     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L2CDF
	sta     _pstate
;
; if (pstate == EST_PARALYZED) pad_this_frame = pad = 0;
;
L2CDF:	lda     _pstate
	cmp     #$08
	bne     L2CE3
	lda     #$00
	sta     _pad
	sta     _pad_this_frame
;
; hitv = hith = 0;
;
L2CE3:	lda     #$00
	sta     _hith
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$03
	bne     L2CEB
;
; if (pad & (PAD_DOWN|PAD_A)) {
;
	lda     _pad
	and     #$21
	beq     L2CED
;
; pvy += PLAYER_AY_SWIM;
;
	lda     #$02
	clc
	adc     _pvy
	sta     _pvy
;
; if (pvy > PLAYER_VY_SWIM_MAX) pvy = PLAYER_VY_SWIM_MAX;
;
	sec
	sbc     #$11
	bvs     L2CF6
	eor     #$80
L2CF6:	bpl     L2D11
	lda     #$10
;
; } else {
;
	jmp     L34B3
;
; pvy -= PLAYER_AY_SWIM >> 1;
;
L2CED:	dec     _pvy
;
; if (pvy < -PLAYER_VY_SWIM_MAX) pvy = -PLAYER_VY_SWIM_MAX;
;
	lda     _pvy
	sec
	sbc     #$F0
	bvc     L2D00
	eor     #$80
L2D00:	bpl     L2D11
	lda     #$F0
;
; } else
;
	jmp     L34B3
;
; pvy += pj ? PLAYER_G_JUMPING : PLAYER_G;
;
L2CEB:	lda     _pj
	beq     L2D06
	lda     #$01
	jmp     L2D08
L2D06:	lda     #$04
L2D08:	clc
	adc     _pvy
	sta     _pvy
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX;
;
	sec
	sbc     #$41
	bvs     L2D0E
	eor     #$80
L2D0E:	bpl     L2D0B
	lda     #$40
	sta     _pvy
;
; if (pgotten) pvy = 0;
;
L2D0B:	lda     _pgotten
	beq     L2D11
	lda     #$00
L34B3:	sta     _pvy
;
; py += pvy; if (py < -(8<<FIXBITS)) py = -(8<<FIXBITS);
;
L2D11:	lda     _pvy
	ldx     #$00
	cmp     #$80
	bcc     L34B9
	dex
	clc
L34B9:	adc     _py
	sta     _py
	txa
	adc     _py+1
	sta     _py+1
	lda     _py
	cmp     #$80
	lda     _py+1
	sbc     #$FF
	bvc     L2D1C
	eor     #$80
L2D1C:	bpl     L2D19
	ldx     #$FF
	lda     #$80
	sta     _py
	stx     _py+1
;
; pry = py >> FIXBITS;
;
L2D19:	lda     _py
	ldx     _py+1
	jsr     asrax4
	sta     _pry
;
; ppossee = pquicksanded = 0;
;
	lda     #$00
	sta     _pquicksanded
	sta     _ppossee
;
; cx1 = (prx + 4) >> 4;
;
	tax
	lda     _prx
	clc
	adc     #$04
	bcc     L2D28
	inx
L2D28:	jsr     shrax4
	sta     _cx1
;
; cx2 = (prx + 11) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0B
	bcc     L2D2C
	inx
L2D2C:	jsr     shrax4
	sta     _cx2
;
; if (pvy + pgtmy)
;
	ldx     #$00
	lda     _pvy
	bpl     L2D2F
	dex
L2D2F:	clc
	adc     _pgtmy
	pha
	txa
	adc     _pgtmy+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L2D66
;
; if (pvy + pgtmy < 0)
;
	ldx     #$00
	lda     _pvy
	bpl     L2D32
	dex
L2D32:	clc
	adc     _pgtmy
	txa
	adc     _pgtmy+1
	tax
	cpx     #$80
	bcc     L2D30
;
; cy1 = cy2 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L2D37
	inx
L2D37:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rdb = 8; rdc = (cy1 << 4) + 8;
;
	lda     #$08
	sta     _rdb
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	clc
	adc     #$08
;
; else if (pvy + pgtmy > 0)
;
	jmp     L34BC
L2D30:	ldx     #$00
	lda     _pvy
	bpl     L2D41
	dex
L2D41:	clc
	adc     _pgtmy
	pha
	txa
	adc     _pgtmy+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2D42
	eor     #$80
L2D42:	jpl     L2D66
;
; cy1 = cy2 = (pry + 16) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2D47
	inx
L2D47:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; if (pry > ((cy1 - 1) << 4) + (pvy >> FIXBITS)) goto nopor;
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L2D4C
	ldx     #$FF
L2D4C:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _pvy
	bpl     L2D4E
	dex
L2D4E:	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     tosicmp
	beq     L34BB
	bcs     L2D66
;
; rdb = 12; rdc = (cy1 - 1) << 4;
;
L34BB:	lda     #$0C
	sta     _rdb
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
L34BC:	sta     _rdc
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rdb) || (at2 & rdb)) {
;
	ldx     #$00
	lda     _rdb
	and     _at1
	pha
	pla
	bne     L2D59
	lda     _rdb
	and     _at2
	pha
	pla
	beq     L2D58
;
; pvy = 0; pry = rdc; py = pry << FIXBITS; pgotten = 0;
;
L2D59:	stx     _pvy
	lda     _rdc
	sta     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
	lda     #$00
	sta     _pgotten
;
; } else if ((at1 & 1) || (at2 & 1)) hitv = 1;  
;
	jmp     L2D66
L2D58:	lda     _at1
	and     #$01
	bne     L2D67
	lda     _at2
	and     #$01
	beq     L2D66
L2D67:	lda     #$01
	sta     _hitv
;
; psafe = pscreenissafe;
;
L2D66:	lda     _pscreenissafe
	sta     _psafe
;
; cy1 = cy2 = (pry + 15) >> 4; cm_two_points ();
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L2D73
	inx
L2D73:	jsr     shrax4
	sta     _cy2
	sta     _cy1
	jsr     _cm_two_points
;
; if ((at1 == 2) || (at2 == 2)) {
;
	lda     _at1
	cmp     #$02
	beq     L2D76
	lda     _at2
	cmp     #$02
	bne     L2D81
;
; pquicksanded = 1;
;
L2D76:	lda     #$01
	sta     _pquicksanded
;
; if (pvy + pgtmy < 0) { pj = 0; }
;
	ldx     #$00
	lda     _pvy
	bpl     L2D7E
	dex
L2D7E:	clc
	adc     _pgtmy
	txa
	adc     _pgtmy+1
	tax
	cpx     #$80
	bcc     L2D7C
	lda     #$00
	sta     _pj
;
; else { pvy = PLAYER_VY_SINKING; ppossee = 1; }
;
	jmp     L2D81
L2D7C:	lda     #$01
	sta     _pvy
	sta     _ppossee
;
; if ((at1 == 48) || (at2 == 48)) {
;
L2D81:	lda     _at1
	cmp     #$30
	beq     L2D87
	lda     _at2
	cmp     #$30
	bne     L2D86
;
; if (at1 == 48) _x = cx1; 
;
L2D87:	lda     _at1
	cmp     #$30
	bne     L2D8B
	lda     _cx1
;
; else _x = cx2;
;
	jmp     L34B4
L2D8B:	lda     _cx2
L34B4:	sta     __x
;
; _y = cy1; _t = SPRING_SPIKE_TILE; map_set ();
;
	lda     _cy1
	sta     __y
	lda     #$0C
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_SPRING, 0);
;
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; cy1 = cy2 = (pry + 16) >> 4; cm_two_points ();
;
L2D86:	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2D9E
	inx
L2D9E:	jsr     shrax4
	sta     _cy2
	sta     _cy1
	jsr     _cm_two_points
;
; ppossee = ppossee || (at1 & 12) || (at2 & 12);
;
	lda     _ppossee
	bne     L2DA1
	lda     _at1
	and     #$0C
	bne     L2DA1
	lda     _at2
	and     #$0C
	beq     L2DA4
L2DA1:	lda     #$01
L2DA4:	sta     _ppossee
;
; pslippery = (at1 & 64) || (at2 & 64);
;
	lda     _at1
	and     #$40
	bne     L2DA6
	lda     _at2
	and     #$40
	beq     L2DA9
L2DA6:	lda     #$01
L2DA9:	sta     _pslippery
;
; if (ppossee) {
;
	lda     _ppossee
	beq     L2DB8
;
; if (at1 & 32) { 
;
	lda     _at1
	and     #$20
	beq     L2DAC
;
; pgotten = 1; pgtmy = 0;
;
	lda     #$01
	sta     _pgotten
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
;
; psafe = 0;
;
	sta     _psafe
;
; pgtmx = _pgtmx [at1 & 1]; 
;
	lda     _at1
	and     #$01
	clc
	adc     #<(__pgtmx)
	tay
	lda     #$00
	adc     #>(__pgtmx)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L2DB7
	dex
L2DB7:	sta     _pgtmx
	stx     _pgtmx+1
;
; if (at2 & 32) { 
;
L2DAC:	lda     _at2
	and     #$20
	beq     L2DB8
;
; pgotten = 1; pgtmy = 0; 
;
	lda     #$01
	sta     _pgotten
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
;
; psafe = 0;
;
	sta     _psafe
;
; pgtmx = _pgtmx [at2 & 1]; 
;
	lda     _at2
	and     #$01
	clc
	adc     #<(__pgtmx)
	tay
	lda     #$00
	adc     #>(__pgtmx)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L2DC3
	dex
L2DC3:	sta     _pgtmx
	stx     _pgtmx+1
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L2DB8:	lda     _vertical_engine_type
	cmp     #$01
	jne     L2DE5
;
; if ((pad_this_frame & PAD_A) && !pj) {
;
	lda     _pad_this_frame
	and     #$01
	beq     L2DD7
	lda     _pj
	bne     L2DD7
;
; if (pgotten || ppossee || hitv) {
;
	lda     _pgotten
	bne     L2DCC
	lda     _ppossee
	bne     L2DCC
	lda     _hitv
	beq     L2DD7
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
L2DCC:	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	lda     #$CC
	sta     _pvy
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (psafe && !pgotten && !hitv && pstate == EST_NORMAL) player_set_safe ();
;
	lda     _psafe
	beq     L2DD7
	lda     _pgotten
	bne     L2DD7
	lda     _hitv
	bne     L2DD7
	lda     _pstate
	bne     L2DD7
	jsr     _player_set_safe
;
; if (pad & PAD_A) {
;
L2DD7:	lda     _pad
	and     #$01
	beq     L2DDC
;
; if (pj) {
;
	lda     _pj
	beq     L2DE5
;
; ++ pctj; if (pctj == PLAYER_VY_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L2DE5
;
; } else {
;
	jmp     L2DE8
;
; if (pj) {
;
L2DDC:	lda     _pj
	beq     L2DE8
;
; if (pvy < -PLAYER_VY_JUMP_RELEASE) pvy = -PLAYER_VY_JUMP_RELEASE;
;
	lda     _pvy
	sec
	sbc     #$E8
	bvc     L2DEB
	eor     #$80
L2DEB:	bpl     L2DE8
	lda     #$E8
	sta     _pvy
;
; pj = 0;
;
L2DE8:	lda     #$00
	sta     _pj
;
; __asm__ ("lda %v", pslippery);
;
L2DE5:	lda     _pslippery
;
; __asm__ ("beq %g", player_move_no_slippery);
;
	beq     L2DF2
;
; __asm__ ("ldx #%b", PLAYER_AX_SLIPPERY);
;
	ldx     #$01
;
; __asm__ ("ldy %v", PLAYER_RX_SLIPPERY);
;
	ldy     _half_life
;
; __asm__ ("lda #%b", PLAYER_VX_MAX_SLIPPERY);
;
	lda     #$30
;
; __asm__ ("jmp %g", player_move_horizontal_set);
;
	jmp     L2DF9
;
; __asm__ ("lda %v", pquicksanded);
;
L2DF2:	lda     _pquicksanded
;
; __asm__ ("beq %g", player_move_no_quicksands);
;
	beq     L2DFC
;
; __asm__ ("ldx #%b", PLAYER_AX_QUICKSANDS);
;
	ldx     #$01
;
; __asm__ ("ldy #%b", PLAYER_RX_QUICKSANDS);
;
	ldy     #$08
;
; __asm__ ("lda #%b", PLAYER_VX_MAX_QUICKSANDS);
;
	tya
;
; __asm__ ("jmp %g", player_move_horizontal_set);
;
	jmp     L2DF9
;
; __asm__ ("ldx #%b", PLAYER_AX);
;
L2DFC:	ldx     #$03
;
; __asm__ ("ldy #%b", PLAYER_RX);
;
	ldy     #$04
;
; __asm__ ("lda #%b", PLAYER_VX_MAX);
;
	lda     #$20
;
; __asm__ ("stx %v", player_ax);
;
L2DF9:	stx     _player_ax
;
; __asm__ ("sty %v", player_rx);
;
	sty     _player_rx
;
; __asm__ ("sta %v", player_vx_max);
;
	sta     _player_vx_max
;
; if (!((pad & PAD_LEFT) || (pad & PAD_RIGHT))) {
;
	lda     _pad
	and     #$40
	bne     L2E0F
	lda     _pad
	and     #$80
	beq     L2E12
L2E0F:	lda     #$01
L2E12:	jsr     bnega
	beq     L2E28
;
; if (pvx > 0) {
;
	lda     _pvx
	sec
	sbc     #$01
	bvs     L2E16
	eor     #$80
L2E16:	bpl     L2E13
;
; pvx -= _PLAYER_RX; if (pvx < 0) pvx = 0;
;
	lda     _player_rx
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	asl     a
	bcc     L2E28
;
; } else if (pvx < 0) {
;
	jmp     L34BD
L2E13:	lda     _pvx
	asl     a
	bcc     L2E28
;
; pvx += _PLAYER_RX; if (pvx > 0) pvx = 0;
;
	lda     _player_rx
	clc
	adc     _pvx
	sta     _pvx
	sec
	sbc     #$01
	bvs     L2E2B
	eor     #$80
L2E2B:	bpl     L2E28
L34BD:	lda     #$00
	sta     _pvx
;
; if (pad & PAD_LEFT) {
;
L2E28:	lda     _pad
	and     #$40
	beq     L2E2E
;
; pvx -= _PLAYER_AX;
;
	lda     _player_ax
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
;
; if (pvx < -_PLAYER_VX_MAX) pvx = -_PLAYER_VX_MAX;
;
	ldx     #$00
	lda     _pvx
	bpl     L2E36
	dex
L2E36:	jsr     pushax
	ldx     #$00
	lda     _player_vx_max
	bpl     L2E37
	dex
L2E37:	jsr     negax
	jsr     tosicmp
	bpl     L2E34
	ldx     #$00
	lda     _player_vx_max
	bpl     L2E3A
	dex
L2E3A:	jsr     negax
	sta     _pvx
;
; pfacing = 0;
;
L2E34:	lda     #$00
	sta     _pfacing
;
; if (pad & PAD_RIGHT) {
;
L2E2E:	lda     _pad
	and     #$80
	beq     L2E3D
;
; pvx += _PLAYER_AX;
;
	lda     _player_ax
	clc
	adc     _pvx
	sta     _pvx
;
; if (pvx > _PLAYER_VX_MAX) pvx = _PLAYER_VX_MAX;  
;
	ldx     #$00
	lda     _pvx
	bpl     L2E45
	dex
L2E45:	jsr     pushax
	ldx     #$00
	lda     _player_vx_max
	bpl     L2E46
	dex
L2E46:	jsr     tosicmp
	bmi     L2E43
	beq     L2E43
	lda     _player_vx_max
	sta     _pvx
;
; pfacing = 1;
;
L2E43:	lda     #$01
	sta     _pfacing
;
; px += pvx;
;
L2E3D:	lda     _pvx
	ldx     #$00
	cmp     #$80
	bcc     L34BA
	dex
	clc
L34BA:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
;
; if (px < (0 << FIXBITS)) px = 0 << FIXBITS;
;
	ldx     _px+1
	cpx     #$80
	bcc     L2E50
	lda     #$00
	sta     _px
	sta     _px+1
;
; if (px > (240 << FIXBITS)) px = 240 << FIXBITS;
;
L2E50:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$0F
	bvs     L2E58
	eor     #$80
L2E58:	bpl     L2E55
	ldx     #$0F
	lda     #$00
	sta     _px
	stx     _px+1
;
; if (pgotten) px += pgtmx;
;
L2E55:	lda     _pgotten
	beq     L2E5B
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; prx = px >> FIXBITS;
;
L2E5B:	lda     _px
	ldx     _px+1
	jsr     asrax4
	sta     _prx
;
; if (pvx + pgtmx)
;
	ldx     #$00
	lda     _pvx
	bpl     L2E63
	dex
L2E63:	clc
	adc     _pgtmx
	pha
	txa
	adc     _pgtmx+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L2EA4
;
; cy1 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L2E67
	inx
L2E67:	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L2E6B
	inx
L2E6B:	jsr     shrax4
	sta     _cy2
;
; if (pvx + pgtmx < 0)    
;
	ldx     #$00
	lda     _pvx
	bpl     L2E6E
	dex
L2E6E:	clc
	adc     _pgtmx
	txa
	adc     _pgtmx+1
	tax
	cpx     #$80
	bcc     L2E6C
;
; cx1 = cx2 = (prx + 4) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L2E73
	inx
L2E73:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rdc = ((cx1 + 1) << 4) - 4;   
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L2E78
	inx
L2E78:	jsr     shlax4
	sec
	sbc     #$04
;
; else if (pvx + pgtmx > 0)
;
	jmp     L34B7
L2E6C:	ldx     #$00
	lda     _pvx
	bpl     L2E7D
	dex
L2E7D:	clc
	adc     _pgtmx
	pha
	txa
	adc     _pgtmx+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2E7E
	eor     #$80
L2E7E:	bpl     L2E7B
;
; cx1 = cx2 = (prx + 12) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0C
	bcc     L2E83
	inx
L2E83:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rdc = ((cx1 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L2E88
	dex
L2E88:	jsr     shlax4
	clc
	adc     #$04
L34B7:	sta     _rdc
;
; cm_two_points ();
;
L2E7B:	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L2E8C
	lda     _at2
	and     #$08
	beq     L2E8B
;
; pvx = 0; prx = rdc; px = prx << FIXBITS;
;
L2E8C:	lda     #$00
	sta     _pvx
	lda     _rdc
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (              at1 == 10) process_tile (t1, cx1, cy1
;
	lda     _at1
	cmp     #$0A
	bne     L2E96
	jsr     decsp3
	lda     _t1
	ldy     #$02
	sta     (sp),y
	lda     _cx1
	dey
	sta     (sp),y
;
; );
;
	lda     _cy1
	dey
	sta     (sp),y
	jsr     _process_tile
;
; if (cy1 != cy2 && at2 == 10) process_tile (t2, cx1, cy2
;
L2E96:	lda     _cy2
	cmp     _cy1
	beq     L2EA4
	lda     _at2
	cmp     #$0A
	bne     L2EA4
	jsr     decsp3
	lda     _t2
	ldy     #$02
	sta     (sp),y
	lda     _cx1
	dey
	sta     (sp),y
;
; );
;
	lda     _cy2
	dey
	sta     (sp),y
	jsr     _process_tile
;
; } else hith = (at1 & 1) || (at2 & 1);
;
	jmp     L2EA4
L2E8B:	lda     _at1
	and     #$01
	bne     L2EA6
	lda     _at2
	and     #$01
	beq     L2EA9
L2EA6:	lda     #$01
L2EA9:	sta     _hith
;
; _x = (prx + 8) >> 4;
;
L2EA4:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L2EAD
	inx
L2EAD:	jsr     shrax4
	sta     __x
;
; rdm = ((pry + 8) & 0xf0) | _x; cy1 = map_attr [rdm];
;
	lda     _pry
	clc
	adc     #$08
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     __x
	ora     ptr1
	sta     _rdm
	ldy     _rdm
	lda     _map_attr,y
	sta     _cy1
;
; if (cy1 == 128) {
;
	cmp     #$80
	bne     L2EB7
;
; _y = (pry + 8) >> 4; _t = c_tsmap [0]; 
;
	lda     _pry
	clc
	adc     #$08
	bcc     L2EBC
	inx
L2EBC:	jsr     shrax4
	sta     __y
	lda     _c_tsmap
	sta     ptr1
	lda     _c_tsmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __t
;
; sfx_play (SFX_RING, 0);
;
	lda     #$12
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; on_tile_get ();
;
	jsr     _on_tile_get
;
; map_set ();
;
	jsr     _map_set
;
; if (cy1 == 1) phit = 1;
;
L2EB7:	lda     _cy1
	cmp     #$01
	bne     L2EC5
	sta     _phit
;
; if (hitv) {
;
L2EC5:	lda     _hitv
	beq     L2EC9
;
; phit = 1;
;
	lda     #$01
	sta     _phit
;
; pvy = add_sign (-pvy, PLAYER_VX_MAX);
;
	jsr     decsp2
	ldx     #$00
	lda     _pvy
	bpl     L2ED0
	dex
L2ED0:	jsr     negax
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	jsr     _add_sign
	sta     _pvy
;
; } else if (hith) {
;
	jmp     L2ED3
L2EC9:	lda     _hith
	beq     L2ED3
;
; phit = 1;
;
	lda     #$01
	sta     _phit
;
; pvx = add_sign (-pvx, PLAYER_VX_MAX);
;
	jsr     decsp2
	ldx     #$00
	lda     _pvx
	bpl     L2EDA
	dex
L2EDA:	jsr     negax
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	jsr     _add_sign
	sta     _pvx
;
; if (pad_this_frame & PAD_B) {
;
L2ED3:	lda     _pad_this_frame
	and     #$02
	beq     L2EDE
;
; if (hitter_on == 0) {
;
	lda     _hitter_on
	bne     L2EDE
;
; hitter_on = 1; hitter_frame = 0;
;
	lda     #$01
	sta     _hitter_on
	lda     #$00
	sta     _hitter_frame
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM) {
;
L2EDE:	lda     _vertical_engine_type
	cmp     #$03
	bne     L2EE4
;
; (pfacing << 2) + 
;
	ldx     #$00
	lda     _pfacing
	jsr     aslax2
;
; (
;
	sta     ptr1
	stx     ptr1+1
;
; (pad & (PAD_LEFT|PAD_RIGHT|PAD_DOWN|PAD_UP|PAD_A)) ?
;
	lda     _pad
	and     #$F1
;
; ((frame_counter >> 2) & 3) :
;
	beq     L2EED
	ldx     #$00
	lda     _frame_counter
	jsr     asrax2
	and     #$03
;
; 1
;
	jmp     L2EF1
;
; )
;
L2EED:	lda     #$01
;
; ];    
;
L2EF1:	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L34B1
	inx
L34B1:	sta     ptr1
	txa
	clc
	adc     #>(_player_frames)
	sta     ptr1+1
	ldy     #<(_player_frames)
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L34B8
;
; } else 
;
	jmp     L34B8
;
; if (ppossee || pgotten) {
;
L2EE4:	lda     _ppossee
	bne     L2EF6
	lda     _pgotten
	beq     L2EF5
;
; psprid = player_frames [(pfacing << 2) + (pvx ? (prx >> 3) & 3 : 1)];
;
L2EF6:	ldx     #$00
	lda     _pfacing
	jsr     aslax2
	sta     ptr1
	stx     ptr1+1
	lda     _pvx
	beq     L2EFD
	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	jmp     L2F00
L2EFD:	lda     #$01
L2F00:	clc
	adc     ptr1
	ldx     ptr1+1
;
; } else {
;
	jmp     L34C5
;
; psprid = player_frames [8 + pfacing];
;
L2EF5:	tax
	lda     _pfacing
	clc
	adc     #$08
L34C5:	bcc     L2F06
	inx
L2F06:	sta     ptr1
	txa
	clc
	adc     #>(_player_frames)
	sta     ptr1+1
	ldy     #<(_player_frames)
	lda     (ptr1),y
L34B8:	sta     _psprid
;
; if (pstate != EST_FLICKERING || half_life) {
;
	lda     _pstate
	cmp     #$02
	bne     L2F08
	lda     _half_life
	beq     L2F07
;
; rda = psprid + c_player_offset;
;
L2F08:	lda     _psprid
	clc
	adc     _c_player_offset
	sta     _rda
;
; oam_2x2_meta_spr (prx + ((pstate == EST_PARALYZED) & half_life), pry + SPRITE_ADJUST, 128, spriteset_pals [rda], rda << 2);
;
	jsr     decsp4
	lda     _prx
	jsr     pusha0
	lda     _pstate
	cmp     #$08
	jsr     booleq
	sta     ptr1
	lda     _half_life
	and     ptr1
	jsr     tosadda0
	ldy     #$03
	sta     (sp),y
	lda     _pry
	clc
	adc     #$07
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	ldy     _rda
	lda     _spriteset_pals,y
	ldy     #$00
	sta     (sp),y
	lda     _rda
	asl     a
	asl     a
	jmp     _oam_2x2_meta_spr
;
; oam_2x2_meta_spr (prx, 240, 128, 0, 252);
;
L2F07:	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$FC
	jmp     _oam_2x2_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ enems_arrays_restore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_arrays_restore: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_maxct);
;
	lda     __en_maxct
;
; __asm__ ("sta %v, y", en_maxct);
;
	sta     _en_maxct,y
;
; __asm__ ("lda %v", _en_touched);
;
	lda     __en_touched
;
; __asm__ ("sta %v, y", en_touched);
;
	sta     _en_touched,y
;
; __asm__ ("lda %v", _en_cttouched);
;
	lda     __en_cttouched
;
; __asm__ ("sta %v, y", en_cttouched);
;
	sta     _en_cttouched,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_enems [n_pant]; rdm = (gp_gen != 0);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L34CB
	inx
	clc
L34CB:	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_gen
	stx     _gp_gen+1
	cpx     #$00
	bne     L2F3B
	cmp     #$00
L2F3B:	jsr     boolne
	sta     _rdm
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	stx     _gpit
L2F3C:	lda     _gpit
	cmp     #$03
	bcc     L34CC
;
; }
;
	rts
;
; if (rdm) if (*gp_gen == 0) rdm = 0;
;
L34CC:	lda     _rdm
	beq     L2F46
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L2F46
	sta     _rdm
;
; if (rdm == 0) {
;
L2F46:	lda     _rdm
	bne     L2F4A
;
; en_t [gpit] = 0;
;
	ldy     _gpit
	sta     _en_t,y
;
; } else
;
	jmp     L2F3E
;
; __asm__ ("ldy #0");
;
L2F4A:	ldy     #0
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdb);
;
	sta     _rdb
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdc);
;
	sta     _rdc
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("lda (%v), y", gp_gen);
;
	lda     (_gp_gen),y
;
; __asm__ ("sta %v", rdd);
;
	sta     _rdd
;
; gp_gen += 4;
;
	lda     #$04
	clc
	adc     _gp_gen
	sta     _gp_gen
	bcc     L2F5F
	inc     _gp_gen+1
;
; __asm__ ("ldx %v", gpit);
;
L2F5F:	ldx     _gpit
;
; __asm__ ("lda %v", rdb);
;
	lda     _rdb
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v, x", en_x1);
;
	sta     _en_x1,x
;
; __asm__ ("lda %v", rdb);
;
	lda     _rdb
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v, x", en_y1);
;
	sta     _en_y1,x
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v, x", en_x2);
;
	sta     _en_x2,x
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("and #$f0");
;
	and     #$f0
;
; __asm__ ("sta %v, x", en_y2);
;
	sta     _en_y2,x
;
; _en_x = en_x1 [gpit];
;
	ldy     _gpit
	lda     _en_x1,y
	sta     __en_x
;
; _en_y = en_y1 [gpit];
;
	ldy     _gpit
	lda     _en_y1,y
	sta     __en_y
;
; _en_maxct = rdd & 0xf0;
;
	lda     _rdd
	and     #$F0
	sta     __en_maxct
;
; rdt = rdd & 0xf;
;
	lda     _rdd
	and     #$0F
	sta     _rdt
;
; _en_mx = ADD_SIGN2 (en_x2 [gpit], en_x1 [gpit], rdt);
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L2F88
	cmp     ptr1
	bne     L2F88
	txa
	jmp     L2F98
L2F88:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L2F95
	beq     L2F95
	lda     _rdt
	jmp     L2F98
L2F95:	ldx     #$00
	lda     _rdt
	jsr     negax
L2F98:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (en_y2 [gpit], en_y1 [gpit], rdt);
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y2,y
	sta     ptr1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L2FA5
	cmp     ptr1
	bne     L2FA5
	txa
	jmp     L2FB5
L2FA5:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L2FB2
	beq     L2FB2
	lda     _rdt
	jmp     L2FB5
L2FB2:	ldx     #$00
	lda     _rdt
	jsr     negax
L2FB5:	sta     __en_my
;
; _en_t = rda;    
;
	lda     _rda
	sta     __en_t
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_status [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; rdt = _en_t & 0xf;
;
	lda     __en_t
	and     #$0F
	sta     _rdt
;
; }
;
	cmp     #$06
	beq     L2FCE
	cmp     #$07
	bne     L2FD8
;
; _en_mx = rdd; // Raw speed
;
	lda     _rdd
	sta     __en_mx
;
; break;
;
	jmp     L2FC7
;
; _en_mx = rdd & 0xf;
;
L2FCE:	lda     _rdd
	and     #$0F
	sta     __en_mx
;
; _en_s = (FANTIES_CELL - 1) << 1;
;
	lda     #$04
	sta     __en_s
;
; en_life [gpit] = FANTIES_LIFE;
;
	ldy     _gpit
	lda     #$03
	sta     _en_life,y
;
; break;
;
	jmp     L2FC7
;
; __asm__ ("ldx %v", gpit);
;
L2FD8:	ldx     _gpit
;
; __asm__ ("lda %v", rdt);
;
	lda     _rdt
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #1");
;
	sbc     #1
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("cmp #1");
;
	cmp     #1
;
; __asm__ ("beq %g", enems_load_en_status_do);
;
	beq     L2FE2
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("cmp #1");
;
	cmp     #1
;
; __asm__ ("bne %g", enems_load_en_status_else);
;
	bne     L2FE6
;
; __asm__ ("sta %v, x", en_status);
;
L2FE2:	sta     _en_status,x
;
; __asm__ ("jmp %g", en_status_done);
;
	jmp     L2FEA
;
; __asm__ ("lda #0");
;
L2FE6:	lda     #0
;
; __asm__ ("sta %v, x", en_status);
;
	sta     _en_status,x
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("cmp #$80");
;
	cmp     #$80
;
; __asm__ ("ror a");
;
	ror     a
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("cmp #$80");
;
	cmp     #$80
;
; __asm__ ("ror a");
;
	ror     a
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; if (rdt == 9) _en_s = DROPS_BASE_SPRITE;
;
L2FEA:	lda     _rdt
	cmp     #$09
	bne     L2FC7
	lda     #$2E
	sta     __en_s
;
; _en_touched = _en_ct = 0;
;
L2FC7:	lda     #$00
	sta     __en_ct
	sta     __en_touched
;
; enems_arrays_restore ();
;
	jsr     _enems_arrays_restore
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
L2F3E:	inc     _gpit
	jmp     L2F3C

.endproc

; ---------------------------------------------------------------
; void __near__ enem_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enem_hit: near

.segment	"CODE"

;
; __asm__ ("lda #1");
;
	lda     #1
;
; __asm__ ("sta %v", _en_touched);
;
	sta     __en_touched
;
; __asm__ ("sta %v", touched);
;
	sta     _touched
;
; __asm__ ("lda #8");
;
	lda     #8
;
; __asm__ ("sta %v", _en_cttouched);
;
	sta     __en_cttouched
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("dec %v, x", en_life);
;
	dec     _en_life,x
;
; __asm__ ("bne %g", enem_hit_not_killed_yet);
;
	bne     L3006
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("inc %v", pkilled);
;
	inc     _pkilled
;
; on_enem_killed ();
;
	jsr     _on_enem_killed
;
; sfx_play (SFX_ENHIT, 2);
;
L3006:	lda     #$06
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pgtmx = 0;
;
	sta     _pgtmx
	sta     _pgtmx+1
;
; pgtmy = 0;
;
	sta     _pgtmy
	sta     _pgtmy+1
;
; touched = 0;
;
	sta     _touched
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	sta     _gpit
L3017:	lda     _gpit
	cmp     #$03
	bcc     L34DE
;
; }
;
	rts
;
; en_sprid = 0xff;
;
L34DE:	lda     #$FF
	sta     _en_sprid
;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_maxct);
;
	lda     _en_maxct,y
;
; __asm__ ("sta %v", _en_maxct);
;
	sta     __en_maxct
;
; __asm__ ("lda %v, y", en_touched);
;
	lda     _en_touched,y
;
; __asm__ ("sta %v", _en_touched);
;
	sta     __en_touched
;
; __asm__ ("lda %v, y", en_cttouched);
;
	lda     _en_cttouched,y
;
; __asm__ ("sta %v", _en_cttouched);
;
	sta     __en_cttouched
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; if (_en_touched) {    
;
	lda     __en_touched
	beq     L303E
;
; if (_en_cttouched) {
;
	lda     __en_cttouched
	beq     L3038
;
; -- _en_cttouched;
;
	dec     __en_cttouched
;
; en_sprid = EXPL_SPR;
;
	lda     #$2F
;
; goto enems_move_loop_continue; 
;
	jmp     L34D4
;
; } else _en_touched = 0;
;
L3038:	sta     __en_touched
;
; if (_en_t) {
;
L303E:	lda     __en_t
	jeq     L3041
;
; gpjt = (prx + 11 >= _en_x && prx <= _en_x + 11);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$0B
	bcc     L3046
	inx
L3046:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L3047
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L3048
	ldx     #$01
L3048:	jsr     tosicmp
	bcc     L3045
	beq     L3045
L3047:	lda     #$00
	jmp     L3049
L3045:	lda     #$01
L3049:	sta     _gpjt
;
; if (_en_mx != 0) {
;
	lda     __en_mx
	beq     L304A
;
; en_fr = ((_en_x) >> 4) & 1;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
;
; } else if (_en_my != 0) {
;
	jmp     L34DC
L304A:	lda     __en_my
	beq     L3052
;
; en_fr = ((_en_y) >> 4) & 1;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
;
; } else {
;
	jmp     L34DC
;
; en_fr = (frame_counter >> 3) & 1;
;
L3052:	tax
	lda     _frame_counter
	jsr     asrax3
L34DC:	and     #$01
	sta     _en_fr
;
; switch (_en_t & 0xf) {
;
	lda     __en_t
	and     #$0F
;
; }
;
	cmp     #$01
	beq     L3067
	cmp     #$02
	beq     L3067
	cmp     #$03
	beq     L3067
	cmp     #$04
	beq     L3067
	cmp     #$06
	jeq     L309C
	cmp     #$07
	jeq     L3110
	cmp     #$09
	jeq     L3125
	jmp     L305F
;
; if (!en_status [gpit] || half_life) {
;
L3067:	ldy     _gpit
	lda     _en_status,y
	beq     L3069
	lda     _half_life
	beq     L3085
;
; __asm__ ("ldx %v", gpit);
;
L3069:	ldx     _gpit
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("cmp %v, x", en_x1);
;
	cmp     _en_x1,x
;
; __asm__ ("beq %g", enems_lineal_horz_chgdir);
;
	beq     L3074
;
; __asm__ ("cmp %v, x", en_x2);
;
	cmp     _en_x2,x
;
; __asm__ ("bne %g", enems_lineal_horz_done);
;
	bne     L3077
;
; __asm__ ("lda #0");
;
L3074:	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_mx);
;
	sbc     __en_mx
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_y);
;
L3077:	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("cmp %v, x", en_y1);
;
	cmp     _en_y1,x
;
; __asm__ ("beq %g", enems_lineal_vert_chgdir);
;
	beq     L3082
;
; __asm__ ("cmp %v, x", en_y2);
;
	cmp     _en_y2,x
;
; __asm__ ("bne %g", enems_lineal_vert_done);
;
	bne     L3085
;
; __asm__ ("lda #0");
;
L3082:	lda     #0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_my);
;
	sbc     __en_my
;
; __asm__ ("sta %v", _en_my);  
;
	sta     __en_my
;
; en_sprid = c_enems_ssmap [_en_s + en_fr];
;
L3085:	ldx     #$00
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L34DA
	inx
	clc
L34DA:	adc     _c_enems_ssmap
	sta     ptr1
	txa
	adc     _c_enems_ssmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _en_sprid
;
; if (_en_mx < 0) en_sprid += 8;
;
	lda     __en_mx
	asl     a
	bcc     L308D
	lda     #$08
	clc
	adc     _en_sprid
;
; else if (_en_mx == 0 && _en_my < 0) en_sprid += 8;
;
	jmp     L34D6
L308D:	lda     __en_mx
	jne     L305F
	lda     __en_my
	asl     a
	jcc     L305F
	lda     #$08
	clc
	adc     _en_sprid
;
; break;
;
	jmp     L34D6
;
; if ((rand8 () & 7) < 3) goto enems_8way_fanties_done;
;
L309C:	jsr     _rand8
	and     #$07
	cmp     #$03
	jcc     L30D9
;
; __asm__ ("lda %v", frame_counter);
;
	lda     _frame_counter
;
; __asm__ ("and %v", _en_mx);
;
	and     __en_mx
;
; __asm__ ("bne %g", enems_8way_fanties_done);
;
	jne     L30D9
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v", rdx);
;
	sta     _rdx
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v", rdy);
;
	sta     _rdy
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("beq %g", enems_8way_fanties_vertical_done);
;
	beq     L30AB
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("bcc %g", enems_8way_fanties_move_down);
;
	bcc     L30BD
;
; __asm__ ("dec %v", _en_y);
;
	dec     __en_y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("jmp %g", enems_8way_fanties_vert_cy_set);
;
	jmp     L30C1
;
; __asm__ ("inc %v", _en_y);
;
L30BD:	inc     __en_y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
L30C1:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("bne %g", enems_8way_fanties_vertical_do);
;
	bne     L30D0
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("beq %g", enems_8way_fanties_vertical_done);
;
	beq     L30AB
;
; __asm__ ("lda %v", rdy);
;
L30D0:	lda     _rdy
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v", _en_x);
;
L30AB:	lda     __en_x
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("beq %g", enems_8way_fanties_horizontal_done);
;
	beq     L30D9
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("bcc %g", enems_8way_fanties_move_right);
;
	bcc     L30EB
;
; __asm__ ("dec %v", _en_x);
;
	dec     __en_x
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("jmp %g", enems_8way_fanties_horz_cx_set);
;
	jmp     L30EF
;
; __asm__ ("inc %v", _en_x);
;
L30EB:	inc     __en_x
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
L30EF:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("bne %g", enems_8way_fanties_horizontal_do);
;
	bne     L30FE
;
; __asm__ ("lda %v", at2);
;
	lda     _at2
;
; __asm__ ("and #9");
;
	and     #9
;
; __asm__ ("beq %g", enems_8way_fanties_horizontal_done);
;
	beq     L30D9
;
; __asm__ ("lda %v", rdx);
;
L30FE:	lda     _rdx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", frame_counter);
;
L30D9:	lda     _frame_counter
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", en_fr);
;
	sta     _en_fr
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", en_fr);
;
	adc     _en_fr
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda (%v), y", c_enems_ssmap);
;
	lda     (_c_enems_ssmap),y
;
; break;
;
	jmp     L34D6
;
; if (_en_x > prx) _en_x -= _en_mx;
;
L3110:	ldx     #$00
	lda     __en_x
	sec
	sbc     _prx
	bcc     L3111
	beq     L3111
	lda     __en_mx
	eor     #$FF
	sec
;
; else if (_en_x < prx) _en_x += _en_mx;
;
	jmp     L34DD
L3111:	lda     __en_x
	cmp     _prx
	bcs     L3117
	lda     __en_mx
	clc
L34DD:	adc     __en_x
	sta     __en_x
;
; en_sprid = c_enems_ssmap [((PURSUERS_CELL - 1) << 1) + ((frame_counter >> 2) & 1)];
;
L3117:	lda     _frame_counter
	jsr     asrax2
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L34DB
	inx
	clc
L34DB:	adc     _c_enems_ssmap
	sta     ptr1
	txa
	adc     _c_enems_ssmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
;
; break;
;
	jmp     L34D6
;
; if (!en_status [gpit] || half_life) {
;
L3125:	ldy     _gpit
	lda     _en_status,y
	beq     L3127
	lda     _half_life
	beq     L313C
;
; __asm__ ("ldx %v", gpit);
;
L3127:	ldx     _gpit
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("cmp %v, x", en_x2);
;
	cmp     _en_x2,x
;
; __asm__ ("bne %g", enems_droparrow_horz_done);
;
	bne     L3132
;
; __asm__ ("lda %v, x", en_x1);
;
	lda     _en_x1,x
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", _en_y);
;
L3132:	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("cmp %v, x", en_y2);
;
	cmp     _en_y2,x
;
; __asm__ ("bne %g", enems_droparrow_vert_done);
;
	bne     L313C
;
; __asm__ ("lda %v, x", en_y1);
;
	lda     _en_y1,x
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; en_sprid = _en_s;
;
L313C:	lda     __en_s
L34D6:	sta     _en_sprid
;
; if (_en_ct) -- _en_ct; else {
;
L305F:	lda     __en_ct
	beq     L3142
	dec     __en_ct
	jmp     L319E
;
; _x = _en_x + 4; _y = _en_y + 4; _t = 0xff;
;
L3142:	lda     __en_x
	clc
	adc     #$04
	sta     __x
	lda     __en_y
	clc
	adc     #$04
	sta     __y
	lda     #$FF
	sta     __t
;
; switch (_en_t & 0xf0) {
;
	lda     __en_t
	and     #$F0
;
; }
;
	cmp     #$10
	beq     L3152
	cmp     #$20
	jeq     L316E
	cmp     #$30
	jeq     L318A
	cmp     #$40
	jeq     L318A
	cmp     #$50
	jeq     L318A
	cmp     #$60
	jeq     L318A
	cmp     #$70
	jeq     L3197
	jmp     L3150
;
; if (pry + 8 >= _en_y && pry <= _en_y + 8) {
;
L3152:	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L3155
	inx
L3155:	cmp     __en_y
	txa
	sbc     #$00
	jcc     L3150
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$08
	bcc     L3157
	ldx     #$01
L3157:	jsr     tosicmp
	bcc     L3154
	jne     L3150
;
; if (_en_mx == 0 || 
;
L3154:	lda     __en_mx
	beq     L315A
;
; (_en_mx > 0 && prx > _en_x) ||
;
	lda     __en_mx
	sec
	sbc     #$01
	bvs     L315E
	eor     #$80
L315E:	bpl     L34CE
	lda     _prx
	sec
	sbc     __en_x
	sta     tmp1
	lda     tmp1
	beq     L34CE
	bcs     L315A
;
; (_en_mx < 0 && prx < _en_x)
;
L34CE:	lda     __en_mx
	asl     a
	jcc     L3150
	lda     _prx
	cmp     __en_x
	jcs     L3150
;
; _t = (prx < _en_x) ? 6 : 2;
;
L315A:	lda     _prx
	cmp     __en_x
	bcs     L3169
	lda     #$06
	jmp     L34D8
L3169:	lda     #$02
;
; break;
;
	jmp     L34D8
;
; if (prx + 8 >= _en_x && prx <= _en_x + 8) {
;
L316E:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L3171
	inx
L3171:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L3150
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$08
	bcc     L3173
	ldx     #$01
L3173:	jsr     tosicmp
	bcc     L3170
	bne     L3150
;
; if (_en_my == 0 || 
;
L3170:	lda     __en_my
	beq     L3176
;
; (_en_my > 0 && pry > _en_y) ||
;
	lda     __en_my
	sec
	sbc     #$01
	bvs     L317A
	eor     #$80
L317A:	bpl     L34D0
	lda     _pry
	sec
	sbc     __en_y
	sta     tmp1
	lda     tmp1
	beq     L34D0
	bcs     L3176
;
; (_en_my < 0 && pry < _en_y)
;
L34D0:	lda     __en_my
	asl     a
	bcc     L3150
	lda     _pry
	cmp     __en_y
	bcs     L3150
;
; _t = (pry < _en_y) ? 0 : 4;
;
L3176:	lda     _pry
	cmp     __en_y
	bcs     L3185
	lda     #$00
	jmp     L34D8
L3185:	lda     #$04
;
; break;
;
	jmp     L34D8
;
; _t = ((_en_t >> 4) - 3) << 1;
;
L318A:	ldx     #$00
	lda     __en_t
	jsr     asrax4
	sec
	sbc     #$03
	asl     a
;
; break;
;
	jmp     L34D8
;
; __asm__ ("ldx %v", gpit);
;
L3197:	ldx     _gpit
;
; __asm__ ("inc %v, x", en_cur_d);
;
	inc     _en_cur_d,x
;
; __asm__ ("lda %v, x", en_cur_d);
;
	lda     _en_cur_d,x
;
; __asm__ ("and #7");
;
	and     #7
;
; __asm__ ("sta %v, x", en_cur_d);
;
	sta     _en_cur_d,x
;
; __asm__ ("sta %v", _t);
;
L34D8:	sta     __t
;
; if (_t != 0xff) {
;
L3150:	lda     __t
	cmp     #$FF
	beq     L319E
;
; cocos_add ();
;
	jsr     _cocos_add
;
; _en_ct = _en_maxct ? _en_maxct : ENEM_COCOS_FREQ;
;
	lda     __en_maxct
	beq     L31A3
	lda     __en_maxct
	jmp     L31A5
L31A3:	lda     #$96
L31A5:	sta     __en_ct
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM)
;
L319E:	lda     _vertical_engine_type
	cmp     #$03
	jeq     L31C2
;
; if (_en_t == 4 && gpjt && !pgotten && !pj) {
;
	lda     __en_t
	cmp     #$04
	jne     L31C2
	lda     _gpjt
	jeq     L31C2
	lda     _pgotten
	jne     L31C2
	lda     _pj
	jne     L31C2
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L31AF
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L31B1
	inx
L31B1:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L31AF
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L31B3
	inx
L31B3:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L31B0
	bne     L31AF
;
; pgotten = 1;
;
L31B0:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (FIXBITS - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L31B9
	dex
L31B9:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; pry = _en_y - 16; py = pry << FIXBITS;       
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L31AF:	lda     __en_my
	asl     a
	bcc     L34D2
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L31C7
	inx
L31C7:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L34D2
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L31C8
	inx
L31C8:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L31C3
	beq     L31C3
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L34D2:	lda     __en_my
	sec
	sbc     #$01
	bvs     L31CC
	eor     #$80
L31CC:	jpl     L31C2
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L31CE
	inx
L31CE:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L31CF
	dex
L31CF:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L31C2
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L31D0
	inx
L31D0:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L31C3
	bne     L31C2
;
; pgotten = 1;
;
L31C3:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (FIXBITS - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L31D7
	dex
L31D7:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; pry = _en_y - 16; py = pry << FIXBITS;
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
;
; _en_t != 4
;
L31C2:	lda     __en_t
;
; && _en_t != 9
;
	cmp     #$04
	beq     L31F6
	lda     __en_t
;
; ) {
;
	cmp     #$09
	beq     L31F6
;
; if (hitter_on && hitter_hit_y) {
;
	lda     _hitter_on
	beq     L31F6
	lda     _hitter_hit_y
	beq     L31F6
;
; IF_COLLIDE_IN (hitter_hit_x, hitter_hit_y, _en_x, _en_y) {
;
	lda     _hitter_hit_x
	sta     __x1
	lda     _hitter_hit_y
	sta     __y1
	lda     __en_x
	sta     __x2
	lda     __en_y
	sta     __y2
	jsr     _collide_in
	tax
	beq     L31F6
;
; enem_hit ();
;
	jsr     _enem_hit
;
; goto enems_move_loop_continue;
;
	jmp     L320E
;
; if (!touched) {
;
L31F6:	lda     _touched
	bne     L320E
;
; IF_COLLIDE (prx, pry, _en_x, _en_y) {
;
	lda     _prx
	sta     __x1
	lda     _pry
	sta     __y1
	lda     __en_x
	sta     __x2
	lda     __en_y
	sta     __y2
	jsr     _collide
	tax
	beq     L320E
;
; if (_en_t != 4)
;
	lda     __en_t
	cmp     #$04
	beq     L320E
;
; touched = phit = 1;
;
	lda     #$01
	sta     _phit
	sta     _touched
;
; } else {
;
	jmp     L320E
;
; en_sprid = 0xff;
;
L3041:	lda     #$FF
L34D4:	sta     _en_sprid
;
; if (en_sprid == 0xff) oam_2x2_meta_spr (0, 240, gpit << 4, 0, 252);
;
L320E:	lda     _en_sprid
	cmp     #$FF
	bne     L3211
	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     _gpit
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$FC
;
; else oam_2x2_meta_spr (_en_x, _en_y + SPRITE_ADJUST, gpit << 4, spriteset_pals [en_sprid], en_sprid << 2);
;
	jmp     L34D9
L3211:	jsr     decsp4
	lda     __en_x
	ldy     #$03
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$07
	dey
	sta     (sp),y
	lda     _gpit
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
	ldy     _en_sprid
	lda     _spriteset_pals,y
	ldy     #$00
	sta     (sp),y
	lda     _en_sprid
	asl     a
	asl     a
L34D9:	jsr     _oam_2x2_meta_spr
;
; enems_arrays_restore ();
;
	jsr     _enems_arrays_restore
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	inc     _gpit
	jmp     L3017

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill (0, 1024);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; pad_read ();
;
L3230:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_START|PAD_SELECT|PAD_B)) break;
;
	lda     _pad_this_frame
	and     #$0F
	beq     L3230
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title: near

.segment	"CODE"

;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; un_rle_screen2 ((unsigned char *) rlets_0);
;
	lda     #<(_rlets_0)
	ldx     #>(_rlets_0)
	jsr     pushax
	jsr     _un_rle_screen2
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; PR_STR (10, 2, "MOJON TWINS\"");
;
	lda     #$0A
	sta     __x
	lda     #$02
	sta     __y
	lda     #<(L0001)
	sta     __s
	lda     #>(L0001)
	sta     __s+1
	jsr     _pr_str
;
; PR_STR (10, 23, "START=NORMAL%SELECT=KIDS!");
;
	lda     #$0A
	sta     __x
	lda     #$17
	sta     __y
	lda     #<(L0001+13)
	sta     __s
	lda     #>(L0001+13)
	sta     __s+1
	jsr     _pr_str
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (M_TITLE);
;
	lda     #$01
	jsr     _music_play
;
; bat_out ();
;
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ fixed_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fixed_screen: near

.segment	"CODE"

;
; pal_bg (mypal_game_bg0);
;
	lda     #<(_mypal_game_bg0)
	ldx     #>(_mypal_game_bg0)
	jsr     _pal_bg
;
; pal_spr (mypal_game_fg0);
;
	lda     #<(_mypal_game_fg0)
	ldx     #>(_mypal_game_fg0)
	jsr     _pal_spr
;
; if (rdn < 2) cls (); else un_rle_screen2 ((unsigned char *) rlets_1);
;
	lda     _rdn
	cmp     #$02
	bcs     L325E
	jsr     _cls
	jmp     L3261
L325E:	lda     #<(_rlets_1)
	ldx     #>(_rlets_1)
	jsr     pushax
	jsr     _un_rle_screen2
;
; switch (rdn) {
;
L3261:	lda     _rdn
;
; }
;
	beq     L3268
	cmp     #$01
	beq     L3278
	cmp     #$02
	jeq     L3290
	cmp     #$03
	jeq     L329C
	jmp     L3266
;
; PR_STR (11, 14, (unsigned char *) (level_names + ((level << 3) + (level << 1) + level)));
;
L3268:	lda     #$0B
	sta     __x
	lda     #$0E
	sta     __y
	ldx     #$00
	lda     _level
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _level
	asl     a
	bcc     L34E1
	inx
	clc
L34E1:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	clc
	adc     _level
	bcc     L34E2
	inx
	clc
L34E2:	adc     #<(_level_names)
	sta     __s
	txa
	adc     #>(_level_names)
	sta     __s+1
	jsr     _pr_str
;
; break;
;
	jmp     L3266
;
; PR_STR (11, 13, "GAME OVER!");
;
L3278:	lda     #$0B
	sta     __x
	lda     #$0D
	sta     __y
	lda     #<(L0001+39)
	sta     __s
	lda     #>(L0001+39)
	sta     __s+1
	jsr     _pr_str
;
; if (kids_mode) {
;
	lda     _kids_mode
	jeq     L3266
;
; PR_STR (9, 15, "START=CONTINUE");
;
	lda     #$09
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+50)
	sta     __s
	lda     #>(L0001+50)
	sta     __s+1
	jsr     _pr_str
;
; break;
;
	jmp     L3266
;
; PR_STR (11, 13, "PLACEHOLDER ENDING");
;
L3290:	lda     #$0B
	sta     __x
	lda     #$0D
	sta     __y
	lda     #<(L0001+65)
	sta     __s
	lda     #>(L0001+65)
	sta     __s+1
	jsr     _pr_str
;
; break;
;
	jmp     L3266
;
; PR_STR (7, 10, "  SORRY NINJAJAR%% BUT YER NOVIA IS%%IN ANOTHER CASTLE!");
;
L329C:	lda     #$07
	sta     __x
	lda     #$0A
	sta     __y
	lda     #<(L0001+84)
	sta     __s
	lda     #>(L0001+84)
	sta     __s+1
	jsr     _pr_str
;
; oam_2x2_meta_spr (32, 183, 0, 1, 0x4c);
;
	jsr     decsp4
	lda     #$20
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     #$4C
	jsr     _oam_2x2_meta_spr
;
; oam_2x2_meta_spr (208, 183, 16, 0, 0x14);
;
	jsr     decsp4
	lda     #$D0
	ldy     #$03
	sta     (sp),y
	lda     #$B7
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$14
	jsr     _oam_2x2_meta_spr
;
; bat_in ();
;
L3266:	jsr     _bat_in
;
; music_play (M_GOVER);
;
	lda     #$01
	jsr     _music_play
;
; bat_out ();
;
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; set_rand (n_pant + 1);
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L32BA
	inx
L32BA:	jsr     _set_rand
;
; fade_delay = 1;
;
	lda     #$01
	sta     _fade_delay
;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L32BD
	jsr     _fade_out
	jmp     L32C0
L32BD:	lda     #$00
	sta     _ft
;
; enems_load ();
;
L32C0:	jsr     _enems_load
;
; f_zone_ac = 0;
;
	lda     #$00
	sta     _f_zone_ac
;
; ppu_off ();
;
	jsr     _ppu_off
;
; exiting_screen ();
;
	jsr     _exiting_screen
;
; draw_scr ();
;
	jsr     _draw_scr
;
; hotspots_create ();
;
	jsr     _hotspots_create
;
; pscreenissafe = 1;
;
	lda     #$01
	sta     _pscreenissafe
;
; entering_screen ();
;
	jsr     _entering_screen
;
; vram_write (attr_table, 0x23c0, 48);
;
	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$30
	jsr     _vram_write
;
; enems_move ();
;
	jsr     _enems_move
;
; player_move ();
;
	jsr     _player_move
;
; if (psafe) player_set_safe ();
;
	lda     _psafe
	beq     L32D3
	jsr     _player_set_safe
;
; hitter_on = 0;
;
L32D3:	lda     #$00
	sta     _hitter_on
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; __asm__ ("lda %v", c_ppu_mask);
;
	lda     _c_ppu_mask
;
; __asm__ ("and %v", ppu_mask_xor_bits_fiddle);
;
	and     _ppu_mask_xor_bits_fiddle
;
; __asm__ ("beq %g", init_ppu_mask_nope);
;
	beq     L32DC
;
; __asm__ ("lda %v", c_ppu_mask);
;
	lda     _c_ppu_mask
;
; __asm__ ("eor %v", ppu_mask_xor_bits_fiddle);
;
	eor     _ppu_mask_xor_bits_fiddle
;
; __asm__ ("jmp %g", init_ppu_mask_set);
;
	jmp     L32E0
;
; __asm__ ("lda %v", c_ppu_mask);
;
L32DC:	lda     _c_ppu_mask
;
; __asm__ ("sta $2001");
;
L32E0:	sta     $2001
;
; cocos_init ();
;
	jsr     _cocos_init
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (vertical_engine_type == ENGINE_TYPE_SWIM)
;
	lda     _vertical_engine_type
	cmp     #$03
	jne     _fade_in
;
; player_set_safe ();
;
	jsr     _player_set_safe
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; n_pant = l_scr_ini [level];
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; on_pant = 99;
;
	lda     #$63
	sta     _on_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; bolts_load ();
;
	jsr     _bolts_load
;
; player_init ();
;
	jsr     _player_init
;
; memfill (flags, 0, MAX_FLAGS);
;
	jsr     decsp3
	lda     #<(_flags)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_flags)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$08
	jsr     _memfill
;
; entering_level ();
;
	jsr     _entering_level
;
; half_life = win_game = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_game
	sta     _half_life
;
; olife = oammo = oobjs = okeys = 0x99;
;
	lda     #$99
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; pneedsreset = 0;
;
	lda     #$00
	sta     _pneedsreset
;
; music_play (M_INGAME);
;
	jsr     _music_play
;
; set_vram_update (update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; update_list [0] = 0xff;
;
	lda     #$FF
	sta     _update_list
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ft = 1; while (1) {
;
	lda     #$01
	sta     _ft
;
; half_life ^= 1;
;
L330D:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; pad_read ();
;
	jsr     _pad_read
;
; if (paused == 0) {
;
	lda     _paused
	jne     L3316
;
; phit = 0;
;
	sta     _phit
;
; rdx = prx + 8; rdy = pry + 8;
;
	lda     _prx
	clc
	adc     #$08
	sta     _rdx
	lda     _pry
	clc
	adc     #$08
	sta     _rdy
;
; firezoned = (f_zone_ac && (rdx >= fzx1 && rdx <= fzx2 && rdy >= fzy1 && rdy <= fzy2));
;
	lda     _f_zone_ac
	beq     L3323
	lda     _rdx
	cmp     _fzx1
	bcc     L3323
	lda     _rdx
	sec
	sbc     _fzx2
	sta     tmp1
	lda     tmp1
	beq     L34E7
	bcs     L3323
L34E7:	lda     _rdy
	cmp     _fzy1
	bcc     L3323
	lda     _rdy
	sec
	sbc     _fzy2
	bcc     L3322
	beq     L3322
L3323:	lda     #$00
	jmp     L3327
L3322:	lda     #$01
L3327:	sta     _firezoned
;
; if ((pad_this_frame & PAD_B) || firezoned) 
;
	lda     _pad_this_frame
	and     #$02
	bne     L3329
	lda     _firezoned
	beq     L3328
;
; press_fire_at_screen ();
;
L3329:	jsr     _press_fire_at_screen
;
; player_move ();
;
L3328:	jsr     _player_move
;
; if (hitter_on) hitter_do ();
;
	lda     _hitter_on
	beq     L332E
	jsr     _hitter_do
;
; else oam_spr (0, 240, 0, 0, 252);
;
	jmp     L3331
L332E:	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$FC
	jsr     _oam_spr
;
; enems_move ();
;
L3331:	jsr     _enems_move
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (do_process_breakable) breakable_do_anim ();
;
L3316:	lda     _do_process_breakable
	beq     L333A
	jsr     _breakable_do_anim
;
; if (hrt) {
;
L333A:	lda     _hrt
	jeq     L3374
;
; IF_COLLIDE_IN (prx + 8, pry + 8, hrx, hry) {
;
	lda     _prx
	clc
	adc     #$08
	sta     __x1
	lda     _pry
	clc
	adc     #$08
	sta     __y1
	lda     _hrx
	sta     __x2
	lda     _hry
	sta     __y2
	jsr     _collide_in
	tax
	jeq     L3374
;
; _x = hrx >> 4; _y = hry >> 4; _t = map_buff [(hry & 0xf0) | _x]; map_set ();     
;
	ldx     #$00
	lda     _hrx
	jsr     asrax4
	sta     __x
	ldx     #$00
	lda     _hry
	jsr     asrax4
	sta     __y
	lda     _hry
	and     #$F0
	sta     ptr1
	lda     __x
	ora     ptr1
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     __t
	jsr     _map_set
;
; rda = 0; switch (hrt) {
;
	lda     #$00
	sta     _rda
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L335E
	cmp     #$02
	beq     L3364
	cmp     #$03
	beq     L3369
	jmp     L335C
;
; ++ pobjs;
;
L335E:	inc     _pobjs
;
; on_obj_got ();
;
	jsr     _on_obj_got
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L34E8
;
; ++ pkeys;
;
L3364:	inc     _pkeys
;
; rda = SFX_USE;
;
	lda     #$03
;
; break;
;
	jmp     L34E8
;
; plife += PLAYER_REFILL;
;
L3369:	inc     _plife
;
; rda = SFX_USE;
;
L34E8:	sta     _rda
;
; hry = 240;
;
L335C:	lda     #$F0
	sta     _hry
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	lda     #$00
	sta     _hact,y
;
; if (rda) sfx_play (rda, 1);
;
	lda     _rda
	beq     L3374
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pad_this_frame & PAD_START) {
;
L3374:	lda     _pad_this_frame
	and     #$08
	beq     L3379
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; music_pause (paused);
;
	jsr     _music_pause
;
; pal_bright (4 - paused);    
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; if (prx == 0 && pvx < 0) {
;
L3379:	lda     _prx
	bne     L3381
	lda     _pvx
	asl     a
	bcc     L3381
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; prx = 240; px = prx << FIXBITS;
;
	lda     #$F0
;
; } else if (prx == 240 && pvx > 0) {
;
	jmp     L34EE
L3381:	lda     _prx
	cmp     #$F0
	bne     L338C
	lda     _pvx
	sec
	sbc     #$01
	bvs     L3390
	eor     #$80
L3390:	bpl     L338C
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; prx = 0; px = prx << FIXBITS;
;
	lda     #$00
L34EE:	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (pry > 192 && pry <= 248 && pvy < 0 && n_pant >= c_map_w) {
;
L338C:	lda     _pry
	cmp     #$C1
	bcc     L3397
	lda     _pry
	cmp     #$F9
	bcs     L3397
	lda     _pvy
	asl     a
	bcc     L3397
	ldx     #$00
	lda     _n_pant
	cmp     _c_map_w
	bcc     L3397
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; pry = 176; py = pry << FIXBITS;
;
	lda     #$B0
	sta     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; } else if (pry >= 176 && pry < 192 && pvy > 0) {
;
	jmp     L33A3
L3397:	lda     _pry
	cmp     #$B0
	bcc     L33A3
	lda     _pry
	cmp     #$C0
	bcs     L33A3
	lda     _pvy
	sec
	sbc     #$01
	bvs     L33A7
	eor     #$80
L33A7:	bpl     L33A3
;
; n_pant += c_map_w;
;
	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; pry = py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
	sta     _pry
;
; if (on_pant != n_pant) flick_screen ();
;
L33A3:	lda     _n_pant
	cmp     _on_pant
	beq     L33AE
	jsr     _flick_screen
;
; if (okeys != pkeys) {
;
L33AE:	lda     _pkeys
	cmp     _okeys
	beq     L33B1
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; P_T (KEYS_X, KEYS_Y, pkeys);
;
	lda     #$1C
	sta     __x
	lda     #$1A
	sta     __y
	lda     _pkeys
	sta     __t
	jsr     _p_t
;
; if (olife != plife) {
;
L33B1:	lda     _plife
	cmp     _olife
	beq     L33BF
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; P_T (LIFE_X, LIFE_Y, plife);
;
	lda     #$04
	sta     __x
	lda     #$1A
	sta     __y
	lda     _plife
	sta     __t
	jsr     _p_t
;
; custom_hud ();
;
L33BF:	jsr     _custom_hud
;
; if (f1 && !paused) {
;
	lda     _f1
	jeq     L33EA
	lda     _paused
	jne     L33EA
;
; if (lava_ticker) -- lava_ticker; else {
;
	lda     _lava_ticker
	beq     L33D2
	dec     _lava_ticker
	jmp     L33DD
;
; sfx_play (SFX_BREAKB, 0);
;
L33D2:	lda     #$11
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; lava_ticker = lava_delay;
;
	lda     _lava_delay
	sta     _lava_ticker
;
; lava_height --;
;
	lda     _lava_height
	sec
	sbc     #$01
	sta     _lava_height
;
; lava_calc ();
;
	jsr     _lava_calc
;
; if (lava_on_screen) lava_draw_buff ();  
;
	lda     _lava_on_screen
	beq     L33DD
	jsr     _lava_draw_buff
;
; rda = frame_counter & 0xf;
;
L33DD:	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; scroll (jitter [rda], 240-8 + jitter [15-rda]);
;
	lda     #<(_jitter)
	ldx     #>(_jitter)
	clc
	adc     _rda
	bcc     L33E5
	inx
L33E5:	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L33E6
	dex
L33E6:	jsr     pushax
	lda     #$0F
	sec
	sbc     _rda
	clc
	adc     #<(_jitter)
	tay
	lda     #$00
	adc     #>(_jitter)
	tax
	tya
	ldy     #$00
	jsr     ldaidx
	clc
	adc     #$E8
	bcc     L33E9
	inx
L33E9:	jsr     _scroll
;
; if (pry <= 176 && pry + scrpixoffset > lava_height_pixels - 12) {
;
	lda     _pry
	cmp     #$B1
	bcs     L33EA
	lda     _pry
	clc
	adc     _scrpixoffset
	pha
	lda     #$00
	adc     _scrpixoffset+1
	tax
	pla
	jsr     pushax
	lda     _lava_height_pixels
	ldx     _lava_height_pixels+1
	sec
	sbc     #$0C
	bcs     L33ED
	dex
L33ED:	jsr     tosicmp
	beq     L33EA
	bcc     L33EA
;
; pstate = EST_NORMAL; phit = 1; pneedsreset = 1;
;
	lda     #$00
	sta     _pstate
	lda     #$01
	sta     _phit
	sta     _pneedsreset
;
; close_update_cycle ();
;
L33EA:	jsr     _close_update_cycle
;
; if (pstate != EST_FLICKERING) if (phit) player_kill ();
;
	lda     _pstate
	cmp     #$02
	beq     L33F8
	lda     _phit
	beq     L33F8
	jsr     _player_kill
;
; if (on_pant != n_pant) {
;
L33F8:	lda     _n_pant
	cmp     _on_pant
	beq     L33FB
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if ((pad & (PAD_UP|PAD_B|PAD_SELECT)) == (PAD_UP|PAD_B|PAD_SELECT)) win_game = 1;
;
L33FB:	lda     _pad
	and     #$16
	cmp     #$16
	bne     L3400
	lda     #$01
	sta     _win_game
;
; if (game_over || win_game || pneedsreset) break;
;
L3400:	lda     _game_over
	bne     L330E
	lda     _win_game
	bne     L330E
	lda     _pneedsreset
	jeq     L330D
;
; music_stop (); 
;
L330E:	jsr     _music_stop
;
; set_vram_update (0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; scroll (0, 240-8);
;
	jsr     push0
	lda     #$E8
	jsr     _scroll
;
; ppu_mask_xor_bits_fiddle = ppu_system () ? 0x60 : 0;
;
	jsr     _ppu_system
	stx     tmp1
	ora     tmp1
	beq     L341B
	lda     #$60
L341B:	sta     _ppu_mask_xor_bits_fiddle
;
; title ();
;
L341D:	jsr     _title
;
; kids_mode = (pad_this_frame & PAD_SELECT);
;
	lda     _pad_this_frame
	and     #$04
	sta     _kids_mode
;
; level = 9;
;
	lda     #$09
	sta     _level
;
; plife = kids_mode ? 10 : 5;
;
	lda     _kids_mode
	beq     L3428
	lda     #$0A
	jmp     L342A
L3428:	lda     #$05
L342A:	sta     _plife
;
; entering_game ();
;
	jsr     _entering_game
;
; rdn = 0; fixed_screen ();
;
L342D:	lda     #$00
	sta     _rdn
	jsr     _fixed_screen
;
; unrle_vram (hud_rle, 0x2000);
;
	lda     #<(_hud_rle)
	ldx     #>(_hud_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; if (kids_mode) {
;
	lda     _kids_mode
	beq     L3436
;
; vram_adr (0x2000+26*32+1);
;
	ldx     #$23
	lda     #$41
	jsr     _vram_adr
;
; VRAM_PUTN (62);
;
	lda     #$3E
	sta     $2007
;
; __asm__ ("ldx %v", level);
;
L3436:	ldx     _level
;
; __asm__ ("lda %v, x", l_bolts_max);
;
	lda     _l_bolts_max,x
;
; __asm__ ("sta %v", c_bolts_max);
;
	sta     _c_bolts_max
;
; __asm__ ("lda %v, x", l_alt_bg);
;
	lda     _l_alt_bg,x
;
; __asm__ ("sta %v", c_alt_bg);
;
	sta     _c_alt_bg
;
; __asm__ ("lda %v, x", l_map_w);
;
	lda     _l_map_w,x
;
; __asm__ ("sta %v", c_map_w);
;
	sta     _c_map_w
;
; __asm__ ("lda %v, x", l_ppu_mask);
;
	lda     _l_ppu_mask,x
;
; __asm__ ("sta %v", c_ppu_mask);
;
	sta     _c_ppu_mask
;
; __asm__ ("lda %v", level);
;
	lda     _level
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", l_map);
;
	lda     _l_map,y
;
; __asm__ ("sta %v", c_map);
;
	sta     _c_map
;
; __asm__ ("lda %v+1, y", l_map);
;
	lda     _l_map+1,y
;
; __asm__ ("sta %v+1", c_map);
;
	sta     _c_map+1
;
; __asm__ ("lda %v, y", l_locks);
;
	lda     _l_locks,y
;
; __asm__ ("sta %v", c_locks);
;
	sta     _c_locks
;
; __asm__ ("lda %v+1, y", l_locks);
;
	lda     _l_locks+1,y
;
; __asm__ ("sta %v+1", c_locks);
;
	sta     _c_locks+1
;
; __asm__ ("lda %v, y", l_enems);
;
	lda     _l_enems,y
;
; __asm__ ("sta %v", c_enems);
;
	sta     _c_enems
;
; __asm__ ("lda %v+1, y", l_enems);
;
	lda     _l_enems+1,y
;
; __asm__ ("sta %v+1", c_enems);
;
	sta     _c_enems+1
;
; __asm__ ("lda %v, y", l_hotspots);
;
	lda     _l_hotspots,y
;
; __asm__ ("sta %v", c_hotspots);
;
	sta     _c_hotspots
;
; __asm__ ("lda %v+1, y", l_hotspots);
;
	lda     _l_hotspots+1,y
;
; __asm__ ("sta %v+1", c_hotspots);
;
	sta     _c_hotspots+1
;
; __asm__ ("lda %v, y", l_tsmap);
;
	lda     _l_tsmap,y
;
; __asm__ ("sta %v", c_tsmap);
;
	sta     _c_tsmap
;
; __asm__ ("lda %v+1, y", l_tsmap);
;
	lda     _l_tsmap+1,y
;
; __asm__ ("sta %v+1", c_tsmap);
;
	sta     _c_tsmap+1
;
; __asm__ ("lda %v, y", l_enems_ssmap);
;
	lda     _l_enems_ssmap,y
;
; __asm__ ("sta %v", c_enems_ssmap);
;
	sta     _c_enems_ssmap
;
; __asm__ ("lda %v+1, y", l_enems_ssmap);
;
	lda     _l_enems_ssmap+1,y
;
; __asm__ ("sta %v+1", c_enems_ssmap);
;
	sta     _c_enems_ssmap+1
;
; __asm__ ("lda %v, y", l_pal_bg);
;
	lda     _l_pal_bg,y
;
; __asm__ ("ldx %v+1, y", l_pal_bg);
;
	ldx     _l_pal_bg+1,y
;
; __asm__ ("jsr %v", pal_bg);
;
	jsr     _pal_bg
;
; __asm__ ("lda %v", level);
;
	lda     _level
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", l_pal_spr);
;
	lda     _l_pal_spr,y
;
; __asm__ ("ldx %v+1, y", l_pal_spr);
;
	ldx     _l_pal_spr+1,y
;
; __asm__ ("jsr %v", pal_spr);
;
	jsr     _pal_spr
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L346B
;
; rdn = 1; fixed_screen ();
;
	lda     #$01
	sta     _rdn
	jsr     _fixed_screen
;
; if (!(kids_mode && (pad_this_frame & PAD_START))) break;
;
	lda     _kids_mode
	beq     L3475
	lda     _pad_this_frame
	and     #$08
	beq     L3475
	lda     #$01
L3475:	jsr     bnega
	jne     L341D
;
; else plife = kids_mode ? 10 : 5;
;
	lda     _kids_mode
	beq     L3479
	lda     #$0A
	jmp     L347B
L3479:	lda     #$05
L347B:	sta     _plife
;
; } else if (!pneedsreset) {
;
	jmp     L342D
L346B:	lda     _pneedsreset
	jne     L342D
;
; ++ level;
;
	inc     _level
;
; if (level == MAX_LEVELS) {
;
	lda     _level
	cmp     #$0B
	jne     L342D
;
; rdn = 2; fixed_screen ();
;
	lda     #$02
	sta     _rdn
	jsr     _fixed_screen
;
; break;
;
	jmp     L341D

.endproc

